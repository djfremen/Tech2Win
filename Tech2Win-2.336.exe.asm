;
; +-------------------------------------------------------------------------+
; |      This file was generated by The Interactive Disassembler (IDA)      |
; |           Copyright (c) 2025 Hex-Rays, <support@hex-rays.com>           |
; |                            Freeware version                             |
; +-------------------------------------------------------------------------+
;
; Input SHA256 : 3BC37FBFF3B0145BEB9022A37E031F1EEEF0C0978AB914D549223DAA0862C4D9
; Input MD5    : 6F65D24B8973B59E86016C6659A87A41
; Input CRC32  : 16A29584
; Compiler     : Visual C++

; File Name   : C:\Users\manfr\Downloads\Tech2Win-SAAB\Tech2Win-SAAB\Tech2Win-2.336.exe
; Format      : Portable executable for 80386 (PE)
; Imagebase   : 400000
; Timestamp   : 5CB61F9F (Tue Apr 16 18:31:59 2019)
; Section 1. (virtual address 00001000)
; Virtual size                  : 00010184 (  65924.)
; Section size in file          : 00010200 (  66048.)
; Offset to raw data for section: 00000400
; Flags 60000020: Text Executable Readable
; Alignment     : default
; PDB File Name : C:\Users\hzyj02\tech2win\gme_source_dump\SS_SFT_1425-source\t2_emulator_install\bin\Release\Tech2WinSetup.pdb
; OS type         :  MS Windows
; Application type:  Executable 32bit

.686p
.mmx
.model flat


; Segment type: Pure code
; Segment permissions: Read/Execute
_text segment para public 'CODE' use32
assume cs:_text
;org 881000h
assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing


; Attributes: bp-based frame

; int __thiscall sub_881000(void *Block, char)
sub_881000 proc near

arg_0= byte ptr  8

push    ebp
mov     ebp, esp
test    [ebp+arg_0], 1
push    esi
mov     esi, ecx
mov     dword ptr [esi], offset off_892FF4
jz      short loc_88101B
push    esi             ; Block
call    j__free
add     esp, 4

loc_88101B:
mov     eax, esi
pop     esi
pop     ebp
retn    4
sub_881000 endp

align 10h
; [00000012 BYTES: COLLAPSED FUNCTION std::error_category::default_error_condition(int)]
align 10h


; Attributes: bp-based frame

sub_881050 proc near

var_8= byte ptr -8
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

push    ebp
mov     ebp, esp
mov     eax, [ecx]
sub     esp, 8
lea     edx, [ebp+var_8]
push    [ebp+arg_0]
push    edx
call    dword ptr [eax+0Ch]
mov     edx, [ebp+arg_4]
mov     ecx, [eax+4]
cmp     ecx, [edx+4]
jnz     short loc_88107B
mov     eax, [eax]
cmp     eax, [edx]
jnz     short loc_88107B
mov     al, 1
mov     esp, ebp
pop     ebp
retn    8

loc_88107B:
xor     al, al
mov     esp, ebp
pop     ebp
retn    8
sub_881050 endp

align 10h


; Attributes: bp-based frame

sub_881090 proc near

arg_0= dword ptr  8
arg_4= dword ptr  0Ch

push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_0]
cmp     ecx, [eax+4]
jnz     short loc_8810A8
mov     eax, [eax]
cmp     eax, [ebp+arg_4]
jnz     short loc_8810A8
mov     al, 1
pop     ebp
retn    8

loc_8810A8:
xor     al, al
pop     ebp
retn    8
sub_881090 endp

align 10h



sub_8810B0 proc near
mov     eax, offset aGeneric ; "generic"
retn
sub_8810B0 endp

align 10h


; Attributes: bp-based frame

sub_8810C0 proc near

var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

push    ebp
mov     ebp, esp
push    ecx
push    esi
push    [ebp+arg_4]
mov     [ebp+var_4], 0
call    sub_8852D8
mov     esi, [ebp+arg_0]
add     esp, 4
test    eax, eax
mov     edx, offset aUnknownError ; "unknown error"
cmovnz  edx, eax
mov     dword ptr [esi+14h], 0Fh
mov     dword ptr [esi+10h], 0
mov     byte ptr [esi], 0
cmp     byte ptr [edx], 0
jnz     short loc_88110E
xor     ecx, ecx
push    ecx             ; Size
push    edx             ; Src
mov     ecx, esi
call    sub_881250
mov     eax, esi
pop     esi
mov     esp, ebp
pop     ebp
retn    8

loc_88110E:
mov     ecx, edx
push    edi
lea     edi, [ecx+1]

loc_881114:
mov     al, [ecx]
inc     ecx
test    al, al
jnz     short loc_881114
sub     ecx, edi
pop     edi
push    ecx             ; Size
push    edx             ; Src
mov     ecx, esi
call    sub_881250
mov     eax, esi
pop     esi
mov     esp, ebp
pop     ebp
retn    8
sub_8810C0 endp




sub_881130 proc near
mov     eax, offset aIostream ; "iostream"
retn
sub_881130 endp

align 10h


; Attributes: bp-based frame

sub_881140 proc near

var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

push    ebp
mov     ebp, esp
push    ecx
mov     eax, [ebp+arg_4]
push    esi
mov     esi, [ebp+arg_0]
mov     [ebp+var_4], 0
cmp     eax, 1
jnz     short loc_88117F
push    15h             ; Size
mov     dword ptr [esi+14h], 0Fh
mov     dword ptr [esi+10h], 0
push    offset aIostreamStream ; "iostream stream error"
mov     ecx, esi
mov     byte ptr [esi], 0
call    sub_881250
mov     eax, esi
pop     esi
mov     esp, ebp
pop     ebp
retn    8

loc_88117F:
push    eax
push    esi
call    sub_8810C0
mov     eax, esi
pop     esi
mov     esp, ebp
pop     ebp
retn    8
sub_881140 endp

align 10h



sub_881190 proc near
mov     eax, offset aSystem ; "system"
retn
sub_881190 endp

align 10h


; Attributes: bp-based frame

sub_8811A0 proc near

var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

push    ebp
mov     ebp, esp
push    ecx
push    esi
push    [ebp+arg_4]
mov     [ebp+var_4], 0
call    sub_885302
mov     esi, [ebp+arg_0]
add     esp, 4
test    eax, eax
mov     edx, offset aUnknownError ; "unknown error"
cmovnz  edx, eax
mov     dword ptr [esi+14h], 0Fh
mov     dword ptr [esi+10h], 0
mov     byte ptr [esi], 0
cmp     byte ptr [edx], 0
jnz     short loc_8811EE
xor     ecx, ecx
push    ecx             ; Size
push    edx             ; Src
mov     ecx, esi
call    sub_881250
mov     eax, esi
pop     esi
mov     esp, ebp
pop     ebp
retn    8

loc_8811EE:
mov     ecx, edx
push    edi
lea     edi, [ecx+1]

loc_8811F4:
mov     al, [ecx]
inc     ecx
test    al, al
jnz     short loc_8811F4
sub     ecx, edi
pop     edi
push    ecx             ; Size
push    edx             ; Src
mov     ecx, esi
call    sub_881250
mov     eax, esi
pop     esi
mov     esp, ebp
pop     ebp
retn    8
sub_8811A0 endp



; Attributes: bp-based frame

sub_881210 proc near

arg_0= dword ptr  8
arg_4= dword ptr  0Ch

push    ebp
mov     ebp, esp
push    esi
mov     esi, [ebp+arg_4]
push    esi
call    sub_8852D8
add     esp, 4
test    eax, eax
mov     eax, [ebp+arg_0]
mov     [eax], esi
jz      short loc_881235
mov     dword ptr [eax+4], offset off_89B07C
pop     esi
pop     ebp
retn    8

loc_881235:
mov     dword ptr [eax+4], offset off_89B084
pop     esi
pop     ebp
retn    8
sub_881210 endp

align 10h


; Attributes: bp-based frame

; int __stdcall sub_881250(void *Src, size_t Size)
sub_881250 proc near

Src= dword ptr  8
Size= dword ptr  0Ch

push    ebp
mov     ebp, esp
push    ebx
mov     ebx, [ebp+Src]
push    esi
mov     esi, ecx
test    ebx, ebx
jz      short loc_8812B5
mov     ecx, [esi+14h]
cmp     ecx, 10h
jb      short loc_88126A
mov     eax, [esi]
jmp     short loc_88126C

loc_88126A:
mov     eax, esi

loc_88126C:
cmp     ebx, eax
jb      short loc_8812B5
cmp     ecx, 10h
jb      short loc_881279
mov     edx, [esi]
jmp     short loc_88127B

loc_881279:
mov     edx, esi

loc_88127B:
mov     eax, [esi+10h]
add     eax, edx
cmp     eax, ebx
jbe     short loc_8812B5
cmp     ecx, 10h
jb      short loc_88129F
mov     eax, [esi]
push    [ebp+Size]      ; Size
sub     ebx, eax
push    ebx             ; int
push    esi             ; int
mov     ecx, esi
call    sub_881350
pop     esi
pop     ebx
pop     ebp
retn    8

loc_88129F:             ; Size
push    [ebp+Size]
mov     eax, esi
sub     ebx, eax
push    ebx             ; int
push    esi             ; int
mov     ecx, esi
call    sub_881350
pop     esi
pop     ebx
pop     ebp
retn    8

loc_8812B5:
push    edi
mov     edi, [ebp+Size]
cmp     edi, 0FFFFFFFEh
ja      short loc_88133C
mov     eax, [esi+14h]
cmp     eax, edi
jnb     short loc_8812DE
push    dword ptr [esi+10h] ; Size
mov     ecx, esi
push    edi             ; int
call    sub_881520
test    edi, edi
jz      short loc_881333

loc_8812D4:
cmp     dword ptr [esi+14h], 10h
jb      short loc_881304
mov     eax, [esi]
jmp     short loc_881306

loc_8812DE:
test    edi, edi
jnz     short loc_8812D4
mov     [esi+10h], edi
cmp     eax, 10h
jb      short loc_8812F8
mov     eax, [esi]
pop     edi
mov     byte ptr [eax], 0
mov     eax, esi
pop     esi
pop     ebx
pop     ebp
retn    8

loc_8812F8:
pop     edi
mov     eax, esi
pop     esi
mov     byte ptr [eax], 0
pop     ebx
pop     ebp
retn    8

loc_881304:
mov     eax, esi

loc_881306:
test    edi, edi
jz      short loc_881315
push    edi             ; Size
push    ebx             ; Src
push    eax             ; void *
call    _memmove_0
add     esp, 0Ch

loc_881315:
cmp     dword ptr [esi+14h], 10h
mov     [esi+10h], edi
jb      short loc_88132D
mov     eax, [esi]
mov     byte ptr [eax+edi], 0
pop     edi
mov     eax, esi
pop     esi
pop     ebx
pop     ebp
retn    8

loc_88132D:
mov     eax, esi
mov     byte ptr [eax+edi], 0

loc_881333:
pop     edi
mov     eax, esi
pop     esi
pop     ebx
pop     ebp
retn    8

loc_88133C:
push    offset aStringTooLong ; "string too long"
call    sub_88541D
sub_881250 endp

align 10h


; Attributes: bp-based frame

; int __stdcall sub_881350(int, int, size_t Size)
sub_881350 proc near

arg_0= dword ptr  8
arg_4= dword ptr  0Ch
Size= dword ptr  10h

push    ebp
mov     ebp, esp
push    ebx
mov     ebx, [ebp+arg_0]
push    esi
push    edi
mov     edi, [ebx+10h]
mov     esi, ecx
mov     ecx, [ebp+arg_4]
cmp     edi, ecx
jb      loc_881452
sub     edi, ecx
cmp     [ebp+Size], edi
cmovb   edi, [ebp+Size]
cmp     esi, ebx
jnz     short loc_8813BD
lea     eax, [edi+ecx]
cmp     [esi+10h], eax
jb      loc_88145C
cmp     dword ptr [esi+14h], 10h
mov     [esi+10h], eax
jb      short loc_8813A4
mov     edx, [esi]
push    ecx
push    0
mov     ecx, esi
mov     byte ptr [eax+edx], 0
call    sub_881480
pop     edi
mov     eax, esi
pop     esi
pop     ebx
pop     ebp
retn    0Ch

loc_8813A4:
push    ecx
mov     edx, esi
push    0
mov     ecx, esi
mov     byte ptr [eax+edx], 0
call    sub_881480
pop     edi
mov     eax, esi
pop     esi
pop     ebx
pop     ebp
retn    0Ch

loc_8813BD:
cmp     edi, 0FFFFFFFEh
ja      loc_881466
mov     eax, [esi+14h]
cmp     eax, edi
jnb     short loc_8813F1
push    dword ptr [esi+10h] ; Size
mov     ecx, esi
push    edi             ; int
call    sub_881520
mov     ecx, [ebp+arg_4]
test    edi, edi
jz      short loc_881449

loc_8813DF:
cmp     dword ptr [ebx+14h], 10h
jb      short loc_8813E7
mov     ebx, [ebx]

loc_8813E7:
cmp     dword ptr [esi+14h], 10h
jb      short loc_881417
mov     edx, [esi]
jmp     short loc_881419

loc_8813F1:
test    edi, edi
jnz     short loc_8813DF
mov     [esi+10h], edi
cmp     eax, 10h
jb      short loc_88140B
mov     eax, [esi]
pop     edi
mov     byte ptr [eax], 0
mov     eax, esi
pop     esi
pop     ebx
pop     ebp
retn    0Ch

loc_88140B:
pop     edi
mov     eax, esi
pop     esi
mov     byte ptr [eax], 0
pop     ebx
pop     ebp
retn    0Ch

loc_881417:
mov     edx, esi

loc_881419:
test    edi, edi
jz      short loc_88142B
push    edi             ; Size
lea     eax, [ebx+ecx]
push    eax             ; Src
push    edx             ; void *
call    _memmove_0
add     esp, 0Ch

loc_88142B:
cmp     dword ptr [esi+14h], 10h
mov     [esi+10h], edi
jb      short loc_881443
mov     eax, [esi]
mov     byte ptr [eax+edi], 0
pop     edi
mov     eax, esi
pop     esi
pop     ebx
pop     ebp
retn    0Ch

loc_881443:
mov     eax, esi
mov     byte ptr [eax+edi], 0

loc_881449:
pop     edi
mov     eax, esi
pop     esi
pop     ebx
pop     ebp
retn    0Ch

loc_881452:
push    offset aInvalidStringP ; "invalid string position"
call    sub_88544B

loc_88145C:
push    offset aInvalidStringP ; "invalid string position"
call    sub_88544B

loc_881466:
push    offset aStringTooLong ; "string too long"
call    sub_88541D
sub_881350 endp

align 20h


; Attributes: bp-based frame

sub_881480 proc near

arg_0= dword ptr  8
arg_4= dword ptr  0Ch

push    ebp
mov     ebp, esp
push    esi
mov     esi, ecx
mov     ecx, [ebp+arg_0]
push    edi
mov     edi, [esi+10h]
cmp     edi, ecx
jb      short loc_88150F
mov     edx, [ebp+arg_4]
mov     eax, edi
sub     eax, ecx
cmp     eax, edx
ja      short loc_8814BF
cmp     dword ptr [esi+14h], 10h
mov     [esi+10h], ecx
jb      short loc_8814B3
mov     eax, [esi]
pop     edi
mov     byte ptr [eax+ecx], 0
mov     eax, esi
pop     esi
pop     ebp
retn    8

loc_8814B3:
mov     eax, esi
pop     edi
mov     byte ptr [eax+ecx], 0
pop     esi
pop     ebp
retn    8

loc_8814BF:
test    edx, edx
jz      short loc_881507
cmp     dword ptr [esi+14h], 10h
jb      short loc_8814CD
mov     eax, [esi]
jmp     short loc_8814CF

loc_8814CD:
mov     eax, esi

loc_8814CF:
sub     edi, edx
push    ebx
lea     ebx, [eax+ecx]
mov     eax, edi
sub     eax, ecx
jz      short loc_8814E9
push    eax             ; Size
lea     eax, [ebx+edx]
push    eax             ; Src
push    ebx             ; void *
call    _memmove
add     esp, 0Ch

loc_8814E9:
cmp     dword ptr [esi+14h], 10h
mov     [esi+10h], edi
pop     ebx
jb      short loc_881501
mov     eax, [esi]
mov     byte ptr [eax+edi], 0
pop     edi
mov     eax, esi
pop     esi
pop     ebp
retn    8

loc_881501:
mov     eax, esi
mov     byte ptr [eax+edi], 0

loc_881507:
pop     edi
mov     eax, esi
pop     esi
pop     ebp
retn    8

loc_88150F:
push    offset aInvalidStringP ; "invalid string position"
call    sub_88544B
sub_881480 endp

align 10h


; Attributes: bp-based frame

; int __stdcall sub_881520(int, size_t Size)
sub_881520 proc near

var_18= dword ptr -18h
var_14= dword ptr -14h
var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_4= dword ptr -4
arg_0= dword ptr  8
Size= dword ptr  0Ch

; FUNCTION CHUNK AT 00890C10 SIZE 0000001B BYTES

; __unwind { // SEH_401520
push    ebp
mov     ebp, esp
push    0FFFFFFFFh
push    offset SEH_401520
mov     eax, large fs:0
push    eax
sub     esp, 0Ch
push    ebx
push    esi
push    edi
mov     eax, ___security_cookie
xor     eax, ebp
push    eax
lea     eax, [ebp+var_C]
mov     large fs:0, eax
mov     [ebp+var_10], esp
mov     esi, ecx
mov     [ebp+var_18], esi
mov     eax, [ebp+arg_0]
mov     edi, eax
or      edi, 0Fh
cmp     edi, 0FFFFFFFEh
jbe     short loc_881561
mov     edi, eax
jmp     short loc_881588

loc_881561:
mov     ebx, [esi+14h]
mov     eax, 0AAAAAAABh
mul     edi
mov     ecx, ebx
shr     ecx, 1
shr     edx, 1
cmp     ecx, edx
jbe     short loc_881588
mov     eax, 0FFFFFFFEh
sub     eax, ecx
lea     edi, [ecx+ebx]
cmp     ebx, eax
jbe     short loc_881588
mov     edi, 0FFFFFFFEh

loc_881588:
lea     ecx, [edi+1]
xor     eax, eax
;   try {
mov     [ebp+var_4], 0
mov     [ebp+var_14], eax
test    ecx, ecx
jz      short loc_8815E1
cmp     ecx, 0FFFFFFFFh
ja      short loc_8815B0
push    ecx             ; Size
call    ??2@YAPAXI@Z    ; operator new(uint)
add     esp, 4
mov     [ebp+var_14], eax
test    eax, eax
jnz     short loc_8815E1

loc_8815B0:             ; Microsoft VisualC 2-14/net runtime
call    unknown_libname_2

loc_8815B5:
;   catch(...) // owned by 88158D
mov     eax, [ebp+arg_0]
mov     [ebp+var_14], eax
inc     eax
mov     [ebp+var_10], esp
push    eax             ; Size
lea     ecx, [ebp+arg_0+3]
;   } // starts at 88158D
;   try {
mov     byte ptr [ebp+var_4], 2
call    sub_881670
mov     [ebp+arg_0], eax
mov     eax, offset loc_8815D5
retn

loc_8815D5:
mov     eax, [ebp+arg_0]
mov     edi, [ebp+var_14]
mov     esi, [ebp+var_18]
mov     [ebp+var_14], eax

loc_8815E1:
mov     ebx, [ebp+Size]
test    ebx, ebx
jz      short loc_881630
cmp     dword ptr [esi+14h], 10h
jb      short loc_88161F
mov     ecx, [esi]
jmp     short loc_881621

loc_8815F2:
;   catch(...) // owned by 8815C3
mov     esi, [ebp+var_18]
cmp     dword ptr [esi+14h], 10h
jb      short loc_881605
push    dword ptr [esi] ; Block
call    j__free
add     esp, 4

loc_881605:             ; pThrowInfo
push    0
mov     dword ptr [esi+14h], 0Fh
mov     dword ptr [esi+10h], 0
push    0               ; pExceptionObject
mov     byte ptr [esi], 0
call    __CxxThrowException@8 ; _CxxThrowException(x,x)

loc_88161F:
mov     ecx, esi

loc_881621:
test    ebx, ebx
jz      short loc_881630
push    ebx             ; Size
push    ecx             ; Src
push    eax             ; void *
call    _memmove_0
add     esp, 0Ch

loc_881630:
cmp     dword ptr [esi+14h], 10h
jb      short loc_881640
push    dword ptr [esi] ; Block
call    j__free
add     esp, 4

loc_881640:
mov     eax, [ebp+var_14]
mov     byte ptr [esi], 0
mov     [esi], eax
mov     [esi+14h], edi
mov     [esi+10h], ebx
cmp     edi, 10h
jb      short loc_881655
mov     esi, eax

loc_881655:
mov     byte ptr [esi+ebx], 0
mov     ecx, [ebp+var_C]
mov     large fs:0, ecx
pop     ecx
pop     edi
pop     esi
pop     ebx
mov     esp, ebp
pop     ebp
retn    8
;   } // starts at 8815C3
; } // starts at 881520
sub_881520 endp

align 10h


; Attributes: bp-based frame

; int __stdcall sub_881670(size_t Size)
sub_881670 proc near

Size= dword ptr  8

push    ebp
mov     ebp, esp
mov     eax, [ebp+Size]
xor     ecx, ecx
test    eax, eax
jz      short loc_881690
cmp     eax, 0FFFFFFFFh
ja      short loc_881696
push    eax             ; Size
call    ??2@YAPAXI@Z    ; operator new(uint)
mov     ecx, eax
add     esp, 4
test    ecx, ecx
jz      short loc_881696

loc_881690:
mov     eax, ecx
pop     ebp
retn    4

loc_881696:             ; Microsoft VisualC 2-14/net runtime
call    unknown_libname_2
sub_881670 endp

align 10h


; Attributes: bp-based frame

; int __usercall sub_8816A0@<eax>(void *@<ecx>, void *Src@<edx>, int)
sub_8816A0 proc near

arg_0= dword ptr  8

push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_0]
test    eax, eax
jnz     short loc_8816AE
mov     eax, ecx
pop     ebp
retn

loc_8816AE:
add     eax, eax
push    eax             ; Size
push    edx             ; Src
push    ecx             ; void *
call    _memmove_0
add     esp, 0Ch
pop     ebp
retn
sub_8816A0 endp

align 10h


; Attributes: bp-based frame

; int __usercall sub_8816C0@<eax>(void *@<ecx>, void *Src@<edx>, int)
sub_8816C0 proc near

arg_0= dword ptr  8

push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_0]
test    eax, eax
jnz     short loc_8816CE
mov     eax, ecx
pop     ebp
retn

loc_8816CE:
add     eax, eax
push    eax             ; Size
push    edx             ; Src
push    ecx             ; void *
call    _memmove
add     esp, 0Ch
pop     ebp
retn
sub_8816C0 endp

align 10h


; Attributes: bp-based frame

; int __usercall sub_8816E0@<eax>(void *@<ecx>, int, int)
sub_8816E0 proc near

var_2C= dword ptr -2Ch
Src= dword ptr -28h
var_18= dword ptr -18h
var_14= dword ptr -14h
var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 00890D10 SIZE 0000002D BYTES

; __unwind { // SEH_4016E0
push    ebp
mov     ebp, esp
push    0FFFFFFFFh
push    offset SEH_4016E0
mov     eax, large fs:0
push    eax
sub     esp, 24h
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+var_10], eax
push    esi
push    eax
lea     eax, [ebp+var_C]
mov     large fs:0, eax
mov     esi, ecx
xor     eax, eax
mov     [ebp+var_2C], 0
cmp     [edx+10h], eax
jnz     short loc_881737
push    1               ; int
mov     dword ptr [esi+14h], 7
mov     [esi+10h], eax
push    offset Src      ; "\\"
mov     [esi], ax
call    sub_882490
jmp     loc_8817C3

loc_881737:
push    0FFFFFFFFh
push    0
push    edx
lea     ecx, [ebp+Src]
mov     [ebp+var_14], 7
mov     [ebp+var_18], 0
mov     word ptr [ebp+Src], ax
call    sub_882360
;   try {
mov     [ebp+var_4], 0
cmp     [ebp+var_14], 8
mov     eax, [ebp+var_18]
lea     ecx, [ebp+Src]
cmovnb  ecx, [ebp+Src]
cmp     word ptr [ecx+eax*2-2], 5Ch ; '\'
jz      short loc_88177F
push    5Ch ; '\'
push    1
lea     ecx, [ebp+Src]
call    sub_8822A0

loc_88177F:
xor     eax, eax
mov     dword ptr [esi+14h], 7
mov     dword ptr [esi+10h], 0
mov     [esi], ax
mov     ecx, [ebp+var_14]
cmp     ecx, 8
jnb     short loc_8817B5
mov     eax, [ebp+var_18]
inc     eax
jz      short loc_8817BA
add     eax, eax
push    eax             ; Size
lea     eax, [ebp+Src]
push    eax             ; Src
push    esi             ; void *
call    _memmove
mov     ecx, [ebp+var_14]
add     esp, 0Ch
jmp     short loc_8817BA

loc_8817B5:
mov     eax, [ebp+Src]
mov     [esi], eax

loc_8817BA:
mov     eax, [ebp+var_18]
mov     [esi+10h], eax
mov     [esi+14h], ecx

loc_8817C3:
mov     eax, esi
mov     ecx, [ebp+var_C]
mov     large fs:0, ecx
pop     ecx
pop     esi
mov     ecx, [ebp+var_10]
xor     ecx, ebp        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     esp, ebp
pop     ebp
retn
;   } // starts at 881756
; } // starts at 8816E0
sub_8816E0 endp

align 10h


; Attributes: bp-based frame

sub_8817E0 proc near

var_10C= dword ptr -10Ch
Buffer= word ptr -108h
var_4= dword ptr -4

push    ebp
mov     ebp, esp
sub     esp, 10Ch
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+var_4], eax
push    esi
push    0Ah             ; Radix
push    80h             ; BufferCount
lea     eax, [ebp+Buffer]
push    eax             ; Buffer
push    dword ptr [edx+4]
mov     esi, ecx
push    dword ptr [edx] ; Value
mov     [ebp+var_10C], 0
call    __ui64tow_s
xor     eax, eax
mov     dword ptr [esi+14h], 7
mov     dword ptr [esi+10h], 0
add     esp, 14h
mov     [esi], ax
cmp     [ebp+Buffer], ax
jz      short loc_88184F
lea     eax, [ebp+Buffer]
lea     edx, [eax+2]

loc_881840:
mov     cx, [eax]
add     eax, 2
test    cx, cx
jnz     short loc_881840
sub     eax, edx
sar     eax, 1

loc_88184F:             ; int
push    eax
lea     eax, [ebp+Buffer]
push    eax             ; Src
mov     ecx, esi
call    sub_882490
mov     ecx, [ebp+var_4]
mov     eax, esi
xor     ecx, ebp        ; StackCookie
pop     esi
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     esp, ebp
pop     ebp
retn
sub_8817E0 endp

align 10h


; Attributes: bp-based frame

sub_881870 proc near

var_290= dword ptr -290h
var_280= dword ptr -280h
var_27C= dword ptr -27Ch
var_278= dword ptr -278h
var_268= dword ptr -268h
var_264= dword ptr -264h
Block= dword ptr -260h
var_250= dword ptr -250h
var_24C= dword ptr -24Ch
var_248= dword ptr -248h
var_238= dword ptr -238h
var_234= dword ptr -234h
lpPathName= dword ptr -230h
var_220= dword ptr -220h
var_21C= dword ptr -21Ch
pszPath= word ptr -218h
var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 00890CB0 SIZE 00000054 BYTES

; __unwind { // SEH_401870
push    ebp
mov     ebp, esp
push    0FFFFFFFFh
push    offset SEH_401870
mov     eax, large fs:0
push    eax
sub     esp, 284h
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+var_10], eax
push    ebx
push    esi
push    edi             ; int
push    eax             ; int
lea     eax, [ebp+var_C]
mov     large fs:0, eax
mov     ebx, edx
xor     eax, eax
mov     [ebp+var_21C], 7
mov     [ebp+var_220], 0
mov     word ptr [ebp+lpPathName], ax
;   try {
mov     [ebp+var_4], eax
lea     eax, [ebp+pszPath]
push    eax             ; pszPath
push    0               ; dwFlags
push    0               ; hToken
push    23h ; '#'       ; csidl
push    0               ; hwnd
call    ds:SHGetFolderPathW
mov     edi, eax
test    edi, edi
js      loc_881AB5
xor     eax, eax
mov     [ebp+var_234], 7
mov     [ebp+var_238], 0
mov     word ptr [ebp+var_248], ax
cmp     [ebp+pszPath], ax
jnz     short loc_881909
xor     ecx, ecx
jmp     short loc_881921

loc_881909:
lea     ecx, [ebp+pszPath]
lea     edx, [ecx+2]

loc_881912:
mov     ax, [ecx]
add     ecx, 2
test    ax, ax
jnz     short loc_881912
sub     ecx, edx
sar     ecx, 1

loc_881921:             ; int
push    ecx
lea     eax, [ebp+pszPath]
push    eax             ; Src
lea     ecx, [ebp+var_248]
call    sub_882490
lea     edx, [ebp+var_248]
lea     ecx, [ebp+var_278] ; void *
;   } // starts at 8818BD
;   try {
mov     byte ptr [ebp+var_4], 1
call    sub_8816E0
push    offset UpgradeCode ; "{78D630C6-9EFC-439B-87B9-B0AA6E5848BE}"
mov     edx, eax
lea     ecx, [ebp+var_290] ; void *
;   } // starts at 881940
;   try {
mov     byte ptr [ebp+var_4], 2
call    sub_882920
add     esp, 4
mov     edx, eax
lea     ecx, [ebp+Block] ; void *
;   } // starts at 881956
;   try {
mov     byte ptr [ebp+var_4], 3
call    sub_8816E0
push    eax             ; Src
lea     ecx, [ebp+lpPathName] ; void *
call    sub_8821A0
cmp     [ebp+var_24C], 8
jb      short loc_881996
push    [ebp+Block]     ; Block
call    j__free
add     esp, 4

loc_881996:
xor     eax, eax
cmp     [ebp+var_27C], 8
mov     [ebp+var_24C], 7
mov     [ebp+var_250], 0
mov     word ptr [ebp+Block], ax
jb      short loc_8819CA
push    [ebp+var_290]   ; Block
call    j__free
add     esp, 4

loc_8819CA:
xor     eax, eax
cmp     [ebp+var_264], 8
mov     [ebp+var_27C], 7
mov     [ebp+var_280], 0
mov     word ptr [ebp+var_290], ax
jb      short loc_8819FE
push    [ebp+var_278]   ; Block
call    j__free
add     esp, 4

loc_8819FE:
xor     eax, eax
;   } // starts at 88196A
;   try {
mov     byte ptr [ebp+var_4], al
cmp     [ebp+var_234], 8
mov     [ebp+var_264], 7
mov     [ebp+var_268], 0
mov     word ptr [ebp+var_278], ax
jb      short loc_881A35
push    [ebp+var_248]   ; Block
call    j__free
add     esp, 4

loc_881A35:
cmp     [ebp+var_21C], 8
lea     eax, [ebp+lpPathName]
cmovnb  eax, [ebp+lpPathName]
push    0               ; lpSecurityAttributes
push    eax             ; lpPathName
call    ds:CreateDirectoryW
mov     esi, eax
call    ds:GetLastError
mov     edi, eax
test    esi, esi
jnz     short loc_881A80
cmp     edi, 0B7h
jz      short loc_881A80
test    edi, edi
jz      short loc_881A79
jle     short loc_881AB5
movzx   edi, di
or      edi, 80070000h
jmp     short loc_881AB5

loc_881A79:
mov     edi, 8007001Fh
jmp     short loc_881AB5

loc_881A80:
cmp     [ebp+var_21C], 8
lea     eax, [ebp+lpPathName]
cmovnb  eax, [ebp+lpPathName]
push    6               ; dwFileAttributes
push    eax             ; lpFileName
call    ds:SetFileAttributesW
lea     eax, [ebp+lpPathName]
cmp     ebx, eax
jz      short loc_881AB3
push    0FFFFFFFFh
push    0
push    eax
mov     ecx, ebx
call    sub_882360

loc_881AB3:
xor     edi, edi

loc_881AB5:
cmp     [ebp+var_21C], 8
jb      short loc_881ACC
push    [ebp+lpPathName] ; Block
call    j__free
add     esp, 4

loc_881ACC:
mov     eax, edi
mov     ecx, [ebp+var_C]
mov     large fs:0, ecx
pop     ecx
pop     edi
pop     esi
pop     ebx
mov     ecx, [ebp+var_10]
xor     ecx, ebp        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     esp, ebp
pop     ebp
retn
;   } // starts at 881A00
; } // starts at 881870
sub_881870 endp

align 10h


; Attributes: bp-based frame

sub_881AF0 proc near

arg_0= dword ptr  8
arg_4= dword ptr  0Ch

push    ebp
mov     ebp, esp
push    esi
push    0               ; wLanguage
push    96h             ; lpName
push    0Ah             ; lpType
push    0               ; hModule
call    ds:FindResourceExW
mov     esi, eax
test    esi, esi
jnz     short loc_881B20
call    ds:GetLastError
test    eax, eax
jle     short loc_881B6D
movzx   eax, ax
or      eax, 80070000h
pop     esi
pop     ebp
retn

loc_881B20:
push    edi
push    esi             ; hResInfo
push    0               ; hModule
call    ds:LoadResource
mov     edi, eax
test    edi, edi
jz      short loc_881B4F
push    esi             ; hResInfo
push    0               ; hModule
call    ds:SizeofResource
mov     esi, eax
test    esi, esi
jz      short loc_881B4F
push    edi             ; hResData
call    ds:LockResource
mov     ecx, [ebp+arg_0]
mov     [ecx], eax
test    eax, eax
jnz     short loc_881B65

loc_881B4F:
call    ds:GetLastError
test    eax, eax
jle     short loc_881B6C
movzx   eax, ax
pop     edi
or      eax, 80070000h
pop     esi
pop     ebp
retn

loc_881B65:
mov     eax, [ebp+arg_4]
mov     [eax], esi
xor     eax, eax

loc_881B6C:
pop     edi

loc_881B6D:
pop     esi
pop     ebp
retn
sub_881AF0 endp



; Attributes: bp-based frame

sub_881B70 proc near

nNumberOfBytesToWrite= dword ptr -10h
lpBuffer= dword ptr -0Ch
NumberOfBytesWritten= dword ptr -8
var_4= dword ptr -4

push    ebp
mov     ebp, esp
sub     esp, 10h
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+var_4], eax
push    edi
lea     eax, [ebp+nNumberOfBytesToWrite]
push    eax
lea     eax, [ebp+lpBuffer]
push    eax
mov     edi, edx
call    sub_881AF0
add     esp, 8
test    eax, eax
js      short loc_881C08
push    esi
push    0               ; hTemplateFile
push    80h             ; dwFlagsAndAttributes
push    2               ; dwCreationDisposition
push    0               ; lpSecurityAttributes
push    0               ; dwShareMode
push    40000000h       ; dwDesiredAccess
push    edi             ; lpFileName
call    ds:CreateFileW
mov     esi, eax
cmp     esi, 0FFFFFFFFh
jz      short loc_881BDD
push    0               ; lpOverlapped
lea     eax, [ebp+NumberOfBytesWritten]
push    eax             ; lpNumberOfBytesWritten
push    [ebp+nNumberOfBytesToWrite] ; nNumberOfBytesToWrite
push    [ebp+lpBuffer]  ; lpBuffer
push    esi             ; hFile
call    ds:WriteFile
push    esi             ; hObject
test    eax, eax
jnz     short loc_881BFF
call    ds:CloseHandle
push    edi             ; lpFileName
call    ds:DeleteFileW

loc_881BDD:
call    ds:GetLastError
test    eax, eax
jle     short loc_881C07
movzx   eax, ax
pop     esi
or      eax, 80070000h
pop     edi
mov     ecx, [ebp+var_4]
xor     ecx, ebp        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     esp, ebp
pop     ebp
retn

loc_881BFF:
call    ds:CloseHandle
xor     eax, eax

loc_881C07:
pop     esi

loc_881C08:
mov     ecx, [ebp+var_4]
xor     ecx, ebp        ; StackCookie
pop     edi
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     esp, ebp
pop     ebp
retn
sub_881B70 endp

align 10h


; Attributes: bp-based frame

sub_881C20 proc near

var_E0= dword ptr -0E0h
var_CC= dword ptr -0CCh
var_C8= dword ptr -0C8h
var_B8= dword ptr -0B8h
var_B4= dword ptr -0B4h
var_B0= dword ptr -0B0h
var_A0= dword ptr -0A0h
var_9C= dword ptr -9Ch
var_98= dword ptr -98h
var_94= dword ptr -94h
var_8C= dword ptr -8Ch
var_88= dword ptr -88h
var_78= dword ptr -78h
var_74= dword ptr -74h
Block= dword ptr -70h
var_60= dword ptr -60h
var_5C= dword ptr -5Ch
var_58= dword ptr -58h
var_48= dword ptr -48h
var_44= dword ptr -44h
var_40= dword ptr -40h
var_30= dword ptr -30h
var_2C= dword ptr -2Ch
var_28= dword ptr -28h
var_18= dword ptr -18h
var_14= dword ptr -14h
var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 00890C30 SIZE 0000007C BYTES

; __unwind { // SEH_401C20
push    ebp
mov     ebp, esp
push    0FFFFFFFFh
push    offset SEH_401C20
mov     eax, large fs:0
push    eax
sub     esp, 0D4h
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+var_10], eax
push    ebx
push    esi
push    edi
push    eax
lea     eax, [ebp+var_C]
mov     large fs:0, eax
mov     ebx, edx
mov     [ebp+var_8C], ebx
xor     eax, eax
mov     [ebp+var_2C], 7
mov     [ebp+var_30], 0
mov     word ptr [ebp+var_40], ax
;   try {
mov     [ebp+var_4], eax
mov     [ebp+var_14], 7
mov     [ebp+var_18], eax
mov     word ptr [ebp+var_28], ax
lea     edx, [ebp+var_40]
;   } // starts at 881C6A
;   try {
mov     byte ptr [ebp+var_4], 1
call    sub_881870
test    eax, eax
jns     short loc_881C9D
lea     edx, [ebp+var_40]
call    sub_881870
mov     esi, eax
test    esi, esi
js      loc_881FF1

loc_881C9D:
xor     eax, eax
xor     ecx, ecx
cmp     word ptr ds:UpgradeCode, cx ; "{78D630C6-9EFC-439B-87B9-B0AA6E5848BE}"
mov     word ptr [ebp+var_58], ax
mov     eax, 26h ; '&'
cmovz   eax, ecx
push    eax             ; int
push    offset UpgradeCode ; "{78D630C6-9EFC-439B-87B9-B0AA6E5848BE}"
lea     ecx, [ebp+var_58]
mov     [ebp+var_44], 7
mov     [ebp+var_48], 0
call    sub_882490
lea     eax, [ebp+var_58]
push    eax             ; int
lea     edx, [ebp+var_40]
lea     ecx, [ebp+var_88] ; void *
;   } // starts at 881C7E
;   try {
mov     byte ptr [ebp+var_4], 2
call    sub_8829C0
add     esp, 4
push    offset aMsi     ; ".msi"
mov     edx, eax
lea     ecx, [ebp+Block] ; void *
;   } // starts at 881CDD
;   try {
mov     byte ptr [ebp+var_4], 3
call    sub_882920
add     esp, 4
lea     ecx, [ebp+var_28] ; void *
push    eax             ; Src
call    sub_8821A0
cmp     [ebp+var_5C], 8
jb      short loc_881D19
push    [ebp+Block]     ; Block
call    j__free
add     esp, 4

loc_881D19:
xor     eax, eax
cmp     [ebp+var_74], 8
mov     [ebp+var_5C], 7
mov     [ebp+var_60], 0
mov     word ptr [ebp+Block], ax
jb      short loc_881D41
push    [ebp+var_88]    ; Block
call    j__free
add     esp, 4

loc_881D41:
xor     eax, eax
;   } // starts at 881CF3
;   try {
mov     byte ptr [ebp+var_4], 1
cmp     [ebp+var_44], 8
mov     [ebp+var_74], 7
mov     [ebp+var_78], 0
mov     word ptr [ebp+var_88], ax
jb      short loc_881D6D
push    [ebp+var_58]    ; Block
call    j__free
add     esp, 4

loc_881D6D:
cmp     [ebp+var_14], 8
lea     edx, [ebp+var_28]
cmovnb  edx, [ebp+var_28]
call    sub_881B70
test    eax, eax
jns     loc_881FDC
xor     edi, edi
call    ds:GetTickCount
mov     ebx, eax
nop

loc_881D90:
lea     edx, [ebp+var_98]
lea     ecx, [ebp+var_E0]
mov     [ebp+var_98], ebx
mov     [ebp+var_94], 0
call    sub_8817E0
mov     esi, eax
;   } // starts at 881D43
;   try {
mov     byte ptr [ebp+var_4], 4
xor     eax, eax
cmp     word ptr ds:UpgradeCode, ax ; "{78D630C6-9EFC-439B-87B9-B0AA6E5848BE}"
mov     ecx, 26h ; '&'
cmovz   ecx, eax
push    ecx             ; int
push    offset UpgradeCode ; "{78D630C6-9EFC-439B-87B9-B0AA6E5848BE}"
lea     ecx, [ebp+var_58]
mov     [ebp+var_44], 7
mov     [ebp+var_48], 0
mov     word ptr [ebp+var_58], ax
call    sub_882490
lea     eax, [ebp+var_58]
push    eax             ; int
lea     edx, [ebp+var_40]
lea     ecx, [ebp+var_C8] ; void *
;   } // starts at 881DB3
;   try {
mov     byte ptr [ebp+var_4], 5
call    sub_8829C0
add     esp, 4
push    offset asc_8974A0 ; "_"
mov     edx, eax
lea     ecx, [ebp+var_B0] ; void *
;   } // starts at 881DF5
;   try {
mov     byte ptr [ebp+var_4], 6
call    sub_882920
add     esp, 4
push    esi             ; int
mov     edx, eax
lea     ecx, [ebp+Block] ; void *
;   } // starts at 881E0E
;   try {
mov     byte ptr [ebp+var_4], 7
call    sub_882A40
add     esp, 4
push    offset aMsi     ; ".msi"
mov     edx, eax
lea     ecx, [ebp+var_88] ; void *
;   } // starts at 881E20
;   try {
mov     byte ptr [ebp+var_4], 8
call    sub_882920
mov     esi, eax
lea     eax, [ebp+var_28]
add     esp, 4
cmp     eax, esi
jz      short loc_881EBB
cmp     [ebp+var_14], 8
jb      short loc_881E5F
push    [ebp+var_28]    ; Block
call    j__free
add     esp, 4

loc_881E5F:
xor     eax, eax
mov     [ebp+var_14], 7
mov     [ebp+var_18], 0
mov     word ptr [ebp+var_28], ax
cmp     dword ptr [esi+14h], 8
jnb     short loc_881E91
mov     eax, [esi+10h]
inc     eax
jz      short loc_881E9C
add     eax, eax
push    eax             ; Size
lea     eax, [ebp+var_28]
push    esi             ; Src
push    eax             ; void *
call    _memmove
add     esp, 0Ch
jmp     short loc_881E9C

loc_881E91:
mov     eax, [esi]
mov     [ebp+var_28], eax
mov     dword ptr [esi], 0

loc_881E9C:
mov     eax, [esi+10h]
mov     [ebp+var_18], eax
mov     eax, [esi+14h]
mov     [ebp+var_14], eax
xor     eax, eax
mov     dword ptr [esi+14h], 7
mov     dword ptr [esi+10h], 0
mov     [esi], ax

loc_881EBB:
cmp     [ebp+var_74], 8
jb      short loc_881ECF
push    [ebp+var_88]    ; Block
call    j__free
add     esp, 4

loc_881ECF:
xor     eax, eax
cmp     [ebp+var_5C], 8
mov     [ebp+var_74], 7
mov     [ebp+var_78], 0
mov     word ptr [ebp+var_88], ax
jb      short loc_881EF7
push    [ebp+Block]     ; Block
call    j__free
add     esp, 4

loc_881EF7:
xor     eax, eax
cmp     [ebp+var_9C], 8
mov     [ebp+var_5C], 7
mov     [ebp+var_60], 0
mov     word ptr [ebp+Block], ax
jb      short loc_881F22
push    [ebp+var_B0]    ; Block
call    j__free
add     esp, 4

loc_881F22:
xor     eax, eax
cmp     [ebp+var_B4], 8
mov     [ebp+var_9C], 7
mov     [ebp+var_A0], 0
mov     word ptr [ebp+var_B0], ax
jb      short loc_881F56
push    [ebp+var_C8]    ; Block
call    j__free
add     esp, 4

loc_881F56:
xor     eax, eax
cmp     [ebp+var_44], 8
mov     [ebp+var_B4], 7
mov     [ebp+var_B8], 0
mov     word ptr [ebp+var_C8], ax
jb      short loc_881F84
push    [ebp+var_58]    ; Block
call    j__free
add     esp, 4

loc_881F84:
xor     eax, eax
;   } // starts at 881E39
;   try {
mov     byte ptr [ebp+var_4], 1
cmp     [ebp+var_CC], 8
mov     [ebp+var_44], 7
mov     [ebp+var_48], 0
mov     word ptr [ebp+var_58], ax
jb      short loc_881FB3
push    [ebp+var_E0]    ; Block
call    j__free
add     esp, 4

loc_881FB3:
cmp     [ebp+var_14], 8
lea     edx, [ebp+var_28]
cmovnb  edx, [ebp+var_28]
call    sub_881B70
mov     esi, eax
test    esi, esi
jns     short loc_881FD6
inc     edi
inc     ebx
cmp     edi, 64h ; 'd'
jb      loc_881D90
jmp     short loc_881FF1

loc_881FD6:
mov     ebx, [ebp+var_8C]

loc_881FDC:
lea     eax, [ebp+var_28]
cmp     ebx, eax
jz      short loc_881FEF
push    0FFFFFFFFh
push    0
push    eax
mov     ecx, ebx
call    sub_882360

loc_881FEF:
xor     esi, esi

loc_881FF1:
cmp     [ebp+var_14], 8
jb      short loc_882002
push    [ebp+var_28]    ; Block
call    j__free
add     esp, 4

loc_882002:
xor     eax, eax
cmp     [ebp+var_2C], 8
mov     [ebp+var_14], 7
mov     [ebp+var_18], 0
mov     word ptr [ebp+var_28], ax
jb      short loc_882027
push    [ebp+var_40]    ; Block
call    j__free
add     esp, 4

loc_882027:
mov     eax, esi
mov     ecx, [ebp+var_C]
mov     large fs:0, ecx
pop     ecx
pop     edi
pop     esi
pop     ebx
mov     ecx, [ebp+var_10]
xor     ecx, ebp        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     esp, ebp
pop     ebp
retn
;   } // starts at 881F86
; } // starts at 881C20
sub_881C20 endp

align 10h


; Attributes: bp-based frame

sub_882050 proc near

var_14= dword ptr -14h
var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 00890D60 SIZE 00000034 BYTES

; __unwind { // SEH_404E80
push    ebp
mov     ebp, esp
push    0FFFFFFFFh
push    offset SEH_4030D0
mov     eax, large fs:0
push    eax
sub     esp, 0Ch
push    esi
mov     eax, ___security_cookie
xor     eax, ebp
push    eax
lea     eax, [ebp+var_C]
mov     large fs:0, eax
mov     esi, ecx
mov     [ebp+var_14], esi
mov     [ebp+var_10], 0
xor     eax, eax
mov     dword ptr [esi+14h], 7
mov     dword ptr [esi+10h], 0
mov     [esi], ax
;   try {
mov     [ebp+var_4], eax
mov     edx, esi
mov     [ebp+var_10], 1
call    sub_881C20
test    eax, eax
jns     short loc_8820B8
push    0               ; int
push    offset unk_8974A4 ; Src
mov     ecx, esi
call    sub_882490

loc_8820B8:
mov     eax, esi
mov     ecx, [ebp+var_C]
mov     large fs:0, ecx
pop     ecx
pop     esi
mov     esp, ebp
pop     ebp
retn
;   } // starts at 882095
; } // starts at 882050
sub_882050 endp

align 10h


; Attributes: bp-based frame

sub_8820D0 proc near

Src= dword ptr  8

push    ebp
mov     ebp, esp
mov     edx, [ebp+Src]
push    esi
mov     esi, ecx
xor     eax, eax
mov     dword ptr [esi+14h], 7
mov     dword ptr [esi+10h], 0
mov     [esi], ax
cmp     [edx], ax
jnz     short loc_882103
xor     ecx, ecx
push    ecx             ; int
push    edx             ; Src
mov     ecx, esi
call    sub_882490
mov     eax, esi
pop     esi
pop     ebp
retn    4

loc_882103:
mov     ecx, edx
push    edi
lea     edi, [ecx+2]
lea     esp, [esp+0]

loc_882110:
mov     ax, [ecx]
add     ecx, 2
test    ax, ax
jnz     short loc_882110
sub     ecx, edi
sar     ecx, 1
pop     edi
push    ecx             ; int
push    edx             ; Src
mov     ecx, esi
call    sub_882490
mov     eax, esi
pop     esi
pop     ebp
retn    4
sub_8820D0 endp



; Attributes: bp-based frame

; int __thiscall sub_882130(void *, void *Src)
sub_882130 proc near

Src= dword ptr  8

push    ebp
mov     ebp, esp
push    esi
mov     esi, [ebp+Src]
push    edi
mov     edi, ecx
xor     eax, eax
mov     dword ptr [edi+14h], 7
mov     dword ptr [edi+10h], 0
mov     [edi], ax
cmp     dword ptr [esi+14h], 8
jnb     short loc_882168
mov     eax, [esi+10h]
inc     eax
jz      short loc_882172
add     eax, eax
push    eax             ; Size
push    esi             ; Src
push    edi             ; void *
call    _memmove
add     esp, 0Ch
jmp     short loc_882172

loc_882168:
mov     eax, [esi]
mov     [edi], eax
mov     dword ptr [esi], 0

loc_882172:
mov     eax, [esi+10h]
mov     [edi+10h], eax
mov     eax, [esi+14h]
mov     [edi+14h], eax
xor     eax, eax
mov     dword ptr [esi+14h], 7
mov     dword ptr [esi+10h], 0
mov     [esi], ax
mov     eax, edi
pop     edi
pop     esi
pop     ebp
retn    4
sub_882130 endp

align 10h


; Attributes: bp-based frame

; int __thiscall sub_8821A0(void *, void *Src)
sub_8821A0 proc near

Src= dword ptr  8

push    ebp
mov     ebp, esp
push    esi
push    edi
mov     edi, [ebp+Src]
mov     esi, ecx
cmp     esi, edi
jz      short loc_882215
cmp     dword ptr [esi+14h], 8
jb      short loc_8821BE
push    dword ptr [esi] ; Block
call    j__free
add     esp, 4

loc_8821BE:
xor     eax, eax
mov     dword ptr [esi+14h], 7
mov     dword ptr [esi+10h], 0
mov     [esi], ax
cmp     dword ptr [edi+14h], 8
jnb     short loc_8821EC
mov     eax, [edi+10h]
inc     eax
jz      short loc_8821F6
add     eax, eax
push    eax             ; Size
push    edi             ; Src
push    esi             ; void *
call    _memmove
add     esp, 0Ch
jmp     short loc_8821F6

loc_8821EC:
mov     eax, [edi]
mov     [esi], eax
mov     dword ptr [edi], 0

loc_8821F6:
mov     eax, [edi+10h]
mov     [esi+10h], eax
mov     eax, [edi+14h]
mov     [esi+14h], eax
xor     eax, eax
mov     dword ptr [edi+14h], 7
mov     dword ptr [edi+10h], 0
mov     [edi], ax

loc_882215:
pop     edi
mov     eax, esi
pop     esi
pop     ebp
retn    4
sub_8821A0 endp

align 10h



sub_882220 proc near
push    esi
mov     esi, ecx
cmp     dword ptr [esi+14h], 8
jb      short loc_882233
push    dword ptr [esi] ; Block
call    j__free
add     esp, 4

loc_882233:
mov     dword ptr [esi+14h], 7
mov     dword ptr [esi+10h], 0
xor     eax, eax
mov     [esi], ax
pop     esi
retn
sub_882220 endp

align 10h


; Attributes: bp-based frame

sub_882250 proc near

Src= dword ptr  8

push    ebp
mov     ebp, esp
mov     edx, [ebp+Src]
push    esi
cmp     word ptr [edx], 0
mov     esi, ecx
jnz     short loc_88226D
xor     eax, eax
push    eax             ; int
push    edx             ; Src
call    sub_882490
pop     esi
pop     ebp
retn    4

loc_88226D:
mov     eax, edx
push    edi
lea     edi, [eax+2]

loc_882273:
mov     cx, [eax]
add     eax, 2
test    cx, cx
jnz     short loc_882273
sub     eax, edi
pop     edi
sar     eax, 1
push    eax             ; int
push    edx             ; Src
mov     ecx, esi
call    sub_882490
pop     esi
pop     ebp
retn    4
sub_882250 endp

align 10h


; Attributes: bp-based frame

sub_8822A0 proc near

arg_0= dword ptr  8
arg_4= dword ptr  0Ch

push    ebp
mov     ebp, esp
push    ebx
mov     ebx, [ebp+arg_0]
push    esi
mov     esi, ecx
or      eax, 0FFFFFFFFh
mov     ecx, [esi+10h]
sub     eax, ecx
cmp     eax, ebx
jbe     loc_882345
test    ebx, ebx
jz      short loc_88233D
push    edi
lea     edi, [ecx+ebx]
cmp     edi, 7FFFFFFEh
ja      loc_88234F
mov     eax, [esi+14h]
cmp     eax, edi
jnb     short loc_88230A
push    ecx
push    edi
mov     ecx, esi
call    sub_882790
test    edi, edi
jz      short loc_88233C

loc_8822E2:
push    [ebp+arg_4]
mov     ecx, esi
push    ebx
push    dword ptr [esi+10h]
call    sub_882640
cmp     dword ptr [esi+14h], 8
mov     [esi+10h], edi
jb      short loc_882334
mov     eax, [esi]
xor     ecx, ecx
mov     [eax+edi*2], cx
pop     edi
mov     eax, esi
pop     esi
pop     ebx
pop     ebp
retn    8

loc_88230A:
test    edi, edi
jnz     short loc_8822E2
mov     [esi+10h], edi
cmp     eax, 8
jb      short loc_882326
mov     eax, [esi]
xor     ecx, ecx
pop     edi
mov     [eax], cx
mov     eax, esi
pop     esi
pop     ebx
pop     ebp
retn    8

loc_882326:
pop     edi
mov     eax, esi
xor     ecx, ecx
pop     esi
mov     [eax], cx
pop     ebx
pop     ebp
retn    8

loc_882334:
mov     eax, esi
xor     ecx, ecx
mov     [eax+edi*2], cx

loc_88233C:
pop     edi

loc_88233D:
mov     eax, esi
pop     esi
pop     ebx
pop     ebp
retn    8

loc_882345:
push    offset aStringTooLong ; "string too long"
call    sub_88541D

loc_88234F:
push    offset aStringTooLong ; "string too long"
call    sub_88541D
sub_8822A0 endp

align 10h


; Attributes: bp-based frame

sub_882360 proc near

arg_0= dword ptr  8
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h

push    ebp
mov     ebp, esp
push    ebx
mov     ebx, [ebp+arg_0]
push    esi
push    edi
mov     edi, [ebx+10h]
mov     esi, ecx
mov     ecx, [ebp+arg_4]
cmp     edi, ecx
jb      loc_88245C
sub     edi, ecx
cmp     [ebp+arg_8], edi
cmovb   edi, [ebp+arg_8]
cmp     esi, ebx
jnz     short loc_8823B9
lea     eax, [edi+ecx]
cmp     [esi+10h], eax
jb      loc_882466
cmp     dword ptr [esi+14h], 8
mov     [esi+10h], eax
jb      short loc_88239F
mov     edx, [esi]
jmp     short loc_8823A1

loc_88239F:
mov     edx, esi

loc_8823A1:
xor     edi, edi
push    ecx
push    edi
mov     ecx, esi
mov     [edx+eax*2], di
call    sub_882590
pop     edi
mov     eax, esi
pop     esi
pop     ebx
pop     ebp
retn    0Ch

loc_8823B9:
cmp     edi, 7FFFFFFEh
ja      loc_882470
mov     eax, [esi+14h]
cmp     eax, edi
jnb     short loc_8823F0
push    dword ptr [esi+10h]
mov     ecx, esi
push    edi
call    sub_882790
mov     ecx, [ebp+arg_4]
test    edi, edi
jz      short loc_882453

loc_8823DE:
cmp     dword ptr [ebx+14h], 8
jb      short loc_8823E6
mov     ebx, [ebx]

loc_8823E6:
cmp     dword ptr [esi+14h], 8
jb      short loc_88241A
mov     edx, [esi]
jmp     short loc_88241C

loc_8823F0:
test    edi, edi
jnz     short loc_8823DE
mov     [esi+10h], edi
cmp     eax, 8
jb      short loc_88240C
mov     eax, [esi]
xor     ecx, ecx
pop     edi
mov     [eax], cx
mov     eax, esi
pop     esi
pop     ebx
pop     ebp
retn    0Ch

loc_88240C:
pop     edi
mov     eax, esi
xor     ecx, ecx
pop     esi
mov     [eax], cx
pop     ebx
pop     ebp
retn    0Ch

loc_88241A:
mov     edx, esi

loc_88241C:
test    edi, edi
jz      short loc_882431
lea     eax, [edi+edi]
push    eax             ; Size
lea     eax, [ebx+ecx*2]
push    eax             ; Src
push    edx             ; void *
call    _memmove_0
add     esp, 0Ch

loc_882431:
cmp     dword ptr [esi+14h], 8
mov     [esi+10h], edi
jb      short loc_88244B
mov     eax, [esi]
xor     ecx, ecx
mov     [eax+edi*2], cx
pop     edi
mov     eax, esi
pop     esi
pop     ebx
pop     ebp
retn    0Ch

loc_88244B:
mov     eax, esi
xor     ecx, ecx
mov     [eax+edi*2], cx

loc_882453:
pop     edi
mov     eax, esi
pop     esi
pop     ebx
pop     ebp
retn    0Ch

loc_88245C:
push    offset aInvalidStringP ; "invalid string position"
call    sub_88544B

loc_882466:
push    offset aInvalidStringP ; "invalid string position"
call    sub_88544B

loc_882470:
push    offset aStringTooLong ; "string too long"
call    sub_88541D
sub_882360 endp

align 10h
; [0000000C BYTES: COLLAPSED FUNCTION unknown_libname_1]
align 10h


; Attributes: bp-based frame

; int __stdcall sub_882490(void *Src, int)
sub_882490 proc near

Src= dword ptr  8
arg_4= dword ptr  0Ch

push    ebp
mov     ebp, esp
push    ebx
mov     ebx, [ebp+Src]
push    esi
mov     esi, ecx
test    ebx, ebx
jz      short loc_8824E6
mov     ecx, [esi+14h]
cmp     ecx, 8
jb      short loc_8824AA
mov     eax, [esi]
jmp     short loc_8824AC

loc_8824AA:
mov     eax, esi

loc_8824AC:
cmp     ebx, eax
jb      short loc_8824E6
cmp     ecx, 8
jb      short loc_8824B9
mov     edx, [esi]
jmp     short loc_8824BB

loc_8824B9:
mov     edx, esi

loc_8824BB:
mov     eax, [esi+10h]
lea     eax, [edx+eax*2]
cmp     eax, ebx
jbe     short loc_8824E6
cmp     ecx, 8
jb      short loc_8824CE
mov     eax, [esi]
jmp     short loc_8824D0

loc_8824CE:
mov     eax, esi

loc_8824D0:
push    [ebp+arg_4]
sub     ebx, eax
sar     ebx, 1
push    ebx
push    esi
mov     ecx, esi
call    sub_882360
pop     esi
pop     ebx
pop     ebp
retn    8

loc_8824E6:
push    edi
mov     edi, [ebp+arg_4]
cmp     edi, 7FFFFFFEh
ja      loc_88257F
mov     eax, [esi+14h]
cmp     eax, edi
jnb     short loc_882516
push    dword ptr [esi+10h]
mov     ecx, esi
push    edi
call    sub_882790
test    edi, edi
jz      short loc_882576

loc_88250C:
cmp     dword ptr [esi+14h], 8
jb      short loc_882540
mov     ecx, [esi]
jmp     short loc_882542

loc_882516:
test    edi, edi
jnz     short loc_88250C
mov     [esi+10h], edi
cmp     eax, 8
jb      short loc_882532
mov     eax, [esi]
xor     ecx, ecx
pop     edi
mov     [eax], cx
mov     eax, esi
pop     esi
pop     ebx
pop     ebp
retn    8

loc_882532:
pop     edi
mov     eax, esi
xor     ecx, ecx
pop     esi
mov     [eax], cx
pop     ebx
pop     ebp
retn    8

loc_882540:
mov     ecx, esi

loc_882542:
test    edi, edi
jz      short loc_882554
lea     eax, [edi+edi]
push    eax             ; Size
push    ebx             ; Src
push    ecx             ; void *
call    _memmove_0
add     esp, 0Ch

loc_882554:
cmp     dword ptr [esi+14h], 8
mov     [esi+10h], edi
jb      short loc_88256E
mov     eax, [esi]
xor     ecx, ecx
mov     [eax+edi*2], cx
pop     edi
mov     eax, esi
pop     esi
pop     ebx
pop     ebp
retn    8

loc_88256E:
mov     eax, esi
xor     ecx, ecx
mov     [eax+edi*2], cx

loc_882576:
pop     edi
mov     eax, esi
pop     esi
pop     ebx
pop     ebp
retn    8

loc_88257F:
push    offset aStringTooLong ; "string too long"
call    sub_88541D
sub_882490 endp

align 10h


; Attributes: bp-based frame

sub_882590 proc near

arg_0= dword ptr  8
arg_4= dword ptr  0Ch

push    ebp
mov     ebp, esp
push    esi
mov     esi, ecx
mov     ecx, [ebp+arg_0]
push    edi
mov     edi, [esi+10h]
cmp     edi, ecx
jb      loc_88262D
mov     edx, [ebp+arg_4]
mov     eax, edi
sub     eax, ecx
cmp     eax, edx
ja      short loc_8825D7
cmp     dword ptr [esi+14h], 8
mov     [esi+10h], ecx
jb      short loc_8825C9
mov     eax, [esi]
xor     edx, edx
mov     [eax+ecx*2], dx
pop     edi
mov     eax, esi
pop     esi
pop     ebp
retn    8

loc_8825C9:
mov     eax, esi
xor     edx, edx
pop     edi
mov     [eax+ecx*2], dx
pop     esi
pop     ebp
retn    8

loc_8825D7:
test    edx, edx
jz      short loc_882625
cmp     dword ptr [esi+14h], 8
jb      short loc_8825E5
mov     eax, [esi]
jmp     short loc_8825E7

loc_8825E5:
mov     eax, esi

loc_8825E7:
sub     edi, edx
push    ebx
lea     ebx, [eax+ecx*2]
mov     eax, edi
sub     eax, ecx
jz      short loc_882603
add     eax, eax
push    eax             ; Size
lea     eax, [ebx+edx*2]
push    eax             ; Src
push    ebx             ; void *
call    _memmove
add     esp, 0Ch

loc_882603:
cmp     dword ptr [esi+14h], 8
mov     [esi+10h], edi
pop     ebx
jb      short loc_88261D
mov     eax, [esi]
xor     ecx, ecx
mov     [eax+edi*2], cx
pop     edi
mov     eax, esi
pop     esi
pop     ebp
retn    8

loc_88261D:
mov     eax, esi
xor     ecx, ecx
mov     [eax+edi*2], cx

loc_882625:
pop     edi
mov     eax, esi
pop     esi
pop     ebp
retn    8

loc_88262D:
push    offset aInvalidStringP ; "invalid string position"
call    sub_88544B
sub_882590 endp

align 10h


; Attributes: bp-based frame

sub_882640 proc near

arg_0= dword ptr  8
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h

push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_4]
mov     edx, [ebp+arg_0]
cmp     eax, 1
jnz     short loc_882662
cmp     dword ptr [ecx+14h], 8
jb      short loc_882656
mov     ecx, [ecx]

loc_882656:
mov     ax, word ptr [ebp+arg_8]
mov     [ecx+edx*2], ax
pop     ebp
retn    0Ch

loc_882662:
cmp     dword ptr [ecx+14h], 8
jb      short loc_88266A
mov     ecx, [ecx]

loc_88266A:
push    edi
lea     edi, [ecx+edx*2]
test    eax, eax
jz      short loc_88268A
mov     ecx, eax
mov     eax, [ebp+arg_8]
movzx   edx, ax
mov     eax, edx
shl     edx, 10h
or      eax, edx
shr     ecx, 1
rep stosd
adc     ecx, ecx
rep stosw

loc_88268A:
pop     edi
pop     ebp
retn    0Ch
sub_882640 endp

align 10h


; Attributes: bp-based frame

sub_882690 proc near

arg_0= dword ptr  8

push    ebp
mov     ebp, esp
cmp     dword ptr [ecx+14h], 8
mov     edx, [ebp+arg_0]
mov     [ecx+10h], edx
jb      short loc_8826AB
mov     eax, [ecx]
xor     ecx, ecx
mov     [eax+edx*2], cx
pop     ebp
retn    4

loc_8826AB:
xor     eax, eax
mov     [ecx+edx*2], ax
pop     ebp
retn    4
sub_882690 endp

align 10h


; Attributes: bp-based frame

; int __thiscall sub_8826C0(void *, int, int)
sub_8826C0 proc near

arg_0= dword ptr  8
arg_4= dword ptr  0Ch

push    ebp
mov     ebp, esp
push    esi
push    edi
mov     edi, [ebp+arg_0]
mov     esi, ecx
cmp     edi, 7FFFFFFEh
ja      loc_88276E
mov     eax, [esi+14h]
cmp     eax, edi
jnb     short loc_8826F4
push    dword ptr [esi+10h]
push    edi
call    sub_882790
xor     eax, eax
cmp     eax, edi
sbb     eax, eax
pop     edi
neg     eax
pop     esi
pop     ebp
retn    8

loc_8826F4:
cmp     byte ptr [ebp+arg_4], 0
jz      short loc_88274D
cmp     edi, 8
jnb     short loc_88274D
push    ebx
mov     ebx, [esi+10h]
cmp     edi, ebx
cmovb   ebx, edi
cmp     eax, 8
jb      short loc_882730
mov     ecx, [esi]
mov     [ebp+arg_4], ecx
test    ebx, ebx
jz      short loc_882727
lea     eax, [ebx+ebx]
push    eax             ; Size
push    ecx             ; Src
push    esi             ; void *
call    _memmove_0
mov     ecx, [ebp+arg_4]
add     esp, 0Ch

loc_882727:             ; Block
push    ecx
call    j__free
add     esp, 4

loc_882730:
xor     eax, eax
mov     [esi+10h], ebx
mov     dword ptr [esi+14h], 7
mov     [esi+ebx*2], ax
cmp     eax, edi
pop     ebx
sbb     eax, eax
pop     edi
neg     eax
pop     esi
pop     ebp
retn    8

loc_88274D:
test    edi, edi
jnz     short loc_882760
mov     [esi+10h], edi
cmp     eax, 8
jb      short loc_88275B
mov     esi, [esi]

loc_88275B:
xor     eax, eax
mov     [esi], ax

loc_882760:
xor     eax, eax
cmp     eax, edi
sbb     eax, eax
pop     edi
neg     eax
pop     esi
pop     ebp
retn    8

loc_88276E:
push    offset aStringTooLong ; "string too long"
call    sub_88541D
sub_8826C0 endp

align 10h



sub_882780 proc near
mov     eax, ecx
retn
sub_882780 endp

align 10h


; Attributes: bp-based frame

sub_882790 proc near

var_18= dword ptr -18h
var_14= dword ptr -14h
var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 00890D40 SIZE 0000001B BYTES

; __unwind { // SEH_402790
push    ebp
mov     ebp, esp
push    0FFFFFFFFh
push    offset SEH_402790
mov     eax, large fs:0
push    eax
sub     esp, 0Ch
push    ebx
push    esi
push    edi
mov     eax, ___security_cookie
xor     eax, ebp
push    eax
lea     eax, [ebp+var_C]
mov     large fs:0, eax
mov     [ebp+var_10], esp
mov     esi, ecx
mov     [ebp+var_18], esi
mov     eax, [ebp+arg_0]
mov     edi, eax
or      edi, 7
cmp     edi, 7FFFFFFEh
jbe     short loc_8827D4
mov     edi, eax
jmp     short loc_8827FB

loc_8827D4:
mov     ebx, [esi+14h]
mov     eax, 0AAAAAAABh
mul     edi
mov     ecx, ebx
shr     ecx, 1
shr     edx, 1
cmp     ecx, edx
jbe     short loc_8827FB
mov     eax, 7FFFFFFEh
sub     eax, ecx
lea     edi, [ecx+ebx]
cmp     ebx, eax
jbe     short loc_8827FB
mov     edi, 7FFFFFFEh

loc_8827FB:
lea     eax, [edi+1]
xor     ecx, ecx
;   try {
mov     [ebp+var_4], 0
mov     [ebp+var_14], ecx
test    eax, eax
jz      short loc_882857
cmp     eax, 7FFFFFFFh
ja      short loc_882829
add     eax, eax
push    eax             ; Size
call    ??2@YAPAXI@Z    ; operator new(uint)
mov     ecx, eax
add     esp, 4
mov     [ebp+var_14], ecx
test    ecx, ecx
jnz     short loc_882857

loc_882829:             ; Microsoft VisualC 2-14/net runtime
call    unknown_libname_2

loc_88282E:
;   catch(...) // owned by 882800
mov     eax, [ebp+arg_0]
mov     [ebp+arg_0], eax
inc     eax
mov     [ebp+var_10], esp
push    eax
;   } // starts at 882800
;   try {
mov     byte ptr [ebp+var_4], 2
call    sub_8828F0
mov     [ebp+var_14], eax
mov     eax, offset loc_88284B
retn

loc_88284B:
mov     ecx, [ebp+var_14]
mov     esi, [ebp+var_18]
mov     edi, [ebp+arg_0]
mov     [ebp+var_14], ecx

loc_882857:
mov     ebx, [ebp+arg_4]
test    ebx, ebx
jz      short loc_8828A9
cmp     dword ptr [esi+14h], 8
jb      short loc_882895
mov     edx, [esi]
jmp     short loc_882897

loc_882868:
;   catch(...) // owned by 882839
mov     esi, [ebp+var_18]
cmp     dword ptr [esi+14h], 8
jb      short loc_88287B
push    dword ptr [esi] ; Block
call    j__free
add     esp, 4

loc_88287B:
xor     eax, eax
push    eax             ; pThrowInfo
mov     dword ptr [esi+14h], 7
mov     dword ptr [esi+10h], 0
push    eax             ; pExceptionObject
mov     [esi], ax
call    __CxxThrowException@8 ; _CxxThrowException(x,x)

loc_882895:
mov     edx, esi

loc_882897:
test    ebx, ebx
jz      short loc_8828A9
lea     eax, [ebx+ebx]
push    eax             ; Size
push    edx             ; Src
push    ecx             ; void *
call    _memmove_0
add     esp, 0Ch

loc_8828A9:
cmp     dword ptr [esi+14h], 8
jb      short loc_8828B9
push    dword ptr [esi] ; Block
call    j__free
add     esp, 4

loc_8828B9:
mov     eax, [ebp+var_14]
mov     [esi], eax
mov     [esi+14h], edi
mov     [esi+10h], ebx
cmp     edi, 8
jb      short loc_8828CB
mov     esi, eax

loc_8828CB:
xor     eax, eax
mov     [esi+ebx*2], ax
mov     ecx, [ebp+var_C]
mov     large fs:0, ecx
pop     ecx
pop     edi
pop     esi
pop     ebx
mov     esp, ebp
pop     ebp
retn    8
;   } // starts at 882839
; } // starts at 882790
sub_882790 endp

align 10h


; Attributes: bp-based frame

sub_8828F0 proc near

arg_0= dword ptr  8

push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_0]
xor     ecx, ecx
test    eax, eax
jz      short loc_882914
cmp     eax, 7FFFFFFFh
ja      short loc_88291A
add     eax, eax
push    eax             ; Size
call    ??2@YAPAXI@Z    ; operator new(uint)
mov     ecx, eax
add     esp, 4
test    ecx, ecx
jz      short loc_88291A

loc_882914:
mov     eax, ecx
pop     ebp
retn    4

loc_88291A:             ; Microsoft VisualC 2-14/net runtime
call    unknown_libname_2
sub_8828F0 endp

align 10h


; Attributes: bp-based frame

; int __usercall sub_882920@<eax>(void *@<ecx>, int)
sub_882920 proc near

var_4= dword ptr -4
Src= dword ptr  8

push    ebp
mov     ebp, esp
push    ecx
push    ebx
push    esi
push    edi
mov     edi, ecx
mov     ecx, [ebp+Src]
mov     ebx, edx
cmp     word ptr [ecx], 0
mov     [ebp+var_4], 0
jnz     short loc_88293F
xor     esi, esi
jmp     short loc_882953

loc_88293F:
mov     esi, ecx
lea     edx, [esi+2]

loc_882944:
mov     ax, [esi]
add     esi, 2
test    ax, ax
jnz     short loc_882944
sub     esi, edx
sar     esi, 1

loc_882953:             ; int
push    esi
push    ecx             ; Src
mov     ecx, ebx
call    sub_882C10
mov     esi, eax
xor     eax, eax
mov     dword ptr [edi+14h], 7
mov     dword ptr [edi+10h], 0
mov     [edi], ax
cmp     dword ptr [esi+14h], 8
jnb     short loc_88298C
mov     eax, [esi+10h]
inc     eax
jz      short loc_882996
add     eax, eax
push    eax             ; Size
push    esi             ; Src
push    edi             ; void *
call    _memmove
add     esp, 0Ch
jmp     short loc_882996

loc_88298C:
mov     eax, [esi]
mov     [edi], eax
mov     dword ptr [esi], 0

loc_882996:
mov     eax, [esi+10h]
mov     [edi+10h], eax
mov     eax, [esi+14h]
mov     [edi+14h], eax
xor     eax, eax
mov     dword ptr [esi+14h], 7
mov     dword ptr [esi+10h], 0
mov     [esi], ax
mov     eax, edi
pop     edi
pop     esi
pop     ebx
mov     esp, ebp
pop     ebp
retn
sub_882920 endp

align 10h


; Attributes: bp-based frame

; int __usercall sub_8829C0@<eax>(void *@<ecx>, int)
sub_8829C0 proc near

var_4= dword ptr -4
Src= dword ptr  8

push    ebp
mov     ebp, esp
push    ecx
push    esi
push    edi
sub     esp, 8
mov     edi, ecx
push    edx             ; void *
push    ecx             ; int
mov     ecx, [ebp+Src]  ; Src
mov     [ebp+var_4], 0
call    sub_882D40
mov     esi, eax
xor     eax, eax
mov     dword ptr [edi+14h], 7
mov     dword ptr [edi+10h], 0
mov     [edi], ax
cmp     dword ptr [esi+14h], 8
jnb     short loc_882A0C
mov     eax, [esi+10h]
inc     eax
jz      short loc_882A16
add     eax, eax
push    eax             ; Size
push    esi             ; Src
push    edi             ; void *
call    _memmove
add     esp, 0Ch
jmp     short loc_882A16

loc_882A0C:
mov     eax, [esi]
mov     [edi], eax
mov     dword ptr [esi], 0

loc_882A16:
mov     eax, [esi+10h]
mov     [edi+10h], eax
mov     eax, [esi+14h]
mov     [edi+14h], eax
xor     eax, eax
mov     dword ptr [esi+14h], 7
mov     dword ptr [esi+10h], 0
mov     [esi], ax
mov     eax, edi
pop     edi
pop     esi
mov     esp, ebp
pop     ebp
retn
sub_8829C0 endp

align 10h


; Attributes: bp-based frame

; int __usercall sub_882A40@<eax>(void *@<ecx>, int)
sub_882A40 proc near

var_4= dword ptr -4
Src= dword ptr  8

push    ebp
mov     ebp, esp
push    ecx
mov     eax, [edx+14h]
push    esi
mov     esi, [edx+10h]
push    edi
mov     edi, ecx
mov     ecx, [ebp+Src]  ; Src
sub     eax, esi
mov     [ebp+var_4], 0
cmp     [ecx+10h], eax
jbe     short loc_882A83
mov     eax, [ecx+14h]
sub     eax, [ecx+10h]
cmp     eax, esi
jb      short loc_882A83
sub     esp, 8
push    edx             ; void *
push    ecx             ; int
call    sub_882D40
push    eax             ; Src
mov     ecx, edi        ; void *
call    sub_882130
mov     eax, edi
pop     edi
pop     esi
mov     esp, ebp
pop     ebp
retn

loc_882A83:
push    0FFFFFFFFh
push    0
push    ecx
mov     ecx, edx
call    sub_882B00
mov     esi, eax
xor     eax, eax
mov     dword ptr [edi+14h], 7
mov     dword ptr [edi+10h], 0
mov     [edi], ax
cmp     dword ptr [esi+14h], 8
jnb     short loc_882ABF
mov     eax, [esi+10h]
inc     eax
jz      short loc_882AC9
add     eax, eax
push    eax             ; Size
push    esi             ; Src
push    edi             ; void *
call    _memmove
add     esp, 0Ch
jmp     short loc_882AC9

loc_882ABF:
mov     eax, [esi]
mov     [edi], eax
mov     dword ptr [esi], 0

loc_882AC9:
mov     eax, [esi+10h]
mov     [edi+10h], eax
mov     eax, [esi+14h]
mov     [edi+14h], eax
xor     eax, eax
mov     dword ptr [esi+14h], 7
mov     dword ptr [esi+10h], 0
mov     [esi], ax
mov     eax, edi
pop     edi
pop     esi
mov     esp, ebp
pop     ebp
retn
sub_882A40 endp

; [00000003 BYTES: COLLAPSED FUNCTION nullsub_1]
align 10h


; Attributes: bp-based frame

sub_882B00 proc near

arg_0= dword ptr  8
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h

push    ebp
mov     ebp, esp
mov     edx, [ebp+arg_4]
push    ebx
push    esi
mov     esi, ecx
mov     ecx, [ebp+arg_0]
mov     eax, [ecx+10h]
cmp     eax, edx
jb      loc_882BE8
mov     ebx, [ebp+arg_8]
sub     eax, edx
mov     edx, [esi+10h]
cmp     eax, ebx
cmovb   ebx, eax
or      eax, 0FFFFFFFFh
sub     eax, edx
cmp     eax, ebx
jbe     loc_882BF2
test    ebx, ebx
jz      loc_882BE0
push    edi
lea     edi, [edx+ebx]
cmp     edi, 7FFFFFFEh
ja      loc_882BFC
mov     eax, [esi+14h]
cmp     eax, edi
jnb     short loc_882B73
push    edx
push    edi
mov     ecx, esi
call    sub_882790
mov     ecx, [ebp+arg_0]
test    edi, edi
jz      short loc_882BDF

loc_882B61:
cmp     dword ptr [ecx+14h], 8
jb      short loc_882B69
mov     ecx, [ecx]

loc_882B69:
cmp     dword ptr [esi+14h], 8
jb      short loc_882B9D
mov     edx, [esi]
jmp     short loc_882B9F

loc_882B73:
test    edi, edi
jnz     short loc_882B61
mov     [esi+10h], edi
cmp     eax, 8
jb      short loc_882B8F
mov     eax, [esi]
xor     ecx, ecx
pop     edi
mov     [eax], cx
mov     eax, esi
pop     esi
pop     ebx
pop     ebp
retn    0Ch

loc_882B8F:
pop     edi
mov     eax, esi
xor     ecx, ecx
pop     esi
mov     [eax], cx
pop     ebx
pop     ebp
retn    0Ch

loc_882B9D:
mov     edx, esi

loc_882B9F:
test    ebx, ebx
jz      short loc_882BBD
lea     eax, [ebx+ebx]
push    eax             ; Size
mov     eax, [ebp+arg_4]
lea     eax, [ecx+eax*2]
push    eax             ; Src
mov     eax, [esi+10h]
lea     eax, [edx+eax*2]
push    eax             ; void *
call    _memmove_0
add     esp, 0Ch

loc_882BBD:
cmp     dword ptr [esi+14h], 8
mov     [esi+10h], edi
jb      short loc_882BD7
mov     eax, [esi]
xor     ecx, ecx
mov     [eax+edi*2], cx
pop     edi
mov     eax, esi
pop     esi
pop     ebx
pop     ebp
retn    0Ch

loc_882BD7:
mov     eax, esi
xor     ecx, ecx
mov     [eax+edi*2], cx

loc_882BDF:
pop     edi

loc_882BE0:
mov     eax, esi
pop     esi
pop     ebx
pop     ebp
retn    0Ch

loc_882BE8:
push    offset aInvalidStringP ; "invalid string position"
call    sub_88544B

loc_882BF2:
push    offset aStringTooLong ; "string too long"
call    sub_88541D

loc_882BFC:
push    offset aStringTooLong ; "string too long"
call    sub_88541D
sub_882B00 endp

align 10h


; Attributes: bp-based frame

; int __stdcall sub_882C10(void *Src, int)
sub_882C10 proc near

Src= dword ptr  8
arg_4= dword ptr  0Ch

push    ebp
mov     ebp, esp
push    esi
push    edi
mov     edi, [ebp+Src]
mov     esi, ecx
test    edi, edi
jz      short loc_882C66
mov     ecx, [esi+14h]
cmp     ecx, 8
jb      short loc_882C2A
mov     eax, [esi]
jmp     short loc_882C2C

loc_882C2A:
mov     eax, esi

loc_882C2C:
cmp     edi, eax
jb      short loc_882C66
cmp     ecx, 8
jb      short loc_882C39
mov     edx, [esi]
jmp     short loc_882C3B

loc_882C39:
mov     edx, esi

loc_882C3B:
mov     eax, [esi+10h]
lea     eax, [edx+eax*2]
cmp     eax, edi
jbe     short loc_882C66
cmp     ecx, 8
jb      short loc_882C4E
mov     eax, [esi]
jmp     short loc_882C50

loc_882C4E:
mov     eax, esi

loc_882C50:
push    [ebp+arg_4]
sub     edi, eax
sar     edi, 1
push    edi
push    esi
mov     ecx, esi
call    sub_882B00
pop     edi
pop     esi
pop     ebp
retn    8

loc_882C66:
mov     edx, [esi+10h]
mov     ecx, [ebp+arg_4]
or      eax, 0FFFFFFFFh
sub     eax, edx
cmp     eax, ecx
jbe     loc_882D21
test    ecx, ecx
jz      loc_882D19
push    ebx
lea     ebx, [edx+ecx]
cmp     ebx, 7FFFFFFEh
ja      loc_882D2B
mov     eax, [esi+14h]
cmp     eax, ebx
jnb     short loc_882CB2
push    edx
push    ebx
mov     ecx, esi
call    sub_882790
mov     ecx, [ebp+arg_4]
test    ebx, ebx
jz      short loc_882D18

loc_882CA8:
cmp     dword ptr [esi+14h], 8
jb      short loc_882CDC
mov     edx, [esi]
jmp     short loc_882CDE

loc_882CB2:
test    ebx, ebx
jnz     short loc_882CA8
mov     [esi+10h], ebx
cmp     eax, 8
jb      short loc_882CCE
mov     eax, [esi]
pop     ebx
xor     ecx, ecx
mov     [eax], cx
pop     edi
mov     eax, esi
pop     esi
pop     ebp
retn    8

loc_882CCE:
pop     ebx
mov     eax, esi
xor     ecx, ecx
pop     edi
mov     [eax], cx
pop     esi
pop     ebp
retn    8

loc_882CDC:
mov     edx, esi

loc_882CDE:
test    ecx, ecx
jz      short loc_882CF6
lea     eax, [ecx+ecx]
push    eax             ; Size
mov     eax, [esi+10h]
push    edi             ; Src
lea     eax, [edx+eax*2]
push    eax             ; void *
call    _memmove_0
add     esp, 0Ch

loc_882CF6:
cmp     dword ptr [esi+14h], 8
mov     [esi+10h], ebx
jb      short loc_882D10
mov     eax, [esi]
xor     ecx, ecx
mov     [eax+ebx*2], cx
pop     ebx
pop     edi
mov     eax, esi
pop     esi
pop     ebp
retn    8

loc_882D10:
mov     eax, esi
xor     ecx, ecx
mov     [eax+ebx*2], cx

loc_882D18:
pop     ebx

loc_882D19:
pop     edi
mov     eax, esi
pop     esi
pop     ebp
retn    8

loc_882D21:
push    offset aStringTooLong ; "string too long"
call    sub_88541D

loc_882D2B:
push    offset aStringTooLong ; "string too long"
call    sub_88541D
sub_882C10 endp

align 10h


; Attributes: bp-based frame

; int __thiscall sub_882D40(void *Src, int, void *, int, int)
sub_882D40 proc near

Src= dword ptr -4
arg_4= dword ptr  0Ch

push    ebp
mov     ebp, esp
push    ecx
push    ebx
mov     ebx, [ebp+arg_4]
push    esi
mov     esi, ecx
or      ecx, 0FFFFFFFFh
cmp     dword ptr [ebx+10h], 0FFFFFFFFh
mov     edx, [esi+10h]
cmovb   ecx, [ebx+10h]
or      eax, 0FFFFFFFFh
sub     eax, edx
mov     [ebp+arg_4], ecx
cmp     eax, ecx
jbe     loc_882E63
test    ecx, ecx
jz      loc_882E59
push    edi
lea     edi, [edx+ecx]
cmp     edi, 7FFFFFFEh
ja      loc_882E6D
mov     eax, [esi+14h]
cmp     eax, edi
jnb     short loc_882DAB
push    edx
push    edi
mov     ecx, esi
call    sub_882790
mov     ecx, [ebp+arg_4]
test    edi, edi
jz      loc_882E58

loc_882D9C:
mov     eax, [esi+14h]
cmp     eax, 8
jb      short loc_882DD9
mov     edx, [esi]
mov     [ebp+Src], edx
jmp     short loc_882DDC

loc_882DAB:
test    edi, edi
jnz     short loc_882D9C
mov     [esi+10h], edi
cmp     eax, 8
jb      short loc_882DC9
mov     eax, [esi]
xor     ecx, ecx
pop     edi
mov     [eax], cx
mov     eax, esi
pop     esi
pop     ebx
mov     esp, ebp
pop     ebp
retn    10h

loc_882DC9:
pop     edi
mov     eax, esi
xor     ecx, ecx
pop     esi
mov     [eax], cx
pop     ebx
mov     esp, ebp
pop     ebp
retn    10h

loc_882DD9:
mov     [ebp+Src], esi

loc_882DDC:
cmp     eax, 8
jb      short loc_882DE5
mov     edx, [esi]
jmp     short loc_882DE7

loc_882DE5:
mov     edx, esi

loc_882DE7:
mov     eax, [esi+10h]
test    eax, eax
jz      short loc_882E00
add     eax, eax
push    eax             ; Size
push    [ebp+Src]       ; Src
lea     eax, [edx+ecx*2]
push    eax             ; void *
call    _memmove
add     esp, 0Ch

loc_882E00:
cmp     esi, ebx
jnz     short loc_882E2F
mov     eax, [esi+14h]
cmp     eax, 8
jb      short loc_882E10
mov     edx, [esi]
jmp     short loc_882E12

loc_882E10:             ; Src
mov     edx, esi

loc_882E12:
cmp     eax, 8
jb      short loc_882E23
push    [ebp+arg_4]     ; int
mov     ecx, [esi]      ; void *
call    sub_8816C0
jmp     short loc_882E4D

loc_882E23:             ; int
push    [ebp+arg_4]
mov     ecx, esi        ; void *
call    sub_8816C0
jmp     short loc_882E4D

loc_882E2F:
cmp     dword ptr [ebx+14h], 8
jb      short loc_882E37
mov     ebx, [ebx]

loc_882E37:
cmp     dword ptr [esi+14h], 8
jb      short loc_882E41
mov     ecx, [esi]
jmp     short loc_882E43

loc_882E41:             ; void *
mov     ecx, esi

loc_882E43:             ; int
push    [ebp+arg_4]
mov     edx, ebx        ; Src
call    sub_8816A0

loc_882E4D:
add     esp, 4
mov     ecx, esi
push    edi
call    sub_882690

loc_882E58:
pop     edi

loc_882E59:
mov     eax, esi
pop     esi
pop     ebx
mov     esp, ebp
pop     ebp
retn    10h

loc_882E63:
push    offset aStringTooLong ; "string too long"
call    sub_88541D

loc_882E6D:
push    offset aStringTooLong ; "string too long"
call    sub_88541D
sub_882D40 endp

align 10h


; Attributes: bp-based frame

sub_882E80 proc near

VersionInformation= _OSVERSIONINFOW ptr -118h
var_4= dword ptr -4

push    ebp
mov     ebp, esp
sub     esp, 118h
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+var_4], eax
push    114h            ; Size
lea     eax, [ebp+VersionInformation]
push    0               ; Val
push    eax             ; void *
call    _memset
add     esp, 0Ch
lea     eax, [ebp+VersionInformation]
push    eax             ; lpVersionInformation
mov     [ebp+VersionInformation.dwOSVersionInfoSize], 114h
call    ds:GetVersionExW
test    eax, eax
jz      short loc_882EDD
cmp     [ebp+VersionInformation.dwMajorVersion], 5
ja      short loc_882EDD
xor     eax, eax
mov     ecx, [ebp+var_4]
xor     ecx, ebp        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     esp, ebp
pop     ebp
retn

loc_882EDD:
mov     ecx, [ebp+var_4]
xor     ecx, ebp        ; StackCookie
mov     eax, 1
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     esp, ebp
pop     ebp
retn
sub_882E80 endp




sub_882EF0 proc near
mov     eax, [ecx+10h]
test    eax, eax
jz      short locret_882F36
lea     edx, [eax-1]
cmp     eax, edx
jbe     short loc_882F37
cmp     dword ptr [ecx+14h], 8
push    edi
jb      short loc_882F09
mov     edi, [ecx]
jmp     short loc_882F0B

loc_882F09:
mov     edi, ecx

loc_882F0B:
cmp     word ptr [edi+edx*2], 5Ch ; '\'
pop     edi
jz      short locret_882F36
cmp     eax, edx
jbe     short loc_882F41
cmp     dword ptr [ecx+14h], 8
jb      short loc_882F21
mov     eax, [ecx]
jmp     short loc_882F23

loc_882F21:
mov     eax, ecx

loc_882F23:
cmp     word ptr [eax+edx*2], 2Fh ; '/'
jz      short locret_882F36
push    1               ; int
push    offset Src      ; "\\"
call    sub_882C10

locret_882F36:
retn

loc_882F37:
push    offset aInvalidStringP ; "invalid string position"
call    sub_88544B

loc_882F41:
push    offset aInvalidStringP ; "invalid string position"
call    sub_88544B
sub_882EF0 endp

align 10h



sub_882F50 proc near
mov     eax, [ecx+10h]
test    eax, eax
jz      short locret_882FC2
lea     edx, [eax-1]
cmp     eax, edx
jbe     short loc_882FC3
push    esi
mov     esi, [ecx+14h]
push    edi
cmp     esi, 8
jb      short loc_882F6C
mov     edi, [ecx]
jmp     short loc_882F6E

loc_882F6C:
mov     edi, ecx

loc_882F6E:
cmp     word ptr [edi+edx*2], 5Ch ; '\'
jz      short loc_882F8B
cmp     eax, edx
jbe     short loc_882FCD
cmp     esi, 8
jb      short loc_882F82
mov     edi, [ecx]
jmp     short loc_882F84

loc_882F82:
mov     edi, ecx

loc_882F84:
cmp     word ptr [edi+edx*2], 2Fh ; '/'
jnz     short loc_882FC0

loc_882F8B:
cmp     esi, 8
jb      short loc_882F94
mov     edx, [ecx]
jmp     short loc_882F96

loc_882F94:
mov     edx, ecx

loc_882F96:
dec     eax
lea     eax, [edx+eax*2]
cmp     esi, 8
jb      short loc_882FA3
mov     edx, [ecx]
jmp     short loc_882FA5

loc_882FA3:
mov     edx, ecx

loc_882FA5:
test    eax, eax
jnz     short loc_882FB4
push    1
push    eax
call    sub_882590
pop     edi
pop     esi
retn

loc_882FB4:
sub     eax, edx
sar     eax, 1
push    1
push    eax
call    sub_882590

loc_882FC0:
pop     edi
pop     esi

locret_882FC2:
retn

loc_882FC3:
push    offset aInvalidStringP ; "invalid string position"
call    sub_88544B

loc_882FCD:
push    offset aInvalidStringP ; "invalid string position"
call    sub_88544B
sub_882F50 endp

align 10h


; Attributes: bp-based frame

; int __usercall sub_882FE0@<eax>(void *@<ecx>, LPCWSTR lpSrc@<edx>, int, int)
sub_882FE0 proc near

Block= dword ptr -30h
var_1C= dword ptr -1Ch
var_18= dword ptr -18h
lpSrc= dword ptr -14h
var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 00890F10 SIZE 00000034 BYTES

; __unwind { // SEH_402FE0
push    ebp
mov     ebp, esp
push    0FFFFFFFFh
push    offset SEH_402FE0
mov     eax, large fs:0
push    eax
sub     esp, 24h
push    ebx
push    esi
push    edi
mov     eax, ___security_cookie
xor     eax, ebp
push    eax
lea     eax, [ebp+var_C]
mov     large fs:0, eax
mov     ebx, edx
mov     [ebp+lpSrc], ebx
mov     esi, ecx
mov     [ebp+var_18], esi
;   try {
mov     [ebp+var_4], 0
xor     eax, eax
mov     [ebp+var_10], 0
push    eax             ; int
mov     dword ptr [esi+14h], 7
mov     dword ptr [esi+10h], 0
push    offset unk_8974A4 ; Src
mov     [esi], ax
call    sub_882490
push    0               ; nSize
push    0               ; lpDst
;   } // starts at 883012
;   try {
mov     [ebp+var_4], 0
push    ebx             ; lpSrc
mov     [ebp+var_10], 1
call    ds:ExpandEnvironmentStringsW
mov     ebx, eax
test    ebx, ebx
jz      short loc_8830B2
xor     ecx, ecx
mov     edx, 2
mul     edx
seto    cl
neg     ecx
or      ecx, eax
push    ecx             ; unsigned int
call    ??_U@YAPAXI@Z   ; operator new[](uint)
add     esp, 4
mov     edi, eax
push    ebx             ; nSize
push    edi             ; lpDst
push    [ebp+lpSrc]     ; lpSrc
call    ds:ExpandEnvironmentStringsW
test    eax, eax
jz      short loc_8830A9
push    edi
lea     ecx, [ebp+Block]
call    sub_8820D0
push    eax             ; Src
mov     ecx, esi        ; void *
call    sub_8821A0
cmp     [ebp+var_1C], 8
jb      short loc_8830A9
push    [ebp+Block]     ; Block
call    j__free
add     esp, 4

loc_8830A9:             ; Block
push    edi
call    j_j__free
add     esp, 4

loc_8830B2:
mov     eax, esi
mov     ecx, [ebp+var_C]
mov     large fs:0, ecx
pop     ecx
pop     edi
pop     esi
pop     ebx
mov     esp, ebp
pop     ebp
retn
;   } // starts at 883042
; } // starts at 882FE0
sub_882FE0 endp

align 10h


; Attributes: bp-based frame

sub_8830D0 proc near

var_14= dword ptr -14h
var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_4= dword ptr -4

; FUNCTION CHUNK AT 00890D60 SIZE 00000034 BYTES

; __unwind { // SEH_404E80
push    ebp
mov     ebp, esp
push    0FFFFFFFFh
push    offset SEH_4030D0
mov     eax, large fs:0
push    eax
sub     esp, 8
push    esi
push    edi
mov     eax, ___security_cookie
xor     eax, ebp
push    eax
lea     eax, [ebp+var_C]
mov     large fs:0, eax
mov     edi, edx
mov     esi, ecx
mov     [ebp+var_14], esi
;   try {
mov     [ebp+var_4], 0
xor     eax, eax
push    0FFFFFFFFh
mov     [ebp+var_10], 0
push    eax
mov     dword ptr [esi+14h], 7
mov     dword ptr [esi+10h], 0
push    edi
mov     [esi], ax
call    sub_882360
push    1
push    ecx
;   } // starts at 8830FE
;   try {
mov     [ebp+var_4], 0
push    offset Src      ; "\\"
mov     ecx, edi
mov     [ebp+var_10], 1
call    sub_884AB0
cmp     eax, 0FFFFFFFFh
jz      short loc_883191
mov     ecx, [esi+10h]
inc     eax
cmp     eax, ecx
ja      short loc_8831AD

loc_883152:
cmp     dword ptr [esi+14h], 8
mov     [esi+10h], eax
jb      short loc_883176
mov     ecx, [esi]
xor     edx, edx
mov     [ecx+eax*2], dx
mov     eax, esi
mov     ecx, [ebp+var_C]
mov     large fs:0, ecx
pop     ecx
pop     edi
pop     esi
mov     esp, ebp
pop     ebp
retn

loc_883176:
mov     ecx, esi
xor     edx, edx
mov     [ecx+eax*2], dx
mov     eax, esi
mov     ecx, [ebp+var_C]
mov     large fs:0, ecx
pop     ecx
pop     edi
pop     esi
mov     esp, ebp
pop     ebp
retn

loc_883191:
push    1
push    ecx
push    offset asc_8974F8 ; "/"
mov     ecx, edi
call    sub_884AB0
cmp     eax, 0FFFFFFFFh
jz      short loc_8831B9
mov     ecx, [esi+10h]
inc     eax
cmp     eax, ecx
jbe     short loc_883152

loc_8831AD:
sub     eax, ecx
push    0
push    eax
mov     ecx, esi
call    sub_8822A0

loc_8831B9:
mov     eax, esi
mov     ecx, [ebp+var_C]
mov     large fs:0, ecx
pop     ecx
pop     edi
pop     esi
mov     esp, ebp
pop     ebp
retn
;   } // starts at 88312B
; } // starts at 8830D0
sub_8830D0 endp

align 10h


; Attributes: bp-based frame

sub_8831D0 proc near

FindFileData= _WIN32_FIND_DATAW ptr -278h
lpFileName= dword ptr -28h
var_18= dword ptr -18h
var_14= dword ptr -14h
var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 00890DE0 SIZE 00000030 BYTES

; __unwind { // SEH_4031D0
push    ebp
mov     ebp, esp
push    0FFFFFFFFh
push    offset SEH_4031D0
mov     eax, large fs:0
push    eax
sub     esp, 26Ch
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+var_10], eax
push    esi
push    eax
lea     eax, [ebp+var_C]
mov     large fs:0, eax
xor     eax, eax
cmp     [ecx+10h], eax
jz      short loc_883282
push    0FFFFFFFFh
push    eax
push    ecx
lea     ecx, [ebp+lpFileName]
mov     [ebp+var_14], 7
mov     [ebp+var_18], eax
mov     word ptr [ebp+lpFileName], ax
call    sub_882360
lea     ecx, [ebp+lpFileName]
;   try {
mov     [ebp+var_4], 0
call    sub_882F50
cmp     [ebp+var_14], 8
lea     ecx, [ebp+FindFileData]
lea     eax, [ebp+lpFileName]
cmovnb  eax, [ebp+lpFileName]
push    ecx             ; lpFindFileData
push    eax             ; lpFileName
call    ds:FindFirstFileW
cmp     eax, 0FFFFFFFFh
jz      short loc_883258
push    eax             ; hFindFile
call    ds:FindClose
mov     esi, 1
jmp     short loc_88326F

loc_883258:
call    ds:GetLastError
mov     esi, 1
cmp     eax, 2
jz      short loc_88326D
cmp     eax, 3
jnz     short loc_88326F

loc_88326D:
xor     esi, esi

loc_88326F:
cmp     [ebp+var_14], 8
jb      short loc_883280
push    [ebp+lpFileName] ; Block
call    j__free
add     esp, 4

loc_883280:
mov     eax, esi

loc_883282:
mov     ecx, [ebp+var_C]
mov     large fs:0, ecx
pop     ecx
pop     esi
mov     ecx, [ebp+var_10]
xor     ecx, ebp        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     esp, ebp
pop     ebp
retn
;   } // starts at 883220
; } // starts at 8831D0
sub_8831D0 endp

align 10h


; Attributes: bp-based frame

sub_8832A0 proc near

Block= dword ptr -60h
var_4C= dword ptr -4Ch
var_48= dword ptr -48h
var_41= byte ptr -41h
var_40= dword ptr -40h
var_30= dword ptr -30h
var_2C= dword ptr -2Ch
lpPathName= dword ptr -28h
var_18= dword ptr -18h
var_14= dword ptr -14h
var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 00890E90 SIZE 0000004E BYTES

; __unwind { // SEH_4032A0
push    ebp
mov     ebp, esp
push    0FFFFFFFFh
push    offset SEH_4032A0
mov     eax, large fs:0
push    eax
sub     esp, 58h
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+var_10], eax
push    ebx
push    esi
push    eax
lea     eax, [ebp+var_C]
mov     large fs:0, eax
xor     ebx, ebx
mov     [ebp+var_48], ebx
cmp     [ecx+10h], ebx
jnz     short loc_8832DC
lea     eax, [ebx+1]
jmp     loc_8833F4

loc_8832DC:
xor     eax, eax
push    0FFFFFFFFh
push    eax
push    ecx
lea     ecx, [ebp+lpPathName]
mov     [ebp+var_14], 7
mov     [ebp+var_18], ebx
mov     word ptr [ebp+lpPathName], ax
call    sub_882360
lea     ecx, [ebp+lpPathName]
;   try {
mov     [ebp+var_4], 0
call    sub_882F50
cmp     [ebp+var_18], 3
jbe     short loc_883352
lea     ecx, [ebp+lpPathName]
call    sub_8831D0
test    eax, eax
jnz     short loc_883352
lea     edx, [ebp+lpPathName]
lea     ecx, [ebp+Block]
call    sub_8830D0
;   } // starts at 8832FB
;   try {
mov     byte ptr [ebp+var_4], 1
cmp     [ebp+var_14], 8
push    [ebp+var_18]
lea     ecx, [ebp+lpPathName]
cmovnb  ecx, [ebp+lpPathName]
push    ecx
push    dword ptr [eax+10h]
mov     ebx, 1
push    ecx
mov     ecx, eax
mov     [ebp+var_48], ebx
call    sub_884B70
mov     [ebp+var_41], 0
test    eax, eax
jnz     short loc_883356

loc_883352:
mov     [ebp+var_41], 1
;   } // starts at 883324

loc_883356:
;   try {
mov     [ebp+var_4], 0
test    bl, 1
jz      short loc_883373
cmp     [ebp+var_4C], 8
jb      short loc_883373
push    [ebp+Block]     ; Block
call    j__free
add     esp, 4

loc_883373:
cmp     [ebp+var_41], 0
jz      short loc_883380
mov     esi, 1
jmp     short loc_8833E1

loc_883380:
lea     edx, [ebp+lpPathName]
lea     ecx, [ebp+var_40]
call    sub_8830D0
lea     ecx, [ebp+var_40]
;   } // starts at 883356
;   try {
mov     byte ptr [ebp+var_4], 2
call    sub_8832A0
test    eax, eax
jz      short loc_8833BA
cmp     [ebp+var_14], 8
lea     eax, [ebp+lpPathName]
cmovnb  eax, [ebp+lpPathName]
push    0               ; lpSecurityAttributes
push    eax             ; lpPathName
call    ds:CreateDirectoryW
test    eax, eax
jz      short loc_8833BA
mov     esi, 1
jmp     short loc_8833BC

loc_8833BA:
xor     esi, esi

loc_8833BC:
cmp     [ebp+var_2C], 8
jb      short loc_8833CD
push    [ebp+var_40]    ; Block
call    j__free
add     esp, 4

loc_8833CD:
xor     eax, eax
mov     [ebp+var_2C], 7
mov     [ebp+var_30], 0
mov     word ptr [ebp+var_40], ax

loc_8833E1:
cmp     [ebp+var_14], 8
jb      short loc_8833F2
push    [ebp+lpPathName] ; Block
call    j__free
add     esp, 4

loc_8833F2:
mov     eax, esi

loc_8833F4:
mov     ecx, [ebp+var_C]
mov     large fs:0, ecx
pop     ecx
pop     esi
pop     ebx
mov     ecx, [ebp+var_10]
xor     ecx, ebp        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     esp, ebp
pop     ebp
retn
;   } // starts at 88338E
; } // starts at 8832A0
sub_8832A0 endp

align 10h


; Attributes: bp-based frame

sub_883410 proc near

Block= dword ptr -290h
var_280= dword ptr -280h
var_27C= dword ptr -27Ch
cbData= dword ptr -278h
phkResult= dword ptr -274h
Tm= tm ptr -270h
dwDisposition= dword ptr -24Ch
var_248= dword ptr -248h
lpData= dword ptr -23Ch
Time= qword ptr -238h
szLogFile= dword ptr -230h
var_220= dword ptr -220h
var_21C= dword ptr -21Ch
Buffer= word ptr -218h
VersionInformation= _OSVERSIONINFOW ptr -128h
var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 00884A80 SIZE 00000028 BYTES
; FUNCTION CHUNK AT 00890E10 SIZE 00000075 BYTES

; __unwind { // SEH_403410
push    ebp
mov     ebp, esp
push    0FFFFFFFFh
push    offset SEH_403410
mov     eax, large fs:0
push    eax
sub     esp, 288h
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+var_10], eax
push    ebx
push    esi             ; int
push    eax             ; int
lea     eax, [ebp+var_C]
mov     large fs:0, eax
mov     ebx, ecx
lea     eax, [ebp+dwDisposition]
push    eax             ; lpdwDisposition
lea     eax, [ebp+phkResult]
push    eax             ; phkResult
push    0               ; lpSecurityAttributes
push    2021Fh          ; samDesired
push    0               ; dwOptions
push    0               ; lpClass
push    0               ; Reserved
push    offset SubKey   ; "Software\\GM\\Setups"
push    80000001h       ; hKey
mov     [ebp+phkResult], 0
mov     [ebp+dwDisposition], 0
call    ds:RegCreateKeyExW
test    eax, eax
jnz     loc_8839B6
push    eax             ; int
push    offset unk_8974A4 ; Src
lea     ecx, [ebp+szLogFile]
mov     [ebp+var_21C], 7
mov     [ebp+var_220], eax
mov     word ptr [ebp+szLogFile], ax
call    sub_882490
;   try {
mov     [ebp+var_4], 0
cmp     [ebp+dwDisposition], 2
mov     [ebp+cbData], 0
jnz     loc_883590
lea     eax, [ebp+cbData]
push    eax             ; lpcbData
push    0               ; lpData
push    0               ; lpType
push    0               ; lpReserved
push    offset ValueName ; "Tech2WinInstallLogs"
push    [ebp+phkResult] ; hKey
call    ds:RegQueryValueExW
test    eax, eax
jnz     loc_883590
mov     eax, [ebp+cbData]
shr     eax, 1
inc     eax
push    eax
lea     ecx, [ebp+lpData]
mov     [ebp+lpData], 0
mov     dword ptr [ebp+Time], 0
mov     dword ptr [ebp+Time+4], 0
call    sub_884BF0
;   } // starts at 8834AE
;   try {
mov     byte ptr [ebp+var_4], 1
mov     esi, [ebp+lpData]
lea     eax, [ebp+cbData]
push    eax             ; lpcbData
push    esi             ; lpData
push    0               ; lpType
push    0               ; lpReserved
push    offset ValueName ; "Tech2WinInstallLogs"
push    [ebp+phkResult] ; hKey
call    ds:RegQueryValueExW
test    eax, eax
jnz     short loc_88357F
push    esi
lea     ecx, [ebp+Block]
call    sub_8820D0
push    eax             ; Src
lea     ecx, [ebp+szLogFile] ; void *
call    sub_8821A0
cmp     [ebp+var_27C], 8
jb      short loc_88357F
push    [ebp+Block]     ; Block
call    j__free
add     esp, 4
;   } // starts at 883525

loc_88357F:
;   try {
mov     byte ptr [ebp+var_4], 0
test    esi, esi
jz      short loc_883590
push    esi             ; Block
call    j__free
add     esp, 4

loc_883590:
cmp     [ebp+var_220], 0
jz      short loc_8835AC
lea     ecx, [ebp+szLogFile]
call    sub_8831D0
test    eax, eax
jnz     loc_883706

loc_8835AC:             ; Size
push    114h
lea     eax, [ebp+VersionInformation]
push    0               ; Val
push    eax             ; void *
call    _memset
add     esp, 0Ch
lea     eax, [ebp+VersionInformation]
push    eax             ; lpVersionInformation
mov     [ebp+VersionInformation.dwOSVersionInfoSize], 114h
call    ds:GetVersionExW
test    eax, eax
jz      short loc_8835EB
cmp     [ebp+VersionInformation.dwMajorVersion], 5
mov     edx, offset aAllusersprofil ; "%allusersprofile%"
jbe     short loc_8835F0

loc_8835EB:
mov     edx, offset aPublic ; "%PUBLIC%"

loc_8835F0:             ; void *
lea     ecx, [ebp+Block]
call    sub_882FE0
push    eax             ; Src
lea     ecx, [ebp+szLogFile] ; void *
call    sub_8821A0
cmp     [ebp+var_27C], 8
jb      short loc_88361E
push    [ebp+Block]     ; Block
call    j__free
add     esp, 4

loc_88361E:
cmp     [ebp+var_220], 0
jz      loc_883993
lea     ecx, [ebp+szLogFile]
call    sub_882EF0
push    offset aGeneralMotorsT ; "General Motors\\Tech2Win\\SetupLogs\\"
lea     ecx, [ebp+Block]
call    sub_8820D0
push    eax             ; int
lea     edx, [ebp+szLogFile]
lea     ecx, [ebp+var_248] ; void *
;   } // starts at 88357F
;   try {
mov     byte ptr [ebp+var_4], 2
call    sub_8829C0
add     esp, 4
lea     ecx, [ebp+szLogFile] ; void *
push    eax             ; Src
call    sub_8821A0
cmp     dword ptr [ebp+Time+4], 8
jb      short loc_883682
push    [ebp+var_248]   ; Block
call    j__free
add     esp, 4

loc_883682:
xor     eax, eax
;   } // starts at 883653
;   try {
mov     byte ptr [ebp+var_4], al
cmp     [ebp+var_27C], 8
mov     dword ptr [ebp+Time+4], 7
mov     dword ptr [ebp+Time], 0
mov     word ptr [ebp+var_248], ax
jb      short loc_8836B9
push    [ebp+Block]     ; Block
call    j__free
add     esp, 4

loc_8836B9:
lea     ecx, [ebp+szLogFile]
call    sub_8832A0
lea     ecx, [ebp+szLogFile]
call    sub_8831D0
test    eax, eax
jz      short loc_883706
cmp     [ebp+var_21C], 8
mov     eax, [ebp+var_220]
lea     ecx, [ebp+szLogFile]
cmovnb  ecx, [ebp+szLogFile]
add     eax, eax
push    eax             ; cbData
push    ecx             ; lpData
push    1               ; dwType
push    0               ; Reserved
push    offset ValueName ; "Tech2WinInstallLogs"
push    [ebp+phkResult] ; hKey
call    ds:RegSetValueExW

loc_883706:
cmp     [ebp+var_220], 0
jz      loc_883993
lea     ecx, [ebp+szLogFile]
call    sub_8831D0
test    eax, eax
jz      loc_883993
cmp     dword_89B074, 0
jnz     loc_8837EB
push    0               ; Time
call    __time64
mov     dword ptr [ebp+Time], eax
add     esp, 4
lea     eax, [ebp+Time]
push    eax             ; Time
lea     eax, [ebp+Tm]
push    eax             ; Tm
mov     dword ptr [ebp+Time+4], edx
call    __localtime64_s
push    208h            ; Size
lea     eax, [ebp+Buffer]
push    0               ; Val
push    eax             ; void *
call    _memset
mov     eax, [ebp+Tm.tm_mon]
add     esp, 14h
inc     eax
push    [ebp+Tm.tm_sec]
push    [ebp+Tm.tm_min]
push    [ebp+Tm.tm_hour]
push    [ebp+Tm.tm_mday]
push    eax
mov     eax, [ebp+Tm.tm_year]
add     eax, 76Ch
push    eax
push    offset Format   ; "%04d%02d%02d_%02d%02d%02d_"
lea     eax, [ebp+Buffer]
push    104h            ; BufferCount
push    eax             ; Buffer
call    _swprintf_s
add     esp, 24h
lea     eax, [ebp+Buffer]
push    eax
lea     ecx, [ebp+Block]
call    sub_8820D0
push    eax             ; Src
mov     ecx, offset dword_89B064 ; void *
call    sub_8821A0
cmp     [ebp+var_27C], 8
jb      short loc_8837EB
push    [ebp+Block]     ; Block
call    j__free
add     esp, 4

loc_8837EB:
lea     ecx, [ebp+Tm.tm_mday]
test    ebx, ebx
jz      loc_8838AC
push    offset aTech2winUninst ; "Tech2Win_uninstall.log"
call    sub_8820D0
mov     esi, eax
push    ecx
lea     edx, [ebp+szLogFile]
lea     ecx, [ebp+Block]
;   } // starts at 883684
;   try {
mov     byte ptr [ebp+var_4], 3
call    sub_884DC0
add     esp, 4
push    esi             ; int
mov     edx, eax
lea     ecx, [ebp+var_248] ; void *
;   } // starts at 883812
;   try {
mov     byte ptr [ebp+var_4], 4
call    sub_882A40
add     esp, 4
lea     ecx, [ebp+szLogFile] ; void *
push    eax             ; Src
call    sub_8821A0
cmp     dword ptr [ebp+Time+4], 8
jb      short loc_883856
push    [ebp+var_248]   ; Block
call    j__free
add     esp, 4

loc_883856:
xor     eax, eax
cmp     [ebp+var_27C], 8
mov     dword ptr [ebp+Time+4], 7
mov     dword ptr [ebp+Time], 0
mov     word ptr [ebp+var_248], ax
jb      short loc_88388A
push    [ebp+Block]     ; Block
call    j__free
add     esp, 4

loc_88388A:
xor     eax, eax
mov     [ebp+var_27C], 7
mov     [ebp+var_280], 0
mov     word ptr [ebp+Block], ax
jmp     loc_88395A

loc_8838AC:
push    offset aTech2winInstal ; "Tech2Win_install.log"
call    sub_8820D0
mov     esi, eax
push    ecx
lea     edx, [ebp+szLogFile]
lea     ecx, [ebp+var_248]
;   } // starts at 883827
;   try {
mov     byte ptr [ebp+var_4], 5
call    sub_884DC0
add     esp, 4
push    esi             ; int
mov     edx, eax
lea     ecx, [ebp+Block] ; void *
;   } // starts at 8838C5
;   try {
mov     byte ptr [ebp+var_4], 6
call    sub_882A40
add     esp, 4
lea     ecx, [ebp+szLogFile] ; void *
push    eax             ; Src
call    sub_8821A0
cmp     [ebp+var_27C], 8
jb      short loc_883909
push    [ebp+Block]     ; Block
call    j__free
add     esp, 4

loc_883909:
xor     eax, eax
cmp     dword ptr [ebp+Time+4], 8
mov     [ebp+var_27C], 7
mov     [ebp+var_280], 0
mov     word ptr [ebp+Block], ax
jb      short loc_88393D
push    [ebp+var_248]   ; Block
call    j__free
add     esp, 4

loc_88393D:
xor     eax, eax
mov     dword ptr [ebp+Time+4], 7
mov     dword ptr [ebp+Time], 0
mov     word ptr [ebp+var_248], ax

loc_88395A:
cmp     [ebp+Tm.tm_isdst], 8
jb      short loc_883971
push    [ebp+Tm.tm_mday] ; Block
call    j__free
add     esp, 4

loc_883971:
cmp     [ebp+var_21C], 8
lea     eax, [ebp+szLogFile]
cmovnb  eax, [ebp+szLogFile]
push    0               ; dwLogAttributes
push    eax             ; szLogFile
push    2E1Fh           ; dwLogMode
call    ds:MsiEnableLogW

loc_883993:             ; hKey
push    [ebp+phkResult]
call    ds:RegCloseKey
cmp     [ebp+var_21C], 8
jb      short loc_8839B6
push    [ebp+szLogFile] ; Block
call    j__free
add     esp, 4

loc_8839B6:
mov     ecx, [ebp+var_C]
mov     large fs:0, ecx
pop     ecx
pop     esi
pop     ebx
mov     ecx, [ebp+var_10]
xor     ecx, ebp        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     esp, ebp
pop     ebp
retn
;   } // starts at 8838DA
; } // starts at 883410
sub_883410 endp

align 10h


; Attributes: bp-based frame

sub_8839E0 proc near

Block= dword ptr -5Ch
var_48= dword ptr -48h
phkResult= dword ptr -44h
szPackagePath= dword ptr -40h
var_30= dword ptr -30h
var_2C= dword ptr -2Ch
szCommandLine= dword ptr -28h
var_18= dword ptr -18h
var_14= dword ptr -14h
var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 00890F80 SIZE 0000003D BYTES

; __unwind { // SEH_4039E0
push    ebp
mov     ebp, esp
push    0FFFFFFFFh
push    offset SEH_4039E0
mov     eax, large fs:0
push    eax
sub     esp, 50h
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+var_10], eax
push    esi
push    edi
push    eax
lea     eax, [ebp+var_C]
mov     large fs:0, eax
lea     ecx, [ebp+szPackagePath]
call    sub_882050
;   try {
mov     [ebp+var_4], 0
cmp     [ebp+var_30], 0
jbe     loc_883B90
xor     eax, eax
push    eax             ; int
push    offset unk_8974A4 ; Src
lea     ecx, [ebp+szCommandLine]
mov     [ebp+var_14], 7
mov     [ebp+var_18], 0
mov     word ptr [ebp+szCommandLine], ax
call    sub_882490
;   } // starts at 883A12
;   try {
mov     byte ptr [ebp+var_4], 1
mov     eax, dword_89C034
mov     ecx, 409h
lea     eax, [eax+eax*2]
cmp     ds:word_8977FC[eax*8], cx
jz      short loc_883A92
push    ecx
lea     ecx, [ebp+Block]
call    sub_884E80
add     esp, 4
push    0FFFFFFFFh
push    0
push    eax
lea     ecx, [ebp+szCommandLine]
;   } // starts at 883A45
;   try {
mov     byte ptr [ebp+var_4], 2
call    sub_882B00
;   } // starts at 883A74
;   try {
mov     byte ptr [ebp+var_4], 1
cmp     [ebp+var_48], 8
jb      short loc_883A92
push    [ebp+Block]     ; Block
call    j__free
add     esp, 4

loc_883A92:
xor     ecx, ecx
call    sub_883410
push    0               ; phWnd
push    5               ; dwUILevel
call    ds:MsiSetInternalUI
cmp     [ebp+var_14], 8
lea     ecx, [ebp+szCommandLine]
cmovnb  ecx, [ebp+szCommandLine]
cmp     [ebp+var_2C], 8
lea     eax, [ebp+szPackagePath]
cmovnb  eax, [ebp+szPackagePath]
push    ecx             ; szCommandLine
push    eax             ; szPackagePath
call    ds:MsiInstallProductW
mov     esi, eax
test    esi, esi
jnz     loc_883B7D
cmp     dword_89B05C, eax
jz      loc_883B60
lea     eax, [ebp+phkResult]
push    eax             ; phkResult
push    2001Fh          ; samDesired
push    esi             ; ulOptions
push    offset aSoftwareGmTech ; "SOFTWARE\\GM\\TECH2Win"
push    80000002h       ; hKey
call    ds:RegOpenKeyExW
test    eax, eax
jnz     short loc_883B60
mov     eax, dword_89C034
push    5               ; MaxCount
lea     eax, [eax+eax*2]
push    offset String2  ; "id-ID"
lea     eax, String1[eax*8] ; "en-US"
push    eax             ; String1
call    __wcsnicmp
add     esp, 0Ch
mov     edi, offset lpData
test    eax, eax
jnz     short loc_883B29
push    offset a1057    ; "1057"
mov     ecx, edi
call    sub_882250

loc_883B29:
mov     eax, dword_89B05C
cmp     dword_89B060, 8
lea     eax, ds:2[eax*2]
cmovnb  edi, lpData
push    eax             ; cbData
push    edi             ; lpData
push    1               ; dwType
push    0               ; Reserved
push    offset aLanguage ; "Language"
push    [ebp+phkResult] ; hKey
call    ds:RegSetValueExW
push    [ebp+phkResult] ; hKey
call    ds:RegCloseKey

loc_883B60:             ; lpdwResult
push    0
push    1388h           ; uTimeout
push    2               ; fuFlags
push    offset aEnvironment ; "Environment"
push    0               ; wParam
push    1Ah             ; Msg
push    0FFFFh          ; hWnd
call    ds:SendMessageTimeoutW

loc_883B7D:
cmp     [ebp+var_14], 8
jb      short loc_883B95
push    [ebp+szCommandLine] ; Block
call    j__free
add     esp, 4
jmp     short loc_883B95

loc_883B90:
mov     esi, 1

loc_883B95:
cmp     [ebp+var_2C], 8
jb      short loc_883BA6
push    [ebp+szPackagePath] ; Block
call    j__free
add     esp, 4

loc_883BA6:
mov     eax, esi
mov     ecx, [ebp+var_C]
mov     large fs:0, ecx
pop     ecx
pop     edi
pop     esi
mov     ecx, [ebp+var_10]
xor     ecx, ebp        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     esp, ebp
pop     ebp
retn
;   } // starts at 883A7D
; } // starts at 8839E0
sub_8839E0 endp

align 10h


; Attributes: bp-based frame

; int __usercall sub_883BD0@<eax>(LPCWSTR lpFileName@<ecx>, int)
sub_883BD0 proc near

var_674= dword ptr -674h
Source= dword ptr -670h
FindFileData= _WIN32_FIND_DATAW ptr -66Ch
NewFileName= word ptr -41Ch
ExistingFileName= word ptr -214h
var_8= dword ptr -8
arg_0= dword ptr  8

push    ebp
mov     ebp, esp
sub     esp, 678h
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+var_8], eax
mov     eax, [ebp+arg_0]
push    ebx
push    esi
push    edi
mov     [ebp+var_674], eax
lea     eax, [ebp+FindFileData]
push    eax             ; lpFindFileData
push    ecx             ; lpFileName
mov     [ebp+Source], edx
call    ds:FindFirstFileW
mov     ebx, eax
cmp     ebx, 0FFFFFFFFh
jz      loc_883D54
mov     esi, ds:GetFileAttributesW
mov     edi, ds:SetFileAttributesW
lea     ebx, [ebx+0]

loc_883C20:             ; MaxCount
push    0FFFFFFFFh
push    [ebp+Source]    ; Source
lea     eax, [ebp+ExistingFileName]
push    104h            ; SizeInWords
push    eax             ; Destination
call    _wcsncpy_s
push    0FFFFFFFFh      ; MaxCount
push    offset Src      ; "\\"
lea     eax, [ebp+ExistingFileName]
push    104h            ; SizeInWords
push    eax             ; Destination
call    _wcsncat_s
push    0FFFFFFFFh      ; MaxCount
lea     eax, [ebp+FindFileData.cFileName]
push    eax             ; Source
lea     eax, [ebp+ExistingFileName]
push    104h            ; SizeInWords
push    eax             ; Destination
call    _wcsncat_s
push    0FFFFFFFFh      ; MaxCount
push    [ebp+var_674]   ; Source
lea     eax, [ebp+NewFileName]
push    104h            ; SizeInWords
push    eax             ; Destination
call    _wcsncpy_s
add     esp, 40h
lea     eax, [ebp+NewFileName]
push    0FFFFFFFFh      ; MaxCount
push    offset Src      ; "\\"
push    104h            ; SizeInWords
push    eax             ; Destination
call    _wcsncat_s
push    0FFFFFFFFh      ; MaxCount
lea     eax, [ebp+FindFileData.cFileName]
push    eax             ; Source
lea     eax, [ebp+NewFileName]
push    104h            ; SizeInWords
push    eax             ; Destination
call    _wcsncat_s
add     esp, 20h
lea     eax, [ebp+NewFileName]
push    0Bh             ; dwFlags
push    eax             ; lpNewFileName
lea     eax, [ebp+ExistingFileName]
push    eax             ; lpExistingFileName
call    ds:MoveFileExW
test    eax, eax
jnz     short loc_883D3E
call    ds:GetLastError
cmp     eax, 5
jnz     short loc_883D3E
lea     eax, [ebp+NewFileName]
push    eax             ; lpFileName
call    esi ; GetFileAttributesW
cmp     eax, 0FFFFFFFFh
jz      short loc_883CFC
and     eax, 0FFFFFFFEh
push    eax             ; dwFileAttributes
lea     eax, [ebp+NewFileName]
push    eax             ; lpFileName
call    edi ; SetFileAttributesW

loc_883CFC:             ; bFailIfExists
push    0
lea     eax, [ebp+NewFileName]
push    eax             ; lpNewFileName
lea     eax, [ebp+ExistingFileName]
push    eax             ; lpExistingFileName
call    ds:CopyFileW
test    eax, eax
jz      short loc_883D3E
lea     eax, [ebp+ExistingFileName]
push    eax             ; lpFileName
call    esi ; GetFileAttributesW
cmp     eax, 0FFFFFFFFh
jz      short loc_883D31
and     eax, 0FFFFFFFEh
push    eax             ; dwFileAttributes
lea     eax, [ebp+ExistingFileName]
push    eax             ; lpFileName
call    edi ; SetFileAttributesW

loc_883D31:
lea     eax, [ebp+ExistingFileName]
push    eax             ; lpFileName
call    ds:DeleteFileW

loc_883D3E:
lea     eax, [ebp+FindFileData]
push    eax             ; lpFindFileData
push    ebx             ; hFindFile
call    ds:FindNextFileW
test    eax, eax
jnz     loc_883C20

loc_883D54:             ; hFindFile
push    ebx
call    ds:FindClose
mov     ecx, [ebp+var_8]
pop     edi
pop     esi
xor     ecx, ebp        ; StackCookie
pop     ebx
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     esp, ebp
pop     ebp
retn
sub_883BD0 endp

align 10h


; Attributes: bp-based frame

sub_883D70 proc near

lpData= dword ptr -18h
var_14= dword ptr -14h
phkResult= dword ptr -10h
hKey= dword ptr -0Ch
cbData= dword ptr -8
var_4= dword ptr -4

push    ebp
mov     ebp, esp
sub     esp, 18h
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+var_4], eax
push    ebx
mov     ebx, ecx
push    edi
mov     eax, [ebx]
mov     edi, ds:RegOpenKeyExW
mov     [ebp+cbData], eax
lea     eax, [ebp+phkResult]
push    eax             ; phkResult
push    20019h          ; samDesired
push    0               ; ulOptions
push    offset aSoftware ; "Software"
push    80000002h       ; hKey
mov     [ebp+lpData], edx
mov     dword ptr [ebx], 0
call    edi ; RegOpenKeyExW
test    eax, eax
jnz     short loc_883E1E
push    esi
lea     eax, [ebp+hKey]
push    eax             ; phkResult
push    20019h          ; samDesired
push    0               ; ulOptions
push    offset aGm      ; "GM"
push    [ebp+phkResult] ; hKey
call    edi ; RegOpenKeyExW
mov     esi, ds:RegCloseKey
test    eax, eax
jnz     short loc_883E18
lea     eax, [ebp+var_14]
push    eax             ; phkResult
push    20019h          ; samDesired
push    0               ; ulOptions
push    offset aTech2win ; "Tech2Win"
push    [ebp+hKey]      ; hKey
call    edi ; RegOpenKeyExW
test    eax, eax
jnz     short loc_883E13
lea     eax, [ebp+cbData]
push    eax             ; lpcbData
push    [ebp+lpData]    ; lpData
push    0               ; lpType
push    0               ; lpReserved
push    offset aApplicationpub ; "ApplicationPublic"
push    [ebp+var_14]    ; hKey
call    ds:RegQueryValueExW
test    eax, eax
jnz     short loc_883E0E
mov     eax, [ebp+cbData]
mov     [ebx], eax

loc_883E0E:             ; hKey
push    [ebp+var_14]
call    esi ; RegCloseKey

loc_883E13:             ; hKey
push    [ebp+hKey]
call    esi ; RegCloseKey

loc_883E18:             ; hKey
push    [ebp+phkResult]
call    esi ; RegCloseKey
pop     esi

loc_883E1E:
mov     ecx, [ebp+var_4]
pop     edi
xor     ecx, ebp        ; StackCookie
pop     ebx
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     esp, ebp
pop     ebp
retn
sub_883D70 endp

align 10h


; Attributes: bp-based frame

sub_883E30 proc near

var_A34= dword ptr -0A34h
Buffer= word ptr -0A30h
Source= word ptr -828h
FileName= word ptr -620h
Destination= word ptr -418h
PathName= word ptr -210h
var_4= dword ptr -4

push    ebp
mov     ebp, esp
sub     esp, 0A38h
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+var_4], eax
push    esi
push    edi
lea     eax, [ebp+Buffer]
push    eax             ; lpBuffer
push    104h            ; nBufferLength
call    ds:GetTempPathW
test    eax, eax
jz      loc_88407D
lea     edx, [ebp+Source]
lea     ecx, [ebp+var_A34]
mov     [ebp+var_A34], 104h
call    sub_883D70
cmp     [ebp+var_A34], 0
jz      loc_88407D
push    0FFFFFFFFh      ; MaxCount
lea     eax, [ebp+Source]
push    eax             ; Source
lea     eax, [ebp+Destination]
push    104h            ; SizeInWords
push    eax             ; Destination
call    _wcsncpy_s
push    0FFFFFFFFh      ; MaxCount
push    offset aPcmcia  ; "\\pcmcia"
lea     eax, [ebp+Destination]
push    104h            ; SizeInWords
push    eax             ; Destination
call    _wcsncat_s
push    0FFFFFFFFh      ; MaxCount
lea     eax, [ebp+Destination]
push    eax             ; Source
lea     eax, [ebp+FileName]
push    104h            ; SizeInWords
push    eax             ; Destination
call    _wcsncpy_s
push    0FFFFFFFFh      ; MaxCount
push    offset aBin     ; "\\*.bin"
lea     eax, [ebp+FileName]
push    104h            ; SizeInWords
push    eax             ; Destination
call    _wcsncat_s
add     esp, 40h
lea     eax, [ebp+Buffer]
push    0FFFFFFFFh      ; MaxCount
push    eax             ; Source
lea     eax, [ebp+PathName]
push    104h            ; SizeInWords
push    eax             ; Destination
call    _wcsncpy_s
push    0FFFFFFFFh      ; MaxCount
push    offset aT2wbak  ; "\\$T2WBAK$"
lea     eax, [ebp+PathName]
push    104h            ; SizeInWords
push    eax             ; Destination
call    _wcsncat_s
mov     edi, ds:CreateDirectoryW
add     esp, 20h
lea     eax, [ebp+PathName]
push    0               ; lpSecurityAttributes
push    eax             ; lpPathName
call    edi ; CreateDirectoryW
mov     esi, ds:GetLastError
test    eax, eax
jnz     short loc_883F5C
call    esi ; GetLastError
cmp     eax, 0B7h
jz      short loc_883F5C

loc_883F47:
mov     eax, 643h
pop     edi
pop     esi
mov     ecx, [ebp+var_4]
xor     ecx, ebp        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     esp, ebp
pop     ebp
retn

loc_883F5C:             ; MaxCount
push    0FFFFFFFFh
push    offset aPcmcia  ; "\\pcmcia"
lea     eax, [ebp+PathName]
push    104h            ; SizeInWords
push    eax             ; Destination
call    _wcsncat_s
add     esp, 10h
lea     eax, [ebp+PathName]
push    0               ; lpSecurityAttributes
push    eax             ; lpPathName
call    edi ; CreateDirectoryW
test    eax, eax
jnz     short loc_883F8F
call    esi ; GetLastError
cmp     eax, 0B7h
jnz     short loc_883F47

loc_883F8F:
lea     eax, [ebp+PathName]
push    eax             ; int
lea     edx, [ebp+Destination]
lea     ecx, [ebp+FileName] ; lpFileName
call    sub_883BD0
add     esp, 4
lea     eax, [ebp+Source]
push    0FFFFFFFFh      ; MaxCount
push    eax             ; Source
lea     eax, [ebp+Destination]
push    104h            ; SizeInWords
push    eax             ; Destination
call    _wcsncpy_s
push    0FFFFFFFFh      ; MaxCount
push    offset aConfig  ; "\\config"
lea     eax, [ebp+Destination]
push    104h            ; SizeInWords
push    eax             ; Destination
call    _wcsncat_s
push    0FFFFFFFFh      ; MaxCount
lea     eax, [ebp+Destination]
push    eax             ; Source
lea     eax, [ebp+FileName]
push    104h            ; SizeInWords
push    eax             ; Destination
call    _wcsncpy_s
push    0FFFFFFFFh      ; MaxCount
push    offset aConf    ; "\\*.conf"
lea     eax, [ebp+FileName]
push    104h            ; SizeInWords
push    eax             ; Destination
call    _wcsncat_s
add     esp, 40h
lea     eax, [ebp+Buffer]
push    0FFFFFFFFh      ; MaxCount
push    eax             ; Source
lea     eax, [ebp+PathName]
push    104h            ; SizeInWords
push    eax             ; Destination
call    _wcsncpy_s
push    0FFFFFFFFh      ; MaxCount
push    offset aT2wbakConfig ; "\\$T2WBAK$\\config"
lea     eax, [ebp+PathName]
push    104h            ; SizeInWords
push    eax             ; Destination
call    _wcsncat_s
add     esp, 20h
lea     eax, [ebp+PathName]
push    0               ; lpSecurityAttributes
push    eax             ; lpPathName
call    edi ; CreateDirectoryW
test    eax, eax
jnz     short loc_884062
call    esi ; GetLastError
cmp     eax, 0B7h
jnz     loc_883F47

loc_884062:
lea     eax, [ebp+PathName]
push    eax             ; int
lea     edx, [ebp+Destination]
lea     ecx, [ebp+FileName] ; lpFileName
call    sub_883BD0
add     esp, 4

loc_88407D:
mov     ecx, [ebp+var_4]
pop     edi
xor     ecx, ebp        ; StackCookie
xor     eax, eax
pop     esi
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     esp, ebp
pop     ebp
retn
sub_883E30 endp

align 10h


; Attributes: bp-based frame

sub_884090 proc near

dwUILevel= dword ptr -4

push    ebp
mov     ebp, esp
sub     esp, 8
push    esi
push    edi
push    0               ; phWnd
push    3               ; dwUILevel
call    ds:MsiSetInternalUI
mov     [ebp+dwUILevel], eax
call    sub_883E30
mov     esi, Block
cmp     esi, dword_89C044
jz      short loc_8840ED
mov     edi, ds:MsiConfigureProductExW
mov     edi, edi

loc_8840C0:
mov     ecx, 1
call    sub_883410
cmp     dword ptr [esi+14h], 8
jb      short loc_8840D4
mov     eax, [esi]
jmp     short loc_8840D6

loc_8840D4:
mov     eax, esi

loc_8840D6:
push    offset unk_8974A4
push    2
push    0
push    eax
call    edi
add     esi, 18h
cmp     esi, dword_89C044
jnz     short loc_8840C0

loc_8840ED:             ; phWnd
push    0
push    [ebp+dwUILevel] ; dwUILevel
call    ds:MsiSetInternalUI
pop     edi
pop     esi
mov     esp, ebp
pop     ebp
retn
sub_884090 endp

align 10h


; Attributes: bp-based frame fuzzy-sp

; int __stdcall wWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPWSTR lpCmdLine, int nShowCmd)
_wWinMain@16 proc near

picce= INITCOMMONCONTROLSEX ptr -0Ch
var_4= dword ptr -4
hInstance= dword ptr  8
hPrevInstance= dword ptr  0Ch
lpCmdLine= dword ptr  10h
nShowCmd= dword ptr  14h

push    ebp
mov     ebp, esp
and     esp, 0FFFFFFF8h
sub     esp, 0Ch
mov     eax, ___security_cookie
xor     eax, esp
mov     [esp+0Ch+var_4], eax
push    esi
mov     esi, [ebp+hInstance]
lea     eax, [esp+10h+picce]
push    eax             ; picce
mov     hInstance, esi
mov     cInitial, 1Dh
mov     [esp+14h+picce.dwSize], 8
mov     [esp+14h+picce.dwICC], 4000h
call    ds:InitCommonControlsEx
push    0               ; dwInitParam
push    offset DialogFunc ; lpDialogFunc
push    0               ; hWndParent
push    83h             ; lpTemplateName
push    esi             ; hInstance
call    ds:DialogBoxParamW
test    eax, eax
jle     short loc_884181
cmp     dword_89C02C, 0
jz      short loc_88416A
call    sub_884090

loc_88416A:
call    sub_8839E0
pop     esi
mov     ecx, [esp+0Ch+var_4]
xor     ecx, esp        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     esp, ebp
pop     ebp
retn    10h

loc_884181:
mov     ecx, [esp+10h+var_4]
pop     esi
xor     ecx, esp        ; StackCookie
mov     eax, 2
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     esp, ebp
pop     ebp
retn    10h
_wWinMain@16 endp

align 10h


; Attributes: bp-based frame

; int __thiscall sub_8841A0(HWND hDlg)
sub_8841A0 proc near

Buffer= word ptr -194h
var_4= dword ptr -4

push    ebp
mov     ebp, esp
sub     esp, 194h
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+var_4], eax
push    ebx
mov     ebx, ds:LoadStringW
push    esi
push    edi
push    0C8h            ; cchBufferMax
lea     eax, [ebp+Buffer]
push    eax             ; lpBuffer
push    12Ch            ; uID
push    hInstance       ; hInstance
mov     esi, ecx
call    ebx ; LoadStringW
mov     edi, ds:SetWindowTextW
test    eax, eax
jle     short loc_8841EB
lea     eax, [ebp+Buffer]
push    eax             ; lpString
push    esi             ; hWnd
call    edi ; SetWindowTextW

loc_8841EB:             ; cchBufferMax
push    0C8h
lea     eax, [ebp+Buffer]
push    eax             ; lpBuffer
push    12Dh            ; uID
push    hInstance       ; hInstance
call    ebx ; LoadStringW
mov     ebx, ds:GetDlgItem
test    eax, eax
jle     short loc_88421D
lea     eax, [ebp+Buffer]
push    eax             ; lpString
push    1               ; nIDDlgItem
push    esi             ; hDlg
call    ebx ; GetDlgItem
push    eax             ; hWnd
call    edi ; SetWindowTextW

loc_88421D:             ; cchBufferMax
push    0C8h
lea     eax, [ebp+Buffer]
push    eax             ; lpBuffer
push    12Eh            ; uID
push    hInstance       ; hInstance
call    ds:LoadStringW
test    eax, eax
jle     short loc_88424D
lea     eax, [ebp+Buffer]
push    eax             ; lpString
push    2               ; nIDDlgItem
push    esi             ; hDlg
call    ebx ; GetDlgItem
push    eax             ; hWnd
call    edi ; SetWindowTextW

loc_88424D:             ; cchBufferMax
push    0C8h
lea     eax, [ebp+Buffer]
push    eax             ; lpBuffer
push    12Fh            ; uID
push    hInstance       ; hInstance
call    ds:LoadStringW
test    eax, eax
jle     short loc_884280
lea     eax, [ebp+Buffer]
push    eax             ; lpString
push    3E8h            ; nIDDlgItem
push    esi             ; hDlg
call    ebx ; GetDlgItem
push    eax             ; hWnd
call    edi ; SetWindowTextW

loc_884280:             ; cchBufferMax
push    0C8h
lea     eax, [ebp+Buffer]
push    eax             ; lpBuffer
push    130h            ; uID
push    hInstance       ; hInstance
call    ds:LoadStringW
test    eax, eax
jle     short loc_8842B3
lea     eax, [ebp+Buffer]
push    eax             ; lpString
push    3EBh            ; nIDDlgItem
push    esi             ; hDlg
call    ebx ; GetDlgItem
push    eax             ; hWnd
call    edi ; SetWindowTextW

loc_8842B3:
mov     ecx, [ebp+var_4]
pop     edi
pop     esi
xor     ecx, ebp        ; StackCookie
pop     ebx
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     esp, ebp
pop     ebp
retn
sub_8841A0 endp

align 10h


; Attributes: bp-based frame

; int __usercall sub_8842D0@<eax>(void *@<ecx>, int, int)
sub_8842D0 proc near

var_4C= dword ptr -4Ch
Block= dword ptr -48h
var_38= dword ptr -38h
var_34= dword ptr -34h
LCData= word ptr -30h
var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 00890EE0 SIZE 0000002D BYTES

; __unwind { // SEH_4042D0
push    ebp
mov     ebp, esp
push    0FFFFFFFFh
push    offset SEH_4042D0
mov     eax, large fs:0
push    eax
sub     esp, 40h
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+var_10], eax
push    esi
push    edi
push    eax
lea     eax, [ebp+var_C]
mov     large fs:0, eax
mov     esi, ecx
mov     [ebp+var_4C], 0
call    ds:GetUserDefaultUILanguage
movzx   edi, ax
xor     eax, eax
mov     [ebp+var_34], 7
mov     [ebp+var_38], 0
mov     word ptr [ebp+Block], ax
push    10h             ; cchData
;   try {
mov     [ebp+var_4], eax
lea     eax, [ebp+LCData]
push    eax             ; lpLCData
push    59h ; 'Y'       ; LCType
push    edi             ; Locale
call    ds:GetLocaleInfoW
test    eax, eax
jz      loc_8843C9
cmp     [ebp+LCData], 0
jnz     short loc_884345
xor     ecx, ecx
jmp     short loc_88435F

loc_884345:
lea     ecx, [ebp+LCData]
lea     edx, [ecx+2]
jmp     short loc_884350
align 10h

loc_884350:
mov     ax, [ecx]
add     ecx, 2
test    ax, ax
jnz     short loc_884350
sub     ecx, edx
sar     ecx, 1

loc_88435F:             ; int
push    ecx
lea     eax, [ebp+LCData]
push    eax             ; Src
lea     ecx, [ebp+Block]
call    sub_882490
push    10h             ; cchData
lea     eax, [ebp+LCData]
push    eax             ; lpLCData
push    5Ah ; 'Z'       ; LCType
push    edi             ; Locale
call    ds:GetLocaleInfoW
test    eax, eax
jz      short loc_8843C9
push    1               ; int
push    offset asc_8977BC ; "-"
lea     ecx, [ebp+Block]
call    sub_882C10
cmp     [ebp+LCData], 0
jnz     short loc_884399
xor     ecx, ecx
jmp     short loc_8843AF

loc_884399:
lea     ecx, [ebp+LCData]
lea     edx, [ecx+2]
nop

loc_8843A0:
mov     ax, [ecx]
add     ecx, 2
test    ax, ax
jnz     short loc_8843A0
sub     ecx, edx
sar     ecx, 1

loc_8843AF:             ; int
push    ecx
lea     eax, [ebp+LCData]
push    eax             ; Src
lea     ecx, [ebp+Block]
call    sub_882C10
lea     eax, [ebp+Block]
push    eax             ; Src
mov     ecx, esi        ; void *
call    sub_882130
jmp     short loc_8843E9

loc_8843C9:
xor     eax, eax
push    eax             ; int
mov     dword ptr [esi+14h], 7
mov     dword ptr [esi+10h], 0
push    offset unk_8974A4 ; Src
mov     ecx, esi
mov     [esi], ax
call    sub_882490

loc_8843E9:
cmp     [ebp+var_34], 8
jb      short loc_8843FA
push    [ebp+Block]     ; Block
call    j__free
add     esp, 4

loc_8843FA:
mov     eax, esi
mov     ecx, [ebp+var_C]
mov     large fs:0, ecx
pop     ecx
pop     edi
pop     esi
mov     ecx, [ebp+var_10]
xor     ecx, ebp        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     esp, ebp
pop     ebp
retn
;   } // starts at 884322
; } // starts at 8842D0
sub_8842D0 endp

align 10h


; Attributes: bp-based frame

sub_884420 proc near

hWnd= dword ptr -44h
lParam= dword ptr -40h
var_3C= dword ptr -3Ch
var_38= dword ptr -38h
var_30= dword ptr -30h
var_2C= dword ptr -2Ch
String2= dword ptr -1Ch
var_8= dword ptr -8
var_4= dword ptr -4

push    ebp
mov     ebp, esp
sub     esp, 44h
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+var_4], eax
push    ebx
push    esi             ; int
push    edi             ; int
mov     [ebp+hWnd], ecx
call    ds:InitCommonControls
push    0               ; cGrow
push    cInitial        ; cInitial
push    18h             ; flags
push    0Bh             ; cy
push    10h             ; cx
call    ds:ImageList_Create
mov     ecx, ds:SendMessageW
xor     esi, esi
mov     ebx, eax
mov     [ebp+lParam], 7
cmp     cInitial, esi
jle     short loc_8844BB
mov     edi, offset unk_8977F8
mov     edi, edi

loc_884470:
mov     eax, [edi-4]
mov     [ebp+var_38], eax
lea     eax, [ebp+lParam]
push    eax             ; lParam
push    0               ; wParam
push    40Bh            ; Msg
push    [ebp+hWnd]      ; hWnd
mov     [ebp+var_3C], esi
mov     [ebp+var_30], esi
mov     [ebp+var_2C], esi
call    ecx ; SendMessageW
movzx   eax, word ptr [edi]
push    0               ; hbmMask
push    eax             ; lpBitmapName
push    hInstance       ; hInstance
call    ds:LoadBitmapW
push    eax             ; hbmImage
push    ebx             ; himl
call    ds:ImageList_Add
mov     ecx, ds:SendMessageW
inc     esi
lea     edi, [edi+18h]
cmp     esi, cInitial
jl      short loc_884470

loc_8844BB:             ; lParam
push    ebx
push    0               ; wParam
push    402h            ; Msg
push    [ebp+hWnd]      ; hWnd
call    ecx ; SendMessageW
lea     ecx, [ebp+String2] ; void *
call    sub_8842D0
cmp     [ebp+var_8], 8
mov     eax, cInitial
lea     ebx, [ebp+String2]
cmovnb  ebx, [ebp+String2]
xor     esi, esi
test    eax, eax
jle     short loc_88451D
mov     edi, offset String1 ; "en-US"
jmp     short loc_8844F0
align 10h

loc_8844F0:             ; MaxCount
push    5
push    ebx             ; String2
push    edi             ; String1
call    __wcsnicmp
add     esp, 0Ch
test    eax, eax
jz      short loc_88450F
mov     eax, cInitial
inc     esi
add     edi, 18h
cmp     esi, eax
jl      short loc_8844F0
jmp     short loc_88451D

loc_88450F:
cmp     esi, 0FFFFFFFFh
jnz     loc_8845C9
mov     eax, cInitial

loc_88451D:
cmp     [ebp+var_8], 8
lea     ebx, [ebp+String2]
cmovnb  ebx, [ebp+String2]
xor     esi, esi
test    eax, eax
jle     short loc_88455C
mov     edi, offset String1 ; "en-US"

loc_884533:             ; MaxCount
push    2
push    ebx             ; String2
push    edi             ; String1
call    __wcsnicmp
add     esp, 0Ch
test    eax, eax
jz      short loc_884552
mov     eax, cInitial
inc     esi
add     edi, 18h
cmp     esi, eax
jl      short loc_884533
jmp     short loc_88455C

loc_884552:
cmp     esi, 0FFFFFFFFh
jnz     short loc_8845C9
mov     eax, cInitial

loc_88455C:
xor     esi, esi
test    eax, eax
jle     short loc_884594
mov     edi, offset String1 ; "en-US"

loc_884567:             ; MaxCount
push    2
push    offset aEn      ; "en"
push    edi             ; String1
call    __wcsnicmp
add     esp, 0Ch
test    eax, eax
jz      short loc_88458A
mov     eax, cInitial
inc     esi
add     edi, 18h
cmp     esi, eax
jl      short loc_884567
jmp     short loc_884594

loc_88458A:
cmp     esi, 0FFFFFFFFh
jnz     short loc_8845C9
mov     eax, cInitial

loc_884594:
xor     esi, esi
test    eax, eax
jle     short loc_8845C7
mov     edi, offset String1 ; "en-US"
nop

loc_8845A0:             ; MaxCount
push    2
push    offset aDe      ; "de"
push    edi             ; String1
call    __wcsnicmp
add     esp, 0Ch
test    eax, eax
jz      short loc_8845C2
inc     esi
add     edi, 18h
cmp     esi, cInitial
jl      short loc_8845A0
jmp     short loc_8845C7

loc_8845C2:
cmp     esi, 0FFFFFFFFh
jnz     short loc_8845C9

loc_8845C7:
xor     esi, esi

loc_8845C9:
cmp     [ebp+var_8], 8
jb      short loc_8845DA
push    [ebp+String2]   ; Block
call    j__free
add     esp, 4

loc_8845DA:             ; lParam
push    0
push    esi             ; wParam
push    14Eh            ; Msg
push    [ebp+hWnd]      ; hWnd
mov     dword_89C034, esi
call    ds:SendMessageW
mov     ecx, [ebp+var_4]
pop     edi
pop     esi
xor     ecx, ebp        ; StackCookie
pop     ebx
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     esp, ebp
pop     ebp
retn
sub_884420 endp

align 10h


; Attributes: bp-based frame

sub_884610 proc near

Src= dword ptr -7Ch
var_6C= dword ptr -6Ch
var_68= dword ptr -68h
hProduct= dword ptr -64h
ProductBuf= word ptr -60h
var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 00890F50 SIZE 00000030 BYTES

; __unwind { // SEH_404610
push    ebp
mov     ebp, esp
push    0FFFFFFFFh
push    offset SEH_404610
mov     eax, large fs:0
push    eax
sub     esp, 74h
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+var_10], eax
push    ebx
push    esi
push    edi
push    eax
lea     eax, [ebp+var_C]
mov     large fs:0, eax
mov     dword_89C02C, 0
xor     ebx, ebx

loc_884647:             ; Size
push    4Eh ; 'N'
lea     eax, [ebp+ProductBuf]
push    0               ; Val
push    eax             ; void *
call    _memset
add     esp, 0Ch
lea     eax, [ebp+ProductBuf]
push    eax             ; lpProductBuf
push    ebx             ; iProductIndex
push    0               ; dwReserved
push    offset UpgradeCode ; "{78D630C6-9EFC-439B-87B9-B0AA6E5848BE}"
call    ds:MsiEnumRelatedProductsW
test    eax, eax
jnz     loc_8847CE
mov     [ebp+hProduct], eax
lea     eax, [ebp+hProduct]
push    eax             ; hProduct
lea     eax, [ebp+ProductBuf]
push    eax             ; szProduct
call    ds:MsiOpenProductW
test    eax, eax
jnz     loc_8847C8
mov     esi, Block
mov     [ebp+var_68], 7
mov     [ebp+var_6C], eax
mov     word ptr [ebp+Src], ax
cmp     [ebp+ProductBuf], ax
jz      short loc_8846BF
lea     eax, [ebp+ProductBuf]
lea     edx, [eax+2]
lea     ebx, [ebx+0]

loc_8846B0:
mov     cx, [eax]
add     eax, 2
test    cx, cx
jnz     short loc_8846B0
sub     eax, edx
sar     eax, 1

loc_8846BF:             ; int
push    eax
lea     eax, [ebp+ProductBuf]
push    eax             ; Src
lea     ecx, [ebp+Src]
call    sub_882490
;   try {
mov     [ebp+var_4], 0
sub     esi, Block
mov     eax, 2AAAAAABh
imul    esi
mov     esi, dword_89C044
sar     edx, 2
mov     edi, edx
shr     edi, 1Fh
add     edi, edx
cmp     esi, dword_89C048
jnz     short loc_884704
push    ecx
call    sub_884F40
mov     esi, dword_89C044

loc_884704:
test    esi, esi
jz      short loc_884772
mov     dword ptr [esi+10h], 0
xor     eax, eax
mov     dword ptr [esi+14h], 7
mov     dword ptr [esi+10h], 0
mov     [esi], ax
cmp     [ebp+var_68], 8
jnb     short loc_884740
mov     eax, [ebp+var_6C]
inc     eax
jz      short loc_88474C
add     eax, eax
push    eax             ; Size
lea     eax, [ebp+Src]
push    eax             ; Src
push    esi             ; void *
call    _memmove
add     esp, 0Ch
jmp     short loc_88474C

loc_884740:
mov     eax, [ebp+Src]
mov     [esi], eax
mov     [ebp+Src], 0

loc_88474C:
mov     eax, [ebp+var_6C]
mov     [esi+10h], eax
mov     eax, [ebp+var_68]
mov     [esi+14h], eax
mov     esi, dword_89C044
xor     eax, eax
mov     [ebp+var_68], 7
mov     [ebp+var_6C], 0
mov     word ptr [ebp+Src], ax

loc_884772:
mov     eax, Block
add     esi, 18h
lea     ecx, [edi+edi*2]
lea     edx, [esi-18h]
lea     ecx, [eax+ecx*8]
mov     dword_89C044, esi
cmp     ecx, edx
jz      short loc_88479D
cmp     edx, esi
jz      short loc_88479D
sub     esp, 8
push    esi
call    sub_8850A0
add     esp, 0Ch
;   } // starts at 8846CC

loc_88479D:
mov     [ebp+var_4], 0FFFFFFFFh
cmp     [ebp+var_68], 8
jb      short loc_8847B5
push    [ebp+Src]       ; Block
call    j__free
add     esp, 4

loc_8847B5:             ; hAny
push    [ebp+hProduct]
mov     dword_89C02C, 1
call    ds:MsiCloseHandle

loc_8847C8:
inc     ebx
jmp     loc_884647

loc_8847CE:
mov     ecx, [ebp+var_C]
mov     large fs:0, ecx
pop     ecx
pop     edi
pop     esi
pop     ebx
mov     ecx, [ebp+var_10]
xor     ecx, ebp        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     esp, ebp
pop     ebp
retn
; } // starts at 884610
sub_884610 endp

align 10h


; Attributes: bp-based frame fuzzy-sp

; INT_PTR __stdcall DialogFunc(HWND, UINT, WPARAM, LPARAM)
DialogFunc proc near

hDlg= dword ptr -38h
var_34= dword ptr -34h
var_2C= tagRECT ptr -2Ch
Rect= tagRECT ptr -1Ch
var_4= dword ptr -4
hWnd= dword ptr  8
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h
arg_C= dword ptr  14h

push    ebp
mov     ebp, esp
and     esp, 0FFFFFFF8h
sub     esp, 3Ch
mov     eax, ___security_cookie
xor     eax, esp
mov     [esp+3Ch+var_4], eax
mov     eax, [ebp+arg_4]
push    ebx
push    esi
mov     esi, [ebp+hWnd]
push    edi
mov     [esp+48h+hDlg], esi
cmp     eax, 110h
jnz     loc_884906
lea     eax, [esp+48h+Rect]
push    eax             ; lpRect
call    ds:GetDesktopWindow
mov     ebx, ds:GetClientRect
push    eax             ; hWnd
call    ebx ; GetClientRect
lea     eax, [esp+48h+var_2C]
push    eax             ; lpRect
push    esi             ; hWnd
call    ds:GetWindowRect
mov     eax, [esp+48h+Rect.bottom]
mov     esi, [esp+48h+var_2C.bottom]
sub     esi, [esp+48h+var_2C.top]
mov     edi, [esp+48h+var_2C.right]
sub     edi, [esp+48h+var_2C.left]
cdq
sub     eax, edx
mov     ecx, eax
mov     eax, esi
cdq
sub     eax, edx
sar     eax, 1
sar     ecx, 1
sub     ecx, eax
mov     eax, [esp+48h+Rect.right]
push    0               ; bRepaint
push    esi             ; nHeight
mov     esi, ds:MoveWindow
cdq
push    edi             ; nWidth
sub     eax, edx
push    ecx             ; Y
mov     ecx, eax
mov     eax, edi
mov     edi, [esp+58h+hDlg]
cdq
sub     eax, edx
sar     ecx, 1
sar     eax, 1
sub     ecx, eax
push    ecx             ; X
push    edi             ; hWnd
call    esi ; MoveWindow
mov     ecx, edi        ; hDlg
call    sub_8841A0
lea     eax, [esp+48h+var_2C]
push    eax             ; lpRect
push    edi             ; hWnd
call    ebx ; GetClientRect
mov     eax, [esp+48h+var_2C.bottom]
mov     ecx, [esp+48h+var_2C.right]
sub     eax, [esp+48h+var_2C.top]
sub     ecx, [esp+48h+var_2C.left]
mov     ebx, ds:GetDlgItem
push    0               ; bRepaint
push    eax             ; nHeight
push    ecx             ; nWidth
push    0               ; Y
push    0               ; X
push    3EAh            ; nIDDlgItem
push    edi             ; hDlg
call    ebx ; GetDlgItem
push    eax             ; hWnd
call    esi ; MoveWindow
call    sub_884610
cmp     dword_89C02C, 0
jz      short loc_8848DE
push    5               ; nCmdShow
push    3EBh            ; nIDDlgItem
push    edi             ; hDlg
call    ebx ; GetDlgItem
push    eax             ; hWnd
call    ds:ShowWindow

loc_8848DE:             ; nIDDlgItem
push    3E9h
push    edi             ; hDlg
call    ebx ; GetDlgItem
mov     ecx, eax
call    sub_884420
mov     eax, 1
pop     edi
pop     esi
pop     ebx
mov     ecx, [esp+3Ch+var_4]
xor     ecx, esp        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     esp, ebp
pop     ebp
retn    10h

loc_884906:
cmp     eax, 138h
jnz     short loc_88494E
mov     edi, ds:GetDlgItem
push    3E8h            ; nIDDlgItem
push    esi             ; hDlg
call    edi ; GetDlgItem
mov     ebx, [ebp+arg_C]
cmp     eax, ebx
jz      short loc_884932
push    3EBh            ; nIDDlgItem
push    esi             ; hDlg
call    edi ; GetDlgItem
cmp     eax, ebx
jnz     loc_8849D2

loc_884932:             ; i
push    5
call    ds:GetStockObject
pop     edi
pop     esi
pop     ebx
mov     ecx, [esp+3Ch+var_4]
xor     ecx, esp        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     esp, ebp
pop     ebp
retn    10h

loc_88494E:
cmp     eax, 111h
jnz     short loc_8849D2
mov     ecx, [ebp+arg_8]
movzx   eax, cx
dec     eax
jz      loc_884A22
dec     eax
jz      loc_884A00
sub     eax, 3E7h
jnz     short loc_8849D2
shr     ecx, 10h
cmp     cx, 1
jnz     short loc_8849E8
push    eax             ; lParam
push    eax             ; wParam
push    147h            ; Msg
push    3E9h            ; nIDDlgItem
push    esi             ; hDlg
call    ds:GetDlgItem
push    eax             ; hWnd
call    ds:SendMessageW
mov     dword_89C034, eax
call    sub_882E80
test    eax, eax
mov     eax, dword_89C034
lea     eax, [eax+eax*2]
movzx   eax, ds:word_8977FC[eax*8]
push    eax             ; Locale
jz      short loc_8849BA
call    ds:SetThreadUILanguage
jmp     short loc_8849C0

loc_8849BA:
call    ds:SetThreadLocale

loc_8849C0:             ; hDlg
mov     ecx, esi
call    sub_8841A0
push    1               ; bErase
push    0               ; lpRect
push    esi             ; hWnd
call    ds:InvalidateRect

loc_8849D2:
xor     eax, eax
pop     edi
pop     esi
pop     ebx
mov     ecx, [esp+3Ch+var_4]
xor     ecx, esp        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     esp, ebp
pop     ebp
retn    10h

loc_8849E8:
cmp     cx, 8
jnz     short loc_8849D2
push    1               ; nIDDlgItem
push    esi             ; hDlg
call    ds:GetDlgItem
push    eax             ; hWnd
call    ds:SetFocus
jmp     short loc_8849D2

loc_884A00:             ; nResult
push    0FFFFFFFFh
push    esi             ; hDlg
call    ds:EndDialog
mov     eax, 1
pop     edi
pop     esi
pop     ebx
mov     ecx, [esp+3Ch+var_4]
xor     ecx, esp        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     esp, ebp
pop     ebp
retn    10h

loc_884A22:
mov     eax, dword_89C034
lea     ecx, [esp+48h+Rect]
lea     eax, [eax+eax*2]
movzx   eax, ds:word_8977FC[eax*8]
cdq
mov     [esp+48h+var_34], edx
lea     edx, [esp+48h+hDlg]
mov     [esp+48h+hDlg], eax
call    sub_8817E0
push    eax             ; Src
mov     ecx, offset lpData ; void *
call    sub_8821A0
lea     ecx, [esp+48h+Rect]
call    sub_882220
push    1               ; nResult
push    esi             ; hDlg
call    ds:EndDialog
mov     ecx, [esp+48h+var_4]
pop     edi
pop     esi
pop     ebx
xor     ecx, esp        ; StackCookie
mov     eax, 1
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     esp, ebp
pop     ebp
retn    10h
DialogFunc endp

align 10h
; START OF FUNCTION CHUNK FOR sub_883410

loc_884A80:
; __unwind { // SEH_403410
push    esi
mov     esi, ecx
mov     eax, [esi]
test    eax, eax
jz      short loc_884AA6
push    eax             ; Block
call    j__free
add     esp, 4
mov     dword ptr [esi], 0
mov     dword ptr [esi+4], 0
mov     dword ptr [esi+8], 0

loc_884AA6:
pop     esi
retn
; } // starts at 884A80
; END OF FUNCTION CHUNK FOR sub_883410
align 10h


; Attributes: bp-based frame

sub_884AB0 proc near

var_4= dword ptr -4
arg_0= dword ptr  8
arg_8= dword ptr  10h

push    ebp
mov     ebp, esp
mov     edx, [ebp+arg_8]
sub     esp, 8
push    ebx
mov     ebx, ecx
mov     eax, [ebx+10h]
test    edx, edx
jnz     short loc_884AD3
or      ecx, 0FFFFFFFFh
cmp     eax, 0FFFFFFFFh
cmova   eax, ecx
pop     ebx
mov     esp, ebp
pop     ebp
retn    0Ch

loc_884AD3:
push    esi
or      ecx, 0FFFFFFFFh
push    edi
cmp     edx, eax
ja      loc_884B63
sub     eax, edx
cmp     eax, ecx
cmova   eax, ecx
cmp     dword ptr [ebx+14h], 8
jb      short loc_884AF1
mov     ecx, [ebx]
jmp     short loc_884AF3

loc_884AF1:
mov     ecx, ebx

loc_884AF3:
lea     edi, [ecx+eax*2]
mov     ecx, [ebp+arg_0]
movzx   eax, word ptr [ecx]
mov     [ebp+var_4], eax
nop

loc_884B00:
cmp     [edi], ax
jnz     short loc_884B47
cmp     [ebp+arg_8], 0
mov     esi, edx
mov     edx, ecx
mov     eax, edi
jbe     short loc_884B22

loc_884B11:
mov     cx, [eax]
cmp     cx, [edx]
jnz     short loc_884B39
add     eax, 2
add     edx, 2
dec     esi
jnz     short loc_884B11

loc_884B22:
cmp     dword ptr [ebx+14h], 8
jb      short loc_884B2A
mov     ebx, [ebx]

loc_884B2A:
sub     edi, ebx
sar     edi, 1
mov     eax, edi
pop     edi
pop     esi
pop     ebx
mov     esp, ebp
pop     ebp
retn    0Ch

loc_884B39:
movzx   eax, word ptr [eax]
cmp     ax, [edx]
sbb     eax, eax
and     eax, 0FFFFFFFEh
inc     eax
jz      short loc_884B22

loc_884B47:
mov     ecx, ebx
call    unknown_libname_1 ; Microsoft VisualC 2-14/net runtime
cmp     edi, eax
jz      short loc_884B60
mov     edx, [ebp+arg_8]
mov     eax, [ebp+var_4]
mov     ecx, [ebp+arg_0]
sub     edi, 2
jmp     short loc_884B00

loc_884B60:
or      ecx, 0FFFFFFFFh

loc_884B63:
pop     edi
pop     esi
mov     eax, ecx
pop     ebx
mov     esp, ebp
pop     ebp
retn    0Ch
sub_884AB0 endp

align 10h


; Attributes: bp-based frame

sub_884B70 proc near

arg_4= dword ptr  0Ch
arg_8= dword ptr  10h
arg_C= dword ptr  14h

push    ebp
mov     ebp, esp
push    ebx
push    esi
push    edi
mov     edi, [ebp+arg_4]
cmp     [ecx+10h], edi
cmovb   edi, [ecx+10h]
cmp     dword ptr [ecx+14h], 8
jb      short loc_884B88
mov     ecx, [ecx]

loc_884B88:
mov     ebx, [ebp+arg_C]
cmp     edi, ebx
mov     esi, ebx
cmovb   esi, edi
test    esi, esi
jz      short loc_884BB1
mov     edx, [ebp+arg_8]
lea     esp, [esp+0]

loc_884BA0:
mov     ax, [ecx]
cmp     ax, [edx]
jnz     short loc_884BC5
add     ecx, 2
add     edx, 2
dec     esi
jnz     short loc_884BA0

loc_884BB1:
xor     eax, eax

loc_884BB3:
test    eax, eax
jnz     short loc_884BDA
cmp     edi, ebx
jnb     short loc_884BD3
pop     edi
pop     esi
or      eax, 0FFFFFFFFh
pop     ebx
pop     ebp
retn    10h

loc_884BC5:
movzx   eax, word ptr [ecx]
cmp     ax, [edx]
sbb     eax, eax
and     eax, 0FFFFFFFEh
inc     eax
jmp     short loc_884BB3

loc_884BD3:
xor     eax, eax
cmp     edi, ebx
setnz   al

loc_884BDA:
pop     edi
pop     esi
pop     ebx
pop     ebp
retn    10h
sub_884B70 endp

align 10h


; Attributes: bp-based frame

sub_884BF0 proc near

arg_0= dword ptr  8

push    ebp
mov     ebp, esp
push    ebx
mov     ebx, ecx
push    esi
mov     eax, [ebx+4]
mov     edx, [ebx]
mov     esi, [ebp+arg_0]
mov     ecx, eax
sub     ecx, edx
sar     ecx, 1
push    edi
cmp     ecx, esi
jbe     short loc_884C40
lea     esi, [edx+esi*2]
cmp     esi, edx
jnz     short loc_884C1B
pop     edi
pop     esi
mov     [ebx+4], edx
pop     ebx
pop     ebp
retn    4

loc_884C1B:
cmp     esi, eax
jz      short loc_884C83
mov     ecx, eax
sub     ecx, eax
sar     ecx, 1
lea     edi, [ecx+ecx]
push    edi             ; Size
push    eax             ; Src
push    esi             ; void *
call    _memmove
add     esp, 0Ch
lea     eax, [edi+esi]
pop     edi
pop     esi
mov     [ebx+4], eax
pop     ebx
pop     ebp
retn    4

loc_884C40:
jnb     short loc_884C83
mov     eax, esi
sub     eax, ecx
push    eax
mov     ecx, ebx
call    sub_884CD0
mov     edi, [ebx+4]
mov     eax, edi
sub     eax, [ebx]
mov     ecx, esi
sar     eax, 1
sub     ecx, eax
jz      short loc_884C72
xor     eax, eax
movzx   edx, ax
mov     eax, edx
shl     edx, 10h
or      eax, edx
shr     ecx, 1
rep stosd
adc     ecx, ecx
rep stosw

loc_884C72:
mov     ecx, [ebx+4]
mov     eax, ecx
sub     eax, [ebx]
sar     eax, 1
sub     esi, eax
lea     eax, [ecx+esi*2]
mov     [ebx+4], eax

loc_884C83:
pop     edi
pop     esi
pop     ebx
pop     ebp
retn    4
sub_884BF0 endp

align 10h


; Attributes: bp-based frame

sub_884C90 proc near

arg_0= dword ptr  8
arg_4= dword ptr  0Ch

push    ebp
mov     ebp, esp
push    esi
mov     esi, [ebp+arg_0]
push    edi
mov     edi, [ebp+arg_4]
cmp     esi, edi
jz      short loc_884CCA
nop

loc_884CA0:
cmp     dword ptr [esi+14h], 8
jb      short loc_884CB0
push    dword ptr [esi] ; Block
call    j__free
add     esp, 4

loc_884CB0:
xor     eax, eax
mov     dword ptr [esi+14h], 7
mov     dword ptr [esi+10h], 0
mov     [esi], ax
add     esi, 18h
cmp     esi, edi
jnz     short loc_884CA0

loc_884CCA:
pop     edi
pop     esi
pop     ebp
retn    8
sub_884C90 endp



; Attributes: bp-based frame

sub_884CD0 proc near

arg_0= dword ptr  8

push    ebp
mov     ebp, esp
mov     edx, [ecx+8]
push    esi
mov     esi, [ecx+4]
mov     eax, edx
sub     eax, esi
push    edi
mov     edi, [ebp+arg_0]
sar     eax, 1
cmp     eax, edi
jnb     short loc_884D2F
sub     esi, [ecx]
push    ebx
mov     ebx, 7FFFFFFFh
sar     esi, 1
mov     eax, ebx
sub     eax, esi
cmp     eax, edi
jb      short loc_884D35
sub     edx, [ecx]
add     esi, edi
sar     edx, 1
mov     eax, edx
shr     eax, 1
sub     ebx, eax
cmp     ebx, edx
pop     ebx
jnb     short loc_884D1D
xor     edx, edx
cmp     edx, esi
pop     edi
cmovb   edx, esi
pop     esi
mov     [ebp+arg_0], edx
pop     ebp
jmp     loc_884D40

loc_884D1D:
add     edx, eax
cmp     edx, esi
pop     edi
cmovb   edx, esi
pop     esi
mov     [ebp+arg_0], edx
pop     ebp
jmp     loc_884D40

loc_884D2F:
pop     edi
pop     esi
pop     ebp
retn    4

loc_884D35:
push    offset aVectorTTooLong ; "vector<T> too long"
call    sub_88541D
align 10h

loc_884D40:
push    ebp
mov     ebp, esp
push    ebx
mov     ebx, [ebp+arg_0]
push    esi
xor     esi, esi
push    edi
mov     edi, ecx
test    ebx, ebx
jz      short loc_884D6B
cmp     ebx, 7FFFFFFFh
ja      short loc_884DB1
lea     eax, [ebx+ebx]
push    eax             ; Size
call    ??2@YAPAXI@Z    ; operator new(uint)
mov     esi, eax
add     esp, 4
test    esi, esi
jz      short loc_884DB1

loc_884D6B:
mov     ecx, [edi]
mov     eax, [edi+4]
sub     eax, ecx
and     eax, 0FFFFFFFEh
push    eax             ; Size
push    ecx             ; Src
push    esi             ; void *
call    _memmove
mov     ecx, [edi]
mov     eax, [edi+4]
sub     eax, ecx
sar     eax, 1
add     esp, 0Ch
mov     [ebp+arg_0], eax
test    ecx, ecx
jz      short loc_884D99
push    ecx             ; Block
call    j__free
add     esp, 4

loc_884D99:
lea     eax, [esi+ebx*2]
mov     [edi+8], eax
mov     eax, [ebp+arg_0]
mov     [edi], esi
lea     eax, [esi+eax*2]
mov     [edi+4], eax
pop     edi
pop     esi
pop     ebx
pop     ebp
retn    4

loc_884DB1:             ; Microsoft VisualC 2-14/net runtime
call    unknown_libname_2
sub_884CD0 endp ; sp-analysis failed

align 10h


; Attributes: bp-based frame

sub_884DC0 proc near

var_14= dword ptr -14h
var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 00890DA0 SIZE 00000034 BYTES

; __unwind { // SEH_404DC0
push    ebp
mov     ebp, esp
push    0FFFFFFFFh
push    offset SEH_404DC0
mov     eax, large fs:0
push    eax
sub     esp, 8
push    ebx
push    esi
push    edi
mov     eax, ___security_cookie
xor     eax, ebp
push    eax
lea     eax, [ebp+var_C]
mov     large fs:0, eax
mov     ebx, edx
mov     esi, ecx
mov     [ebp+var_14], esi
mov     [ebp+var_10], 0
xor     eax, eax
mov     dword ptr [esi+14h], 7
mov     dword ptr [esi+10h], 0
mov     [esi], ax
;   try {
mov     [ebp+var_4], eax
mov     eax, [ebx+10h]
add     eax, dword_89B074
mov     edi, [esi+10h]
mov     [ebp+var_10], 1
cmp     edi, eax
ja      short loc_884E49
cmp     [esi+14h], eax
jz      short loc_884E49
push    1               ; int
push    eax             ; int
call    sub_8826C0
test    al, al
jz      short loc_884E49
cmp     dword ptr [esi+14h], 8
mov     [esi+10h], edi
jb      short loc_884E41
mov     eax, [esi]
jmp     short loc_884E43

loc_884E41:
mov     eax, esi

loc_884E43:
xor     ecx, ecx
mov     [eax+edi*2], cx

loc_884E49:
push    0FFFFFFFFh
push    0
push    ebx
mov     ecx, esi
call    sub_882B00
push    0FFFFFFFFh
push    0
push    offset dword_89B064
mov     ecx, esi
call    sub_882B00
mov     eax, esi
mov     ecx, [ebp+var_C]
mov     large fs:0, ecx
pop     ecx
pop     edi
pop     esi
pop     ebx
mov     esp, ebp
pop     ebp
retn
;   } // starts at 884E09
; } // starts at 884DC0
sub_884DC0 endp

align 10h


; Attributes: bp-based frame

sub_884E80 proc near

var_14= dword ptr -14h
var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_4= dword ptr -4

; FUNCTION CHUNK AT 00890D60 SIZE 00000034 BYTES

; __unwind { // SEH_404E80
push    ebp
mov     ebp, esp
push    0FFFFFFFFh
push    offset SEH_4030D0
mov     eax, large fs:0
push    eax
sub     esp, 8
push    esi
push    edi
mov     eax, ___security_cookie
xor     eax, ebp
push    eax
lea     eax, [ebp+var_C]
mov     large fs:0, eax
mov     esi, ecx
mov     [ebp+var_14], esi
mov     [ebp+var_10], 0
xor     eax, eax
mov     dword ptr [esi+14h], 7
mov     dword ptr [esi+10h], 0
mov     [esi], ax
;   try {
mov     [ebp+var_4], eax
mov     eax, dword_89B05C
mov     edi, [esi+10h]
add     eax, 0Ch
mov     [ebp+var_10], 1
cmp     edi, eax
ja      short loc_884F05
cmp     [esi+14h], eax
jz      short loc_884F05
push    1               ; int
push    eax             ; int
call    sub_8826C0
test    al, al
jz      short loc_884F05
cmp     dword ptr [esi+14h], 8
mov     [esi+10h], edi
jb      short loc_884EFD
mov     eax, [esi]
jmp     short loc_884EFF

loc_884EFD:
mov     eax, esi

loc_884EFF:
xor     ecx, ecx
mov     [eax+edi*2], cx

loc_884F05:             ; int
push    0Ch
push    offset aTransforms ; "TRANSFORMS=:"
mov     ecx, esi
call    sub_882C10
push    0FFFFFFFFh
push    0
push    offset lpData
mov     ecx, esi
call    sub_882B00
mov     eax, esi
mov     ecx, [ebp+var_C]
mov     large fs:0, ecx
pop     ecx
pop     edi
pop     esi
mov     esp, ebp
pop     ebp
retn
;   } // starts at 884EC6
; } // starts at 884E80
sub_884E80 endp

align 10h



sub_884F40 proc near
push    esi
mov     esi, dword_89C044
push    edi
mov     edi, dword_89C048
mov     ecx, edi
sub     ecx, esi
mov     eax, 2AAAAAABh
imul    ecx
sar     edx, 2
mov     eax, edx
shr     eax, 1Fh
add     eax, edx
cmp     eax, 1
jnb     short loc_884FCE
sub     esi, Block
mov     eax, 2AAAAAABh
imul    esi
sar     edx, 2
mov     ecx, edx
shr     ecx, 1Fh
mov     esi, 0AAAAAAAh
add     ecx, edx
mov     eax, esi
sub     eax, ecx
cmp     eax, 1
jb      short loc_884FD3
sub     edi, Block
mov     eax, 2AAAAAABh
imul    edi
sar     edx, 2
mov     eax, edx
shr     eax, 1Fh
add     eax, edx
mov     edx, eax
shr     edx, 1
sub     esi, edx
inc     ecx
cmp     esi, eax
jnb     short loc_884FC1
xor     eax, eax
cmp     eax, ecx
cmovb   eax, ecx
push    eax
call    sub_884FE0
pop     edi
pop     esi
retn    4

loc_884FC1:
add     eax, edx
cmp     eax, ecx
cmovb   eax, ecx
push    eax
call    sub_884FE0

loc_884FCE:
pop     edi
pop     esi
retn    4

loc_884FD3:
push    offset aVectorTTooLong ; "vector<T> too long"
call    sub_88541D
sub_884F40 endp

align 10h


; Attributes: bp-based frame

sub_884FE0 proc near

arg_0= dword ptr  8

push    ebp
mov     ebp, esp
push    ebx
push    esi
mov     esi, [ebp+arg_0]
push    edi
xor     edi, edi
test    esi, esi
jz      short loc_885010
cmp     esi, 0AAAAAAAh
ja      loc_88508E
lea     eax, [esi+esi*2]
shl     eax, 3
push    eax             ; Size
call    ??2@YAPAXI@Z    ; operator new(uint)
mov     edi, eax
add     esp, 4
test    edi, edi
jz      short loc_88508E

loc_885010:
push    [ebp+arg_0]
mov     edx, dword_89C044
mov     ecx, Block
sub     esp, 8
push    edi             ; void *
call    sub_8851B0
mov     ecx, dword_89C044
sub     ecx, Block
mov     eax, 2AAAAAABh
imul    ecx
mov     eax, Block
sar     edx, 2
mov     ebx, edx
shr     ebx, 1Fh
add     esp, 10h
add     ebx, edx
test    eax, eax
jz      short loc_88506B
push    dword_89C044
push    eax
call    sub_884C90
push    Block           ; Block
call    j__free
add     esp, 4

loc_88506B:
lea     eax, [esi+esi*2]
mov     Block, edi
lea     eax, [edi+eax*8]
mov     dword_89C048, eax
lea     eax, [ebx+ebx*2]
lea     eax, [edi+eax*8]
pop     edi
pop     esi
mov     dword_89C044, eax
pop     ebx
pop     ebp
retn    4

loc_88508E:             ; Microsoft VisualC 2-14/net runtime
call    unknown_libname_2
sub_884FE0 endp

align 10h


; Attributes: bp-based frame

sub_8850A0 proc near

var_14= dword ptr -14h
var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  8

push    ebp
mov     ebp, esp
sub     esp, 18h
push    ebx
push    esi
mov     esi, ecx
mov     ecx, [ebp+arg_0]
sub     edx, esi
mov     eax, 2AAAAAABh
imul    edx
sar     edx, 2
mov     eax, edx
shr     eax, 1Fh
add     eax, edx
mov     [ebp+var_8], eax
mov     [ebp+var_4], ecx
sub     ecx, esi
mov     eax, 2AAAAAABh
imul    ecx
sar     edx, 2
mov     [ebp+var_10], esi
mov     esi, edx
shr     esi, 1Fh
add     esi, edx
mov     edx, [ebp+var_8]
push    edi
mov     eax, esi
mov     [ebp+var_C], esi
mov     ecx, edx
test    edx, edx
jz      short loc_885101
jmp     short loc_8850F0
align 10h

loc_8850F0:
cdq
idiv    ecx
mov     eax, ecx
mov     ecx, edx
test    edx, edx
jnz     short loc_8850F0
mov     edx, [ebp+var_8]
mov     [ebp+var_C], eax

loc_885101:
cmp     eax, esi
jge     loc_8851A2
test    eax, eax
jle     loc_8851A2
lea     ecx, [edx+edx*2]
mov     edx, [ebp+var_10]
lea     eax, [eax+eax*2]
shl     ecx, 3
mov     [ebp+var_14], ecx
lea     ebx, [edx+eax*8]

loc_885123:
mov     eax, [ebp+var_4]
lea     esi, [ebx+ecx]
cmp     esi, eax
mov     edi, ebx
cmovz   esi, edx

loc_885130:
cmp     edi, esi
jz      short loc_885157
push    esi             ; void *
mov     ecx, edi        ; Src
call    sub_885240
mov     eax, [esi+10h]
mov     ecx, [edi+10h]
mov     [edi+10h], eax
mov     [esi+10h], ecx
mov     eax, [esi+14h]
mov     ecx, [edi+14h]
mov     [edi+14h], eax
mov     eax, [ebp+var_4]
mov     [esi+14h], ecx

loc_885157:
mov     ecx, eax
sub     ecx, esi
mov     eax, 2AAAAAABh
imul    ecx
sar     edx, 2
mov     ecx, edx
shr     ecx, 1Fh
add     ecx, edx
mov     edx, [ebp+var_8]
mov     edi, esi
cmp     edx, ecx
jge     short loc_88517F
mov     ecx, [ebp+var_14]
mov     edx, [ebp+var_10]
add     esi, ecx
jmp     short loc_88518D

loc_88517F:
sub     edx, ecx
mov     ecx, [ebp+var_14]
lea     eax, [edx+edx*2]
mov     edx, [ebp+var_10]
lea     esi, [edx+eax*8]

loc_88518D:
mov     eax, [ebp+var_4]
cmp     esi, ebx
jnz     short loc_885130
mov     eax, [ebp+var_C]
dec     eax
sub     ebx, 18h
mov     [ebp+var_C], eax
test    eax, eax
jg      short loc_885123

loc_8851A2:
pop     edi
pop     esi
pop     ebx
mov     esp, ebp
pop     ebp
retn
sub_8850A0 endp

align 10h


; Attributes: bp-based frame

; int __cdecl sub_8851B0(void *)
sub_8851B0 proc near

arg_0= dword ptr  8

push    ebp
mov     ebp, esp
push    ebx
mov     ebx, edx
cmp     ecx, ebx
jz      short loc_885234
push    esi
push    edi
mov     edi, [ebp+arg_0]
lea     esi, [ecx+10h]

loc_8851C2:
test    edi, edi
jz      short loc_885220
xor     eax, eax
mov     dword ptr [edi+14h], 7
mov     dword ptr [edi+10h], 0
mov     [edi], ax
cmp     dword ptr [esi+4], 8
jnb     short loc_8851F6
mov     eax, [esi]
inc     eax
jz      short loc_885202
add     eax, eax
push    eax             ; Size
lea     eax, [esi-10h]
push    eax             ; Src
push    edi             ; void *
call    _memmove
add     esp, 0Ch
jmp     short loc_885202

loc_8851F6:
mov     eax, [esi-10h]
mov     [edi], eax
mov     dword ptr [esi-10h], 0

loc_885202:
mov     eax, [esi]
mov     [edi+10h], eax
mov     eax, [esi+4]
mov     [edi+14h], eax
xor     eax, eax
mov     dword ptr [esi+4], 7
mov     dword ptr [esi], 0
mov     [esi-10h], ax

loc_885220:
add     esi, 18h
add     edi, 18h
lea     ecx, [esi-10h]
cmp     ecx, ebx
jnz     short loc_8851C2
mov     eax, edi
pop     edi
pop     esi
pop     ebx
pop     ebp
retn

loc_885234:
mov     eax, [ebp+arg_0]
pop     ebx
pop     ebp
retn
sub_8851B0 endp

align 10h


; Attributes: bp-based frame

; int __thiscall sub_885240(void *Src, void *)
sub_885240 proc near

Src= dword ptr  8

push    ebp
mov     ebp, esp
push    esi
mov     esi, ecx
push    edi
cmp     dword ptr [esi+14h], 8
jb      short loc_885283
mov     edi, [ebp+Src]
cmp     dword ptr [edi+14h], 8
jb      short loc_885264
mov     eax, [edi]
mov     edx, [esi]
mov     [esi], eax
mov     [edi], edx
pop     edi
pop     esi
pop     ebp
retn    4

loc_885264:
mov     eax, [edi+10h]
push    ebx
mov     ebx, [esi]
inc     eax
jz      short loc_88527A
add     eax, eax
push    eax             ; Size
push    edi             ; Src
push    esi             ; void *
call    _memmove_0
add     esp, 0Ch

loc_88527A:
mov     [edi], ebx
pop     ebx
pop     edi
pop     esi
pop     ebp
retn    4

loc_885283:
mov     edx, [ebp+Src]
cmp     dword ptr [edx+14h], 8
jnb     short loc_8852BB
cmp     esi, edx
jz      short loc_8852D2
lea     edi, [esi+10h]
cmp     esi, edi
jz      short loc_8852D2
sub     edx, esi
lea     esp, [esp+0]

loc_8852A0:
movzx   ecx, word ptr [esi]
mov     ax, [edx+esi]
mov     [esi], ax
mov     [edx+esi], cx
add     esi, 2
cmp     esi, edi
jnz     short loc_8852A0
pop     edi
pop     esi
pop     ebp
retn    4

loc_8852BB:
mov     eax, [esi+10h]
mov     edi, [edx]
inc     eax
jz      short loc_8852D0
add     eax, eax
push    eax             ; Size
push    esi             ; Src
push    edx             ; void *
call    _memmove_0
add     esp, 0Ch

loc_8852D0:
mov     [esi], edi

loc_8852D2:
pop     edi
pop     esi
pop     ebp
retn    4
sub_885240 endp



; Attributes: bp-based frame

sub_8852D8 proc near

arg_0= dword ptr  8

push    ebp
mov     ebp, esp
cmp     ds:off_8924F4, 0 ; "address family not supported"
mov     eax, offset unk_8924F0
jz      short loc_8852F9
mov     ecx, [ebp+arg_0]

loc_8852EC:
cmp     [eax], ecx
jz      short loc_8852FD
add     eax, 8
cmp     dword ptr [eax+4], 0
jnz     short loc_8852EC

loc_8852F9:
xor     eax, eax
pop     ebp
retn

loc_8852FD:
mov     eax, [eax+4]
pop     ebp
retn
sub_8852D8 endp



; Attributes: bp-based frame

sub_885302 proc near

arg_0= dword ptr  8

push    ebp
mov     ebp, esp
cmp     ds:off_89229C, 0 ; "permission denied"
mov     eax, offset unk_892298
jz      short loc_885323
mov     ecx, [ebp+arg_0]

loc_885316:
cmp     [eax], ecx
jz      short loc_885327
add     eax, 8
cmp     dword ptr [eax+4], 0
jnz     short loc_885316

loc_885323:
xor     eax, eax
pop     ebp
retn

loc_885327:
mov     eax, [eax+4]
pop     ebp
retn
sub_885302 endp



; Attributes: bp-based frame

; int __stdcall sub_88532C(struct exception *)
sub_88532C proc near

arg_0= dword ptr  8

push    ebp
mov     ebp, esp
push    esi
push    [ebp+arg_0]     ; struct exception *
mov     esi, ecx
call    ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception(std::exception const &)
mov     dword ptr [esi], offset off_893064
mov     eax, esi
pop     esi
pop     ebp
retn    4
sub_88532C endp



; Attributes: bp-based frame

; int __stdcall sub_885347(struct exception *)
sub_885347 proc near

arg_0= dword ptr  8

push    ebp
mov     ebp, esp
push    esi
push    [ebp+arg_0]     ; struct exception *
mov     esi, ecx
call    ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception(std::exception const &)
mov     dword ptr [esi], offset off_89308C
mov     eax, esi
pop     esi
pop     ebp
retn    4
sub_885347 endp



; Attributes: bp-based frame

; int __stdcall sub_885362(struct exception *)
sub_885362 proc near

arg_0= dword ptr  8

push    ebp
mov     ebp, esp
push    esi
push    [ebp+arg_0]     ; struct exception *
mov     esi, ecx
call    ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception(std::exception const &)
mov     dword ptr [esi], offset off_893080
mov     eax, esi
pop     esi
pop     ebp
retn    4
sub_885362 endp



; Attributes: bp-based frame

; int __stdcall sub_88537D(struct exception *)
sub_88537D proc near

arg_0= dword ptr  8

push    ebp
mov     ebp, esp
push    esi
push    [ebp+arg_0]     ; struct exception *
mov     esi, ecx
call    ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception(std::exception const &)
mov     dword ptr [esi], offset off_893098
mov     eax, esi
pop     esi
pop     ebp
retn    4
sub_88537D endp




sub_885398 proc near
mov     dword ptr [ecx], offset off_893064
jmp     sub_8871F2
sub_885398 endp



; Attributes: thunk

sub_8853A3 proc near
jmp     sub_8871F2
sub_8853A3 endp



; Attributes: bp-based frame

; int __thiscall sub_8853A8(void *Block, char)
sub_8853A8 proc near

arg_0= byte ptr  8

push    ebp
mov     ebp, esp
push    esi
mov     esi, ecx
mov     dword ptr [esi], offset off_893064
call    sub_8871F2
test    [ebp+arg_0], 1
jz      short loc_8853C6
push    esi             ; Block
call    j__free
pop     ecx

loc_8853C6:
mov     eax, esi
pop     esi
pop     ebp
retn    4
sub_8853A8 endp



; Attributes: bp-based frame

; int __thiscall sub_8853CD(void *Block, char)
sub_8853CD proc near

arg_0= byte ptr  8

push    ebp
mov     ebp, esp
push    esi
mov     esi, ecx
call    sub_8871F2
test    [ebp+arg_0], 1
jz      short loc_8853E5
push    esi             ; Block
call    j__free
pop     ecx

loc_8853E5:
mov     eax, esi
pop     esi
pop     ebp
retn    4
sub_8853CD endp

; [00000031 BYTES: COLLAPSED FUNCTION unknown_libname_2]


; Attributes: noreturn bp-based frame

; void __cdecl __noreturn sub_88541D(char *)
sub_88541D proc near

pExceptionObject= dword ptr -0Ch
arg_0= dword ptr  8

push    ebp
mov     ebp, esp
sub     esp, 0Ch
mov     eax, [ebp+arg_0]
mov     [ebp+arg_0], eax
lea     eax, [ebp+arg_0]
push    eax             ; char **
lea     ecx, [ebp+pExceptionObject] ; this
call    ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception(char const * const &)
push    offset stru_898150 ; pThrowInfo
lea     eax, [ebp+pExceptionObject]
push    eax             ; pExceptionObject
mov     [ebp+pExceptionObject], offset off_89308C
call    __CxxThrowException@8 ; _CxxThrowException(x,x)
sub_88541D endp

db 0CCh


; Attributes: noreturn bp-based frame

; void __cdecl __noreturn sub_88544B(char *)
sub_88544B proc near

pExceptionObject= dword ptr -0Ch
arg_0= dword ptr  8

push    ebp
mov     ebp, esp
sub     esp, 0Ch
mov     eax, [ebp+arg_0]
mov     [ebp+arg_0], eax
lea     eax, [ebp+arg_0]
push    eax             ; char **
lea     ecx, [ebp+pExceptionObject] ; this
call    ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception(char const * const &)
push    offset stru_89818C ; pThrowInfo
lea     eax, [ebp+pExceptionObject]
push    eax             ; pExceptionObject
mov     [ebp+pExceptionObject], offset off_893098
call    __CxxThrowException@8 ; _CxxThrowException(x,x)
sub_88544B endp

db 0CCh
; [00000009 BYTES: COLLAPSED FUNCTION operator new[](uint)]
; [0000000F BYTES: COLLAPSED FUNCTION __security_check_cookie(x)]
; [00000005 BYTES: COLLAPSED FUNCTION j__free]
align 10h
; [00000644 BYTES: COLLAPSED FUNCTION _memmove]



sub_885AE4 proc near
push    ecx
mov     dword ptr [ecx], offset off_8930A4
call    unknown_libname_3 ; Microsoft VisualC 2-14/net runtime
pop     ecx
retn
sub_885AE4 endp

; [0000001E BYTES: COLLAPSED FUNCTION type_info::operator==(type_info const &)]


; Attributes: bp-based frame

; int __thiscall sub_885B10(void *Block, char)
sub_885B10 proc near

arg_0= byte ptr  8

push    ebp
mov     ebp, esp
push    esi
mov     esi, ecx
call    sub_885AE4
test    [ebp+arg_0], 1
jz      short loc_885B28
push    esi             ; Block
call    j__free
pop     ecx

loc_885B28:
mov     eax, esi
pop     esi
pop     ebp
retn    4
sub_885B10 endp

; [0000004F BYTES: COLLAPSED FUNCTION operator new(uint)]
; [0000002F BYTES: COLLAPSED FUNCTION ___onexitinit]
; [00000040 BYTES: COLLAPSED FUNCTION __onexit]
; [000000B6 BYTES: COLLAPSED FUNCTION __onexit_nolock]
; [00000015 BYTES: COLLAPSED FUNCTION _atexit]
; [0000002A BYTES: COLLAPSED FUNCTION __purecall]
; [0000011A BYTES: COLLAPSED FUNCTION x64tow_s(x,x,x,x,x,x)]
; [0000001B BYTES: COLLAPSED FUNCTION __ui64tow_s]
; [00000005 BYTES: COLLAPSED FUNCTION j_j__free]
; [0000001C BYTES: COLLAPSED FUNCTION _swprintf_s]
; [00000278 BYTES: COLLAPSED FUNCTION __localtime64_s]
; [0000004F BYTES: COLLAPSED FUNCTION __time64]
; [00000088 BYTES: COLLAPSED FUNCTION _LocaleUpdate::_LocaleUpdate(localeinfo_struct *)]
; [000000B4 BYTES: COLLAPSED FUNCTION __wcsnicmp]
; [000000F7 BYTES: COLLAPSED FUNCTION __wcsnicmp_l]
; [000000BE BYTES: COLLAPSED FUNCTION _wcsncpy_s]
; [000000CE BYTES: COLLAPSED FUNCTION _wcsncat_s]
; [00000150 BYTES: COLLAPSED FUNCTION ___tmainCRTStartup]
; [00000023 BYTES: COLLAPSED FUNCTION _fast_error_exit]
pop     ecx
pop     ecx
pop     ebp
retn
; [0000000A BYTES: COLLAPSED FUNCTION start]
align 10h
; [00000644 BYTES: COLLAPSED FUNCTION _memmove_0]
align 10h
; [0000008B BYTES: COLLAPSED FUNCTION _strlen]
; [0000005B BYTES: COLLAPSED FUNCTION _CxxThrowException(x,x)]
; [00000036 BYTES: COLLAPSED FUNCTION __EH_prolog3_catch]
; [00000031 BYTES: COLLAPSED FUNCTION CatchGuardHandler(EHExceptionRecord *,CatchGuardRN *,void *,void *)]
; [0000009D BYTES: COLLAPSED FUNCTION TranslatorGuardHandler(EHExceptionRecord *,TranslatorGuardRN *,void *,void *)]
; [0000005E BYTES: COLLAPSED FUNCTION _CallCatchBlock2(EHRegistrationNode *,_s_FuncInfo const *,void *,int,ulong)]
; [00000007 BYTES: COLLAPSED FUNCTION sub_886ED8]
; [000000D5 BYTES: COLLAPSED FUNCTION _CallSETranslator(EHExceptionRecord *,EHRegistrationNode *,void *,void *,_s_FuncInfo const *,int,EHRegistrationNode *)]
; [0000007F BYTES: COLLAPSED FUNCTION _GetRangeOfTrysToCheck(_s_FuncInfo const *,int,int,uint *,uint *)]
; [0000002B BYTES: COLLAPSED FUNCTION _JumpToContinuation(void *,EHRegistrationNode *)]
pop     ebx
leave
retn    8
; [00000053 BYTES: COLLAPSED FUNCTION _UnwindNestedFrames(EHRegistrationNode *,EHExceptionRecord *)]
; [0000002A BYTES: COLLAPSED FUNCTION __CreateFrameInfo]
; [00000050 BYTES: COLLAPSED FUNCTION __FindAndUnlinkFrame]
; [00000029 BYTES: COLLAPSED FUNCTION __IsExceptionObjectToBeDestroyed]
; [00000036 BYTES: COLLAPSED FUNCTION ___CxxFrameHandler3]
; [00000025 BYTES: COLLAPSED FUNCTION std::exception::exception(char const * const &)]
; [0000001B BYTES: COLLAPSED FUNCTION std::exception::exception(char const * const &,int)]
; [00000023 BYTES: COLLAPSED FUNCTION std::exception::exception(std::exception const &)]



sub_8871F2 proc near
mov     dword ptr [ecx], offset off_8930CC
jmp     ?_Tidy@exception@std@@AAEXXZ ; std::exception::_Tidy(void)
sub_8871F2 endp

; [00000033 BYTES: COLLAPSED FUNCTION std::exception::operator=(std::exception const &)]


; Attributes: bp-based frame

; int __thiscall sub_887230(void *Block, char)
sub_887230 proc near

arg_0= byte ptr  8

push    ebp
mov     ebp, esp
push    esi
mov     esi, ecx
mov     dword ptr [esi], offset off_8930CC
call    ?_Tidy@exception@std@@AAEXXZ ; std::exception::_Tidy(void)
test    [ebp+arg_0], 1
jz      short loc_88724E
push    esi             ; Block
call    j__free
pop     ecx

loc_88724E:
mov     eax, esi
pop     esi
pop     ebp
retn    4
sub_887230 endp

; [0000003E BYTES: COLLAPSED FUNCTION std::exception::_Copy_str(char const *)]
; [0000001C BYTES: COLLAPSED FUNCTION std::exception::_Tidy(void)]
; [0000000D BYTES: COLLAPSED FUNCTION exception::what(void)]
; [0000003D BYTES: COLLAPSED FUNCTION ___raise_securityfailure]
; [000000F9 BYTES: COLLAPSED FUNCTION ___report_gsfailure]
; [00000038 BYTES: COLLAPSED FUNCTION _free]
; [00000139 BYTES: COLLAPSED FUNCTION ___isa_available_init]
align 10h
; [0000008C BYTES: COLLAPSED FUNCTION _strcmp]
; [00000071 BYTES: COLLAPSED FUNCTION unknown_libname_3]
; [00000092 BYTES: COLLAPSED FUNCTION _malloc]
; [00000026 BYTES: COLLAPSED FUNCTION __callnewh]


; Attributes: bp-based frame

sub_887725 proc near

arg_0= dword ptr  8

push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_0]
mov     dword_89B3E0, eax
pop     ebp
retn
sub_887725 endp

; [00000032 BYTES: COLLAPSED FUNCTION ___crtCorExitProcess]
; [00000015 BYTES: COLLAPSED FUNCTION ___crtExitProcess]
align 2
; [0000001C BYTES: COLLAPSED FUNCTION __amsg_exit]
; [0000000F BYTES: COLLAPSED FUNCTION __c_exit]
; [0000000F BYTES: COLLAPSED FUNCTION __cexit]
; [00000091 BYTES: COLLAPSED FUNCTION __cinit]
; [00000014 BYTES: COLLAPSED FUNCTION __exit]
; [00000038 BYTES: COLLAPSED FUNCTION __init_pointers]
; [0000001C BYTES: COLLAPSED FUNCTION __initterm]
; [00000022 BYTES: COLLAPSED FUNCTION __initterm_e]
; [00000009 BYTES: COLLAPSED FUNCTION __lockexit]
; [00000009 BYTES: COLLAPSED FUNCTION __unlockexit]
; [0000012F BYTES: COLLAPSED FUNCTION _doexit]
; [00000014 BYTES: COLLAPSED FUNCTION _exit]
; [00000031 BYTES: COLLAPSED FUNCTION __msize]
; [0000004A BYTES: COLLAPSED FUNCTION __calloc_crt]
; [00000049 BYTES: COLLAPSED FUNCTION __malloc_crt]
; [0000004C BYTES: COLLAPSED FUNCTION __realloc_crt]
; [00000050 BYTES: COLLAPSED FUNCTION __recalloc_crt]
align 10h
; [00000045 BYTES: COLLAPSED FUNCTION __SEH_prolog4]
; [00000014 BYTES: COLLAPSED FUNCTION __SEH_epilog4]
align 10h
; [00000195 BYTES: COLLAPSED FUNCTION SEH_40BF50]
; [00000039 BYTES: COLLAPSED FUNCTION __FF_MSGBANNER]
; [00000024 BYTES: COLLAPSED FUNCTION __GET_RTERRMSG]
; [000001BB BYTES: COLLAPSED FUNCTION __NMSG_WRITE]
; [0000001F BYTES: COLLAPSED FUNCTION __set_abort_behavior]
; [00000042 BYTES: COLLAPSED FUNCTION _abort]
db 0CCh


; Attributes: bp-based frame

sub_887FFF proc near

arg_0= dword ptr  8

push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_0]
mov     dword_89BA50, eax
pop     ebp
retn
sub_887FFF endp

; [00000123 BYTES: COLLAPSED FUNCTION __call_reportfault]


; Attributes: bp-based frame

sub_88812F proc near

arg_0= dword ptr  8

push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_0]
mov     dword_89BA54, eax
pop     ebp
retn
sub_88812F endp

; [0000002B BYTES: COLLAPSED FUNCTION __invalid_parameter]
; [00000010 BYTES: COLLAPSED FUNCTION __invalid_parameter_noinfo]
; [0000002B BYTES: COLLAPSED FUNCTION __invoke_watson]
; [00000013 BYTES: COLLAPSED FUNCTION ___doserrno]
; [00000021 BYTES: COLLAPSED FUNCTION __dosmaperr]
; [00000013 BYTES: COLLAPSED FUNCTION __errno]
; [00000041 BYTES: COLLAPSED FUNCTION __get_errno_from_oserr]
align 10h
; [00000095 BYTES: COLLAPSED FUNCTION __aulldvrm]


; Attributes: bp-based frame

; int __cdecl sub_8882C5(char, FILE *Stream)
sub_8882C5 proc near

arg_0= byte ptr  8
Stream= dword ptr  0Ch

push    ebp
mov     ebp, esp
push    esi
mov     esi, [ebp+Stream]
push    edi
push    esi             ; Stream
call    __fileno
pop     ecx
mov     ecx, [esi+0Ch]
mov     edi, eax
test    cl, 82h
jnz     short loc_8882F5
call    __errno
mov     dword ptr [eax], 9

loc_8882E9:
or      dword ptr [esi+0Ch], 20h
or      eax, 0FFFFFFFFh
jmp     loc_88840E

loc_8882F5:
test    cl, 40h
jz      short loc_888307
call    __errno
mov     dword ptr [eax], 22h ; '"'
jmp     short loc_8882E9

loc_888307:
push    ebx
xor     ebx, ebx
test    cl, 1
jz      short loc_888322
mov     [esi+4], ebx
test    cl, 10h
jz      short loc_888394
mov     eax, [esi+8]
and     ecx, 0FFFFFFFEh
mov     [esi], eax
mov     [esi+0Ch], ecx

loc_888322:
mov     eax, [esi+0Ch]
and     eax, 0FFFFFFEFh
or      eax, 2
mov     [esi+0Ch], eax
mov     [esi+4], ebx
test    eax, 10Ch
jnz     short loc_888362
call    sub_88C9B2
add     eax, 20h ; ' '
cmp     esi, eax
jz      short loc_888350
call    sub_88C9B2
add     eax, 40h ; '@'
cmp     esi, eax
jnz     short loc_88835B

loc_888350:             ; FileHandle
push    edi
call    __isatty
pop     ecx
test    eax, eax
jnz     short loc_888362

loc_88835B:
push    esi
call    __getbuf
pop     ecx

loc_888362:
test    dword ptr [esi+0Ch], 108h
jz      short loc_8883E5
mov     edx, [esi+8]
mov     ecx, [esi]
lea     eax, [edx+1]
mov     [esi], eax
mov     eax, [esi+18h]
sub     ecx, edx
dec     eax
mov     [ebp+Stream], ecx
mov     [esi+4], eax
test    ecx, ecx
jle     short loc_88839C
push    ecx
push    edx
push    edi
call    sub_88CB06
add     esp, 0Ch
mov     ebx, eax
jmp     short loc_8883DB

loc_888394:
or      ecx, 20h
mov     [esi+0Ch], ecx
jmp     short loc_888404

loc_88839C:
cmp     edi, 0FFFFFFFFh
jz      short loc_8883BC
cmp     edi, 0FFFFFFFEh
jz      short loc_8883BC
mov     ecx, edi
mov     eax, edi
and     ecx, 1Fh
sar     eax, 5
shl     ecx, 6
add     ecx, dword_89BB38[eax*4]
jmp     short loc_8883C1

loc_8883BC:
mov     ecx, offset unk_89AA70

loc_8883C1:
test    byte ptr [ecx+4], 20h
jz      short loc_8883DB
push    2               ; Origin
push    ebx
push    ebx             ; Offset
push    edi             ; FileHandle
call    __lseeki64
and     eax, edx
add     esp, 10h
cmp     eax, 0FFFFFFFFh
jz      short loc_888400

loc_8883DB:
mov     ecx, [esi+8]
mov     al, [ebp+arg_0]
mov     [ecx], al
jmp     short loc_8883FB

loc_8883E5:
xor     eax, eax
inc     eax
push    eax
mov     [ebp+Stream], eax
lea     eax, [ebp+arg_0]
push    eax
push    edi
call    sub_88CB06
add     esp, 0Ch
mov     ebx, eax

loc_8883FB:
cmp     ebx, [ebp+Stream]
jz      short loc_888409

loc_888400:
or      dword ptr [esi+0Ch], 20h

loc_888404:
or      eax, 0FFFFFFFFh
jmp     short loc_88840D

loc_888409:
movzx   eax, [ebp+arg_0]

loc_88840D:
pop     ebx

loc_88840E:
pop     edi
pop     esi
pop     ebp
retn
sub_8882C5 endp

; [000000F9 BYTES: COLLAPSED FUNCTION __vswprintf_helper]


; Attributes: library function bp-based frame

; int __cdecl _vswprintf_s_l(wchar_t *const Buffer, const size_t BufferCount, const wchar_t *const Format, const _locale_t Locale, va_list ArgList)
__vswprintf_s_l proc near

Buffer= dword ptr  8
BufferCount= dword ptr  0Ch
Format= dword ptr  10h
Locale= dword ptr  14h
ArgList= dword ptr  18h

push    ebp
mov     ebp, esp
cmp     [ebp+Format], 0
jnz     short loc_888529
call    __errno
mov     dword ptr [eax], 16h
call    __invalid_parameter_noinfo
or      eax, 0FFFFFFFFh
pop     ebp
retn

loc_888529:
push    esi
mov     esi, [ebp+Buffer]
test    esi, esi
jz      short loc_88856C
cmp     [ebp+BufferCount], 0
jbe     short loc_88856C
push    [ebp+ArgList]
push    [ebp+Locale]
push    [ebp+Format]
push    [ebp+BufferCount]
push    esi
push    offset sub_88D5C5
call    __vswprintf_helper
add     esp, 18h
test    eax, eax
jns     short loc_88855A
xor     ecx, ecx
mov     [esi], cx

loc_88855A:
cmp     eax, 0FFFFFFFEh
jnz     short loc_88857F
call    __errno
mov     dword ptr [eax], 22h ; '"'
jmp     short loc_888577

loc_88856C:
call    __errno
mov     dword ptr [eax], 16h

loc_888577:
call    __invalid_parameter_noinfo
or      eax, 0FFFFFFFFh

loc_88857F:
pop     esi
pop     ebp
retn
__vswprintf_s_l endp




sub_888582 proc near
mov     eax, offset dword_89A254
retn
sub_888582 endp




sub_888588 proc near
mov     eax, offset dword_89A258
retn
sub_888588 endp




sub_88858E proc near
mov     eax, offset dword_89A250
retn
sub_88858E endp




sub_888594 proc near
mov     eax, offset off_89A2E0
retn
sub_888594 endp



; Attributes: bp-based frame

sub_88859A proc near

arg_0= dword ptr  8

push    ebp
mov     ebp, esp
mov     ecx, [ebp+arg_0]
test    ecx, ecx
jnz     short loc_8885B9
call    __errno
mov     dword ptr [eax], 16h
call    __invalid_parameter_noinfo
push    16h
pop     eax
pop     ebp
retn

loc_8885B9:
mov     eax, dword_89A254
mov     [ecx], eax
xor     eax, eax
pop     ebp
retn
sub_88859A endp



; Attributes: bp-based frame

sub_8885C4 proc near

arg_0= dword ptr  8

push    ebp
mov     ebp, esp
mov     ecx, [ebp+arg_0]
test    ecx, ecx
jnz     short loc_8885E3
call    __errno
mov     dword ptr [eax], 16h
call    __invalid_parameter_noinfo
push    16h
pop     eax
pop     ebp
retn

loc_8885E3:
mov     eax, dword_89A258
mov     [ecx], eax
xor     eax, eax
pop     ebp
retn
sub_8885C4 endp



; Attributes: bp-based frame

sub_8885EE proc near

arg_0= dword ptr  8

push    ebp
mov     ebp, esp
mov     ecx, [ebp+arg_0]
test    ecx, ecx
jnz     short loc_88860D
call    __errno
mov     dword ptr [eax], 16h
call    __invalid_parameter_noinfo
push    16h
pop     eax
pop     ebp
retn

loc_88860D:
mov     eax, dword_89A250
mov     [ecx], eax
xor     eax, eax
pop     ebp
retn
sub_8885EE endp

; [00000229 BYTES: COLLAPSED FUNCTION __gmtime64_s]
align 10h
; [00000090 BYTES: COLLAPSED FUNCTION _memset]
; [00000050 BYTES: COLLAPSED FUNCTION ___tzset]
; [00000046 BYTES: COLLAPSED FUNCTION __isindst]
; [000001E3 BYTES: COLLAPSED FUNCTION __isindst_nolock]
align 2
; [00000334 BYTES: COLLAPSED FUNCTION __tzset_nolock]
; [000001E9 BYTES: COLLAPSED FUNCTION _cvtdate]
align 10h
; [000000AA BYTES: COLLAPSED FUNCTION __alldiv]
align 10h
; [000000B2 BYTES: COLLAPSED FUNCTION __allrem]
align 10h
; [00000068 BYTES: COLLAPSED FUNCTION __aulldiv]
; [00000090 BYTES: COLLAPSED FUNCTION ___addlocaleref]
; [0000015A BYTES: COLLAPSED FUNCTION ___freetlocinfo]
; [0000009B BYTES: COLLAPSED FUNCTION ___removelocaleref]
; [0000007C BYTES: COLLAPSED FUNCTION ___updatetlocinfo]
; [0000004B BYTES: COLLAPSED FUNCTION __updatetlocinfoEx_nolock]
; [0000001E BYTES: COLLAPSED FUNCTION ___initmbctable]
; [0000003A BYTES: COLLAPSED FUNCTION CPtoLocaleName(int)]
; [0000006C BYTES: COLLAPSED FUNCTION getSystemCP(int)]
; [00000069 BYTES: COLLAPSED FUNCTION setSBCS(threadmbcinfostruct *)]
; [0000018E BYTES: COLLAPSED FUNCTION setSBUpLow(threadmbcinfostruct *)]
; [000000A5 BYTES: COLLAPSED FUNCTION ___updatetmbcinfo]
; [00000181 BYTES: COLLAPSED FUNCTION __setmbcp]
jmp     short loc_889AAA
; [0000002B BYTES: COLLAPSED CHUNK OF FUNCTION __setmbcp]
; [000001F5 BYTES: COLLAPSED FUNCTION __setmbcp_nolock]
; [000000B2 BYTES: COLLAPSED FUNCTION __towlower_l]
; [00000137 BYTES: COLLAPSED FUNCTION _freefls(x)]
; [00000018 BYTES: COLLAPSED FUNCTION __getptd]
; [0000006F BYTES: COLLAPSED FUNCTION __getptd_noexit]
; [000000B3 BYTES: COLLAPSED FUNCTION __initptd]
; [00000076 BYTES: COLLAPSED FUNCTION __mtinit]
; [0000001D BYTES: COLLAPSED FUNCTION __mtterm]
; [00000052 BYTES: COLLAPSED FUNCTION __locterm]
; [00000040 BYTES: COLLAPSED FUNCTION __CxxUnhandledExceptionFilter(_EXCEPTION_POINTERS *)]
align 10h



sub_88A0F0 proc near
push    offset ?__CxxUnhandledExceptionFilter@@YGJPAU_EXCEPTION_POINTERS@@@Z ; lpTopLevelExceptionFilter
call    ___crtSetUnhandledExceptionFilter
pop     ecx
xor     eax, eax
retn
sub_88A0F0 endp

; [0000015B BYTES: COLLAPSED FUNCTION __XcptFilter]
; [00000015 BYTES: COLLAPSED FUNCTION __heap_init]
; [000002AE BYTES: COLLAPSED FUNCTION __ioinit]
; [000000AC BYTES: COLLAPSED FUNCTION sub_88A51C]
; [0000018D BYTES: COLLAPSED FUNCTION _wparse_cmdline]
; [000000E1 BYTES: COLLAPSED FUNCTION __wsetenvp]
db 0CCh


; Attributes: bp-based frame

sub_88A837 proc near

arg_0= dword ptr  8

push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_0]
mov     dword_89B420, eax
pop     ebp
retn
sub_88A837 endp

; [00000040 BYTES: COLLAPSED FUNCTION __set_error_mode]
; [0000009A BYTES: COLLAPSED FUNCTION ___security_init_cookie]



sub_88A91E proc near
push    esi
push    edi
mov     esi, offset unk_8980D4
mov     edi, offset unk_8980D4
jmp     short loc_88A937

loc_88A92C:
mov     eax, [esi]
test    eax, eax
jz      short loc_88A934
call    eax

loc_88A934:
add     esi, 4

loc_88A937:
cmp     esi, edi
jb      short loc_88A92C
pop     edi
pop     esi
retn
sub_88A91E endp




; void __cdecl sub_88A93E()
sub_88A93E proc near
push    esi
push    edi
mov     esi, offset unk_8980DC
mov     edi, offset unk_8980DC
jmp     short loc_88A957

loc_88A94C:
mov     eax, [esi]
test    eax, eax
jz      short loc_88A954
call    eax

loc_88A954:
add     esi, 4

loc_88A957:
cmp     esi, edi
jb      short loc_88A94C
pop     edi
pop     esi
retn
sub_88A93E endp

; [0000005B BYTES: COLLAPSED FUNCTION ___crtGetEnvironmentStringsW]
; [0000001E BYTES: COLLAPSED FUNCTION ___crtFlsAlloc]
; [0000001F BYTES: COLLAPSED FUNCTION ___crtFlsFree]
; [0000001F BYTES: COLLAPSED FUNCTION ___crtFlsGetValue]
; [00000022 BYTES: COLLAPSED FUNCTION ___crtFlsSetValue]
; [00000021 BYTES: COLLAPSED FUNCTION ___crtGetShowWindowMode]
; [0000003E BYTES: COLLAPSED FUNCTION ___crtIsPackagedApp]
; [0000023F BYTES: COLLAPSED CHUNK OF FUNCTION __init_pointers]
; [0000000E BYTES: COLLAPSED FUNCTION ___crtSetUnhandledExceptionFilter]
; [00000015 BYTES: COLLAPSED FUNCTION ___crtTerminateProcess]
; [00000016 BYTES: COLLAPSED FUNCTION ___crtUnhandledException]
; [0000004D BYTES: COLLAPSED FUNCTION __wwincmdln]
align 10h
; [0000004C BYTES: COLLAPSED FUNCTION _CallSettingFrame(x,x,x)]
; [00000038 BYTES: COLLAPSED FUNCTION _inconsistency(void)]
; [00000034 BYTES: COLLAPSED FUNCTION terminate(void)]
; [00000013 BYTES: COLLAPSED FUNCTION unexpected(void)]
; [00000011 BYTES: COLLAPSED FUNCTION __initp_eh_hooks]
; [0000008B BYTES: COLLAPSED FUNCTION ___DestructExceptionObject]


; Attributes: bp-based frame

; int __stdcall sub_88AEC7(struct exception *)
sub_88AEC7 proc near

arg_0= dword ptr  8

push    ebp
mov     ebp, esp
push    esi
push    [ebp+arg_0]     ; struct exception *
mov     esi, ecx
call    ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception(std::exception const &)
mov     dword ptr [esi], offset off_894304
mov     eax, esi
pop     esi
pop     ebp
retn    4
sub_88AEC7 endp




sub_88AEE2 proc near
mov     dword ptr [ecx], offset off_894304
jmp     sub_8871F2
sub_88AEE2 endp



; Attributes: bp-based frame

; int __thiscall sub_88AEED(void *Block, char)
sub_88AEED proc near

arg_0= byte ptr  8

push    ebp
mov     ebp, esp
push    esi
mov     esi, ecx
mov     dword ptr [esi], offset off_894304
call    sub_8871F2
test    [ebp+arg_0], 1
jz      short loc_88AF0B
push    esi             ; Block
call    j__free
pop     ecx

loc_88AF0B:
mov     eax, esi
pop     esi
pop     ebp
retn    4
sub_88AEED endp

; [000001CE BYTES: COLLAPSED FUNCTION CallCatchBlock(EHExceptionRecord *,EHRegistrationNode *,_CONTEXT *,_s_FuncInfo const *,void *,int,ulong)]
; [0000003F BYTES: COLLAPSED FUNCTION CallUnexpected(_s_ESTypeList const *)]
align 10h
; [0000007B BYTES: COLLAPSED FUNCTION CatchIt(EHExceptionRecord *,EHRegistrationNode *,_CONTEXT *,void *,_s_FuncInfo const *,_s_HandlerType const *,_s_CatchableType const *,_s_TryBlockMapEntry const *,int,EHRegistrationNode *,uchar)]
; [0000004D BYTES: COLLAPSED FUNCTION ExFilterRethrow(_EXCEPTION_POINTERS *)]
; [0000039A BYTES: COLLAPSED FUNCTION FindHandler(EHExceptionRecord *,EHRegistrationNode *,_CONTEXT *,void *,_s_FuncInfo const *,uchar,int,EHRegistrationNode *)]
db 0CCh
; [0000011A BYTES: COLLAPSED FUNCTION FindHandlerForForeignException(EHExceptionRecord *,EHRegistrationNode *,_CONTEXT *,void *,_s_FuncInfo const *,int,int,EHRegistrationNode *)]
; [00000080 BYTES: COLLAPSED FUNCTION IsInExceptionSpec(EHExceptionRecord *,_s_ESTypeList const *)]
call    ?terminate@@YAXXZ ; terminate(void)
db 0CCh
; [00000025 BYTES: COLLAPSED FUNCTION ___AdjustPointer]
; [0000008D BYTES: COLLAPSED FUNCTION ___BuildCatchObject]
align 2
; [00000185 BYTES: COLLAPSED FUNCTION ___BuildCatchObjectHelper]
; [0000004E BYTES: COLLAPSED FUNCTION ___FrameUnwindFilter]
; [000000D9 BYTES: COLLAPSED FUNCTION ___FrameUnwindToState]
; [000000DF BYTES: COLLAPSED FUNCTION ___InternalCxxFrameHandler]
; [0000005D BYTES: COLLAPSED FUNCTION ___TypeMatch]
; [00000055 BYTES: COLLAPSED FUNCTION _strcpy_s]



sub_88BC13 proc near
and     dword_89D080, 0
retn
sub_88BC13 endp

; [00000034 BYTES: COLLAPSED FUNCTION __lock]
; [00000054 BYTES: COLLAPSED FUNCTION __mtdeletelocks]
; [000000A7 BYTES: COLLAPSED FUNCTION __mtinitlocknum]
; [00000035 BYTES: COLLAPSED FUNCTION __mtinitlocks]
; [00000015 BYTES: COLLAPSED FUNCTION __unlock]
align 10h
; [00000090 BYTES: COLLAPSED FUNCTION __local_unwind4]
; [00000046 BYTES: COLLAPSED FUNCTION __unwind_handler4]
; [0000001C BYTES: COLLAPSED FUNCTION _seh_longjmp_unwind4(x)]
; [00000017 BYTES: COLLAPSED FUNCTION _EH4_CallFilterFunc(x,x)]
; [00000019 BYTES: COLLAPSED FUNCTION _EH4_TransferToHandler(x,x)]
; [00000019 BYTES: COLLAPSED FUNCTION _EH4_GlobalUnwind2(x,x)]
; [00000017 BYTES: COLLAPSED FUNCTION _EH4_LocalUnwind(x,x,x,x)]
align 10h
; [00000043 BYTES: COLLAPSED FUNCTION __FindPESection]
align 10h
; [000000BA BYTES: COLLAPSED FUNCTION __IsNonwritableInCurrentImage]
align 10h
; [00000031 BYTES: COLLAPSED FUNCTION __ValidateImageBase]
; [0000001F BYTES: COLLAPSED FUNCTION __initp_misc_cfltcvt_tab]


; Attributes: bp-based frame

sub_88C060 proc near

arg_0= dword ptr  8

push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_0]
mov     dword_89BFE0, eax
pop     ebp
retn
sub_88C060 endp




sub_88C06D proc near
push    dword_89BFEC    ; Ptr
call    ds:DecodePointer
retn
sub_88C06D endp

; [0000001C BYTES: COLLAPSED FUNCTION __initp_misc_winsig]
; [000001B5 BYTES: COLLAPSED FUNCTION _raise]
; [0000003C BYTES: COLLAPSED FUNCTION _siglookup]
; [000000AB BYTES: COLLAPSED FUNCTION _realloc]
; [00000069 BYTES: COLLAPSED FUNCTION __recalloc]
; [0000007A BYTES: COLLAPSED FUNCTION __calloc_impl]
; [0000006C BYTES: COLLAPSED FUNCTION _wcscat_s]
; [0000005C BYTES: COLLAPSED FUNCTION _wcscpy_s]
; [00000019 BYTES: COLLAPSED FUNCTION _wcslen]


; Attributes: bp-based frame

sub_88C4F6 proc near

var_24= byte ptr -24h
var_20= dword ptr -20h
lpOutputString= dword ptr -1Ch
var_18= dword ptr -18h
var_14= dword ptr -14h
var_10= byte ptr -10h
var_8= byte ptr -8
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h

push    ebp
mov     ebp, esp
sub     esp, 24h
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+var_4], eax
mov     eax, [ebp+arg_0]
push    ebx
mov     ebx, ds:EncodePointer
push    esi
push    edi
mov     [ebp+lpOutputString], eax
mov     eax, [ebp+arg_4]
xor     edi, edi
push    edi             ; Ptr
mov     [ebp+var_20], eax
call    ebx ; EncodePointer
mov     esi, eax
mov     [ebp+var_18], esi
call    ___crtIsPackagedApp
mov     [ebp+var_14], eax
cmp     dword_89C000, edi
jnz     loc_88C5E7
push    800h            ; dwFlags
push    edi             ; hFile
push    offset LibFileName ; "USER32.DLL"
call    ds:LoadLibraryExW
mov     esi, eax
test    esi, esi
jnz     short loc_88C574
call    ds:GetLastError
cmp     eax, 57h ; 'W'
jnz     loc_88C6C7
push    offset LibFileName ; "USER32.DLL"
call    ds:LoadLibraryW
mov     esi, eax
test    esi, esi
jz      loc_88C6C7

loc_88C574:
push    offset aMessageboxw ; "MessageBoxW"
push    esi             ; hModule
call    ds:GetProcAddress
test    eax, eax
jz      loc_88C6C7
push    eax             ; Ptr
call    ebx ; EncodePointer
push    offset aGetactivewindo ; "GetActiveWindow"
push    esi             ; hModule
mov     dword_89C000, eax
call    ds:GetProcAddress
push    eax             ; Ptr
call    ebx ; EncodePointer
push    offset aGetlastactivep ; "GetLastActivePopup"
push    esi             ; hModule
mov     dword_89C004, eax
call    ds:GetProcAddress
push    eax             ; Ptr
call    ebx ; EncodePointer
push    offset aGetuserobjecti ; "GetUserObjectInformationW"
push    esi             ; hModule
mov     dword_89C008, eax
call    ds:GetProcAddress
push    eax             ; Ptr
call    ebx ; EncodePointer
mov     dword_89C010, eax
test    eax, eax
jz      short loc_88C5E4
push    offset aGetprocesswind ; "GetProcessWindowStation"
push    esi             ; hModule
call    ds:GetProcAddress
push    eax             ; Ptr
call    ebx ; EncodePointer
mov     dword_89C00C, eax

loc_88C5E4:
mov     esi, [ebp+var_18]

loc_88C5E7:
call    ds:IsDebuggerPresent
test    eax, eax
jz      short loc_88C60C
mov     eax, [ebp+lpOutputString]
test    eax, eax
jz      short loc_88C5FF
push    eax             ; lpOutputString
call    ds:OutputDebugStringW

loc_88C5FF:
cmp     [ebp+var_14], edi
jz      short loc_88C621
push    4

loc_88C606:
pop     eax
jmp     loc_88C6C9

loc_88C60C:
cmp     [ebp+var_14], edi
jz      short loc_88C621
push    dword_89C000    ; Ptr
call    ds:DecodePointer
push    3
jmp     short loc_88C606

loc_88C621:
mov     eax, dword_89C00C
mov     ebx, ds:DecodePointer
cmp     eax, esi
jz      short loc_88C67F
cmp     dword_89C010, esi
jz      short loc_88C67F
push    eax             ; Ptr
call    ebx ; DecodePointer
push    dword_89C010    ; Ptr
mov     [ebp+var_14], eax
call    ebx ; DecodePointer
mov     ecx, [ebp+var_14]
mov     [ebp+var_18], eax
test    ecx, ecx
jz      short loc_88C67F
test    eax, eax
jz      short loc_88C67F
call    ecx
test    eax, eax
jz      short loc_88C674
lea     ecx, [ebp+var_24]
push    ecx
push    0Ch
lea     ecx, [ebp+var_10]
push    ecx
push    1
push    eax
call    [ebp+var_18]
test    eax, eax
jz      short loc_88C674
test    [ebp+var_8], 1
jnz     short loc_88C67F

loc_88C674:
mov     esi, [ebp+arg_8]
or      esi, 200000h
jmp     short loc_88C6AF

loc_88C67F:
mov     eax, dword_89C004
cmp     eax, esi
jz      short loc_88C6AC
push    eax             ; Ptr
call    ebx ; DecodePointer
test    eax, eax
jz      short loc_88C6AC
call    eax
mov     edi, eax
test    edi, edi
jz      short loc_88C6AC
mov     eax, dword_89C008
cmp     eax, esi
jz      short loc_88C6AC
push    eax             ; Ptr
call    ebx ; DecodePointer
test    eax, eax
jz      short loc_88C6AC
push    edi
call    eax
mov     edi, eax

loc_88C6AC:
mov     esi, [ebp+arg_8]

loc_88C6AF:             ; Ptr
push    dword_89C000
call    ebx ; DecodePointer
test    eax, eax
jz      short loc_88C6C7
push    esi
push    [ebp+var_20]
push    [ebp+lpOutputString]
push    edi
call    eax
jmp     short loc_88C6C9

loc_88C6C7:
xor     eax, eax

loc_88C6C9:
mov     ecx, [ebp+var_4]
pop     edi
pop     esi
xor     ecx, ebp        ; StackCookie
pop     ebx
call    @__security_check_cookie@4 ; __security_check_cookie(x)
leave
retn
sub_88C4F6 endp

; [000000A4 BYTES: COLLAPSED FUNCTION _strncpy_s]
; [0000001E BYTES: COLLAPSED FUNCTION __freea]
; [0000004E BYTES: COLLAPSED FUNCTION _GetTableIndexFromLocaleName]
; [0000004C BYTES: COLLAPSED FUNCTION ___crtCompareStringEx]
; [0000002A BYTES: COLLAPSED FUNCTION ___crtDownlevelLocaleNameToLCID]
; [0000004C BYTES: COLLAPSED FUNCTION ___crtLCMapStringEx]
; [0000006E BYTES: COLLAPSED FUNCTION ___wcsnicmp_ascii]
; [00000073 BYTES: COLLAPSED FUNCTION ___initstdio]
; [00000027 BYTES: COLLAPSED FUNCTION ___endstdio]



sub_88C9B2 proc near
mov     eax, offset off_89AC28
retn
sub_88C9B2 endp

; [0000003F BYTES: COLLAPSED FUNCTION __lock_file]
; [00000030 BYTES: COLLAPSED FUNCTION __lock_file2]
; [0000003A BYTES: COLLAPSED FUNCTION __unlock_file]
; [0000002D BYTES: COLLAPSED FUNCTION __unlock_file2]
; [00000024 BYTES: COLLAPSED FUNCTION __fileno]
; [00000054 BYTES: COLLAPSED FUNCTION __isatty]


; Attributes: bp-based frame

sub_88CB06 proc near

var_1C= dword ptr -1Ch
ms_exc= CPPEH_RECORD ptr -18h
arg_0= dword ptr  8
arg_4= dword ptr  0Ch
nNumberOfBytesToWrite= dword ptr  10h

; __unwind { // __SEH_prolog4
push    10h
push    offset stru_898578
call    __SEH_prolog4
mov     esi, [ebp+arg_0]
cmp     esi, 0FFFFFFFEh
jnz     short loc_88CB32
call    ___doserrno
and     dword ptr [eax], 0
call    __errno
mov     dword ptr [eax], 9
jmp     loc_88CBDF

loc_88CB32:
test    esi, esi
js      loc_88CBC7
cmp     esi, dword_89D114
jnb     loc_88CBC7
mov     ebx, esi
sar     ebx, 5
mov     edi, esi
and     edi, 1Fh
shl     edi, 6
mov     eax, dword_89BB38[ebx*4]
movsx   eax, byte ptr [eax+edi+4]
and     eax, 1
jz      short loc_88CBC7
push    esi
call    ___lock_fhandle
pop     ecx
;   __try { // __finally(loc_88CBB9)
and     [ebp+ms_exc.registration.TryLevel], 0
mov     eax, dword_89BB38[ebx*4]
test    byte ptr [eax+edi+4], 1
jz      short loc_88CB90
push    [ebp+nNumberOfBytesToWrite] ; nNumberOfBytesToWrite
push    [ebp+arg_4]     ; int
push    esi             ; int
call    sub_88CBE8
add     esp, 0Ch
mov     edi, eax
jmp     short loc_88CBA6

loc_88CB90:
call    __errno
mov     dword ptr [eax], 9
call    ___doserrno
and     dword ptr [eax], 0
or      edi, 0FFFFFFFFh

loc_88CBA6:
mov     [ebp+var_1C], edi
;   } // starts at 88CB6B
mov     [ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
call    loc_88CBBF

loc_88CBB5:
mov     eax, edi
jmp     short loc_88CBE2

loc_88CBB9:
;   __finally // owned by 88CB6B
mov     esi, [ebp+arg_0]
mov     edi, [ebp+var_1C]

loc_88CBBF:
push    esi
call    __unlock_fhandle
pop     ecx
retn

loc_88CBC7:
call    ___doserrno
and     dword ptr [eax], 0
call    __errno
mov     dword ptr [eax], 9
call    __invalid_parameter_noinfo

loc_88CBDF:
or      eax, 0FFFFFFFFh

loc_88CBE2:
call    __SEH_epilog4
retn
; } // starts at 88CB06
sub_88CB06 endp



; Attributes: bp-based frame

; int __cdecl sub_88CBE8(int, int, DWORD nNumberOfBytesToWrite)
sub_88CBE8 proc near

CodePage= dword ptr -1AF0h
var_1AEC= dword ptr -1AECh
var_1AE8= dword ptr -1AE8h
Mode= dword ptr -1AE4h
var_1ADD= byte ptr -1ADDh
NumberOfBytesWritten= dword ptr -1ADCh
var_1AD8= dword ptr -1AD8h
var_1AD4= dword ptr -1AD4h
var_1AD0= dword ptr -1AD0h
SrcCh= dword ptr -1ACCh
var_1AC8= dword ptr -1AC8h
WideCharStr= word ptr -1AC4h
FileHandle= dword ptr -1AC0h
lpBuffer= dword ptr -1ABCh
Buffer= byte ptr -1AB8h
var_1410= byte ptr -1410h
var_6B8= word ptr -6B8h
MultiByteStr= byte ptr -0Ch
var_B= byte ptr -0Bh
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch
nNumberOfBytesToWrite= dword ptr  10h

push    ebp
mov     ebp, esp
mov     eax, 1AF0h
call    __alloca_probe
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+var_4], eax
mov     eax, [ebp+arg_0]
mov     ecx, [ebp+arg_4]
xor     edx, edx
push    edi
mov     edi, edx
mov     [ebp+FileHandle], eax
mov     [ebp+lpBuffer], ecx
mov     dword ptr [ebp+WideCharStr], edi
mov     [ebp+var_1AD4], edx
cmp     [ebp+nNumberOfBytesToWrite], edx
jnz     short loc_88CC2E
xor     eax, eax
jmp     loc_88D405

loc_88CC2E:
test    ecx, ecx
jnz     short loc_88CC51
call    ___doserrno
and     [eax], edi
call    __errno
mov     dword ptr [eax], 16h
call    __invalid_parameter_noinfo
or      eax, 0FFFFFFFFh
jmp     loc_88D405

loc_88CC51:
push    ebx
push    esi
mov     ecx, eax
sar     ecx, 5
mov     esi, eax
and     esi, 1Fh
shl     esi, 6
mov     [ebp+var_1AD0], ecx
mov     ecx, dword_89BB38[ecx*4]
mov     [ebp+var_1AEC], esi
mov     bl, [esi+ecx+24h]
add     bl, bl
sar     bl, 1
cmp     bl, 2
jz      short loc_88CC85
cmp     bl, 1
jnz     short loc_88CCB0

loc_88CC85:
mov     eax, [ebp+nNumberOfBytesToWrite]
not     eax
test    al, 1
jnz     short loc_88CCAA
call    ___doserrno
and     [eax], edi
call    __errno
mov     dword ptr [eax], 16h
call    __invalid_parameter_noinfo
jmp     loc_88D3F6

loc_88CCAA:
mov     eax, [ebp+FileHandle]

loc_88CCB0:
test    byte ptr [esi+ecx+4], 20h
jz      short loc_88CCC4
push    2               ; dwMoveMethod
push    edx
push    edx             ; liDistanceToMove
push    eax             ; FileHandle
call    __lseeki64_nolock
add     esp, 10h

loc_88CCC4:             ; FileHandle
push    [ebp+FileHandle]
call    __isatty
pop     ecx
test    eax, eax
jz      loc_88CFF0
mov     eax, [ebp+var_1AD0]
mov     eax, dword_89BB38[eax*4]
test    byte ptr [esi+eax+4], 80h
jz      loc_88CFF0
call    __getptd
mov     eax, [eax+6Ch]
xor     ecx, ecx
cmp     [eax+0A8h], ecx
lea     eax, [ebp+Mode]
push    eax             ; lpMode
mov     eax, [ebp+var_1AD0]
setz    cl
mov     eax, dword_89BB38[eax*4]
push    dword ptr [esi+eax] ; hConsoleHandle
mov     [ebp+FileHandle], ecx
call    ds:GetConsoleMode
test    eax, eax
jz      loc_88CFF0
cmp     [ebp+FileHandle], edi
jz      short loc_88CD3E
test    bl, bl
jz      loc_88CFF0

loc_88CD3E:
call    ds:GetConsoleCP
mov     edx, [ebp+lpBuffer]
and     [ebp+NumberOfBytesWritten], edi
mov     ecx, edx
mov     [ebp+CodePage], eax
mov     [ebp+SrcCh], ecx
cmp     [ebp+nNumberOfBytesToWrite], edi
jbe     loc_88CFE5
xor     eax, eax
mov     [ebp+var_1AC8], eax
mov     [ebp+var_1AE8], 0Ah

loc_88CD79:
test    bl, bl
jnz     loc_88CF10
mov     cl, [ecx]
xor     eax, eax
cmp     cl, 0Ah
setz    al
mov     [ebp+FileHandle], eax
mov     eax, [ebp+var_1AD0]
mov     edx, dword_89BB38[eax*4]
cmp     dword ptr [esi+edx+38h], 0
jz      short loc_88CDBC
mov     al, [esi+edx+34h]
mov     [ebp+MultiByteStr], al
push    2
lea     eax, [ebp+MultiByteStr]
mov     [ebp+var_B], cl
and     dword ptr [esi+edx+38h], 0
push    eax
jmp     short loc_88CE16

loc_88CDBC:
movsx   eax, cl
push    eax             ; C
call    _isleadbyte
pop     ecx
test    eax, eax
jz      short loc_88CE0E
mov     eax, [ebp+lpBuffer]
mov     edx, [ebp+SrcCh]
sub     eax, edx
add     eax, [ebp+nNumberOfBytesToWrite]
cmp     eax, 1
jbe     loc_88CFB7
push    2               ; SrcSizeInBytes
push    edx             ; SrcCh
lea     eax, [ebp+WideCharStr]
push    eax             ; DstCh
call    _mbtowc
add     esp, 0Ch
cmp     eax, 0FFFFFFFFh
jz      loc_88CFDA
mov     eax, [ebp+SrcCh]
inc     eax
inc     [ebp+var_1AC8]
jmp     short loc_88CE34

loc_88CE0E:             ; SrcSizeInBytes
push    1
push    [ebp+SrcCh]     ; SrcCh

loc_88CE16:
lea     eax, [ebp+WideCharStr]
push    eax             ; DstCh
call    _mbtowc
add     esp, 0Ch
cmp     eax, 0FFFFFFFFh
jz      loc_88CFDA
mov     eax, [ebp+SrcCh]

loc_88CE34:
xor     ecx, ecx
push    ecx             ; lpUsedDefaultChar
push    ecx             ; lpDefaultChar
inc     eax
inc     [ebp+var_1AC8]
push    5               ; cbMultiByte
mov     [ebp+SrcCh], eax
lea     eax, [ebp+MultiByteStr]
push    eax             ; lpMultiByteStr
push    1               ; cchWideChar
lea     eax, [ebp+WideCharStr]
push    eax             ; lpWideCharStr
push    ecx             ; dwFlags
push    [ebp+CodePage]  ; CodePage
call    ds:WideCharToMultiByte
mov     [ebp+Mode], eax
test    eax, eax
jz      loc_88CFDA
push    0               ; lpOverlapped
lea     ecx, [ebp+NumberOfBytesWritten]
push    ecx             ; lpNumberOfBytesWritten
push    eax             ; nNumberOfBytesToWrite
lea     eax, [ebp+MultiByteStr]
push    eax             ; lpBuffer
mov     eax, [ebp+var_1AD0]
mov     eax, dword_89BB38[eax*4]
push    dword ptr [esi+eax] ; hFile
call    ds:WriteFile
test    eax, eax
jz      loc_88D386
mov     edi, [ebp+var_1AC8]
mov     eax, [ebp+Mode]
add     edi, [ebp+var_1AD4]
cmp     [ebp+NumberOfBytesWritten], eax
jl      loc_88CFDA
cmp     [ebp+FileHandle], 0
jz      loc_88CFA0
push    0               ; lpOverlapped
lea     eax, [ebp+NumberOfBytesWritten]
push    eax             ; lpNumberOfBytesWritten
push    1               ; nNumberOfBytesToWrite
lea     eax, [ebp+MultiByteStr]
push    eax             ; lpBuffer
mov     eax, [ebp+var_1AD0]
mov     [ebp+MultiByteStr], 0Dh
mov     eax, dword_89BB38[eax*4]
push    dword ptr [esi+eax] ; hFile
call    ds:WriteFile
test    eax, eax
jz      loc_88D386
cmp     [ebp+NumberOfBytesWritten], 1
jl      loc_88CFDA
inc     [ebp+var_1AD4]
inc     edi
jmp     loc_88CFA0

loc_88CF10:
cmp     bl, 1
jz      short loc_88CF1A
cmp     bl, 2
jnz     short loc_88CF4D

loc_88CF1A:
movzx   eax, word ptr [ecx]
xor     edx, edx
cmp     ax, word ptr [ebp+var_1AE8]
mov     dword ptr [ebp+WideCharStr], eax
mov     eax, [ebp+var_1AC8]
setz    dl
add     ecx, 2
add     eax, 2
mov     [ebp+SrcCh], ecx
mov     [ebp+var_1AC8], eax
mov     [ebp+FileHandle], edx

loc_88CF4D:
cmp     bl, 1
jz      short loc_88CF57
cmp     bl, 2
jnz     short loc_88CFAC

loc_88CF57:             ; Character
push    dword ptr [ebp+WideCharStr]
call    __putwch_nolock
pop     ecx
cmp     ax, [ebp+WideCharStr]
jnz     loc_88D386
add     edi, 2
cmp     [ebp+FileHandle], 0
jz      short loc_88CFA0
push    0Dh
pop     eax
push    eax             ; Character
mov     dword ptr [ebp+WideCharStr], eax
call    __putwch_nolock
pop     ecx
cmp     ax, [ebp+WideCharStr]
jnz     loc_88D386
inc     edi
inc     [ebp+var_1AD4]

loc_88CFA0:
mov     eax, [ebp+var_1AC8]
mov     ecx, [ebp+SrcCh]

loc_88CFAC:
cmp     eax, [ebp+nNumberOfBytesToWrite]
jb      loc_88CD79
jmp     short loc_88CFDA

loc_88CFB7:
mov     ebx, [ebp+var_1AD0]
mov     al, [edx]
mov     ecx, dword_89BB38[ebx*4]
inc     edi
mov     [esi+ecx+34h], al
mov     eax, dword_89BB38[ebx*4]
mov     dword ptr [esi+eax+38h], 1

loc_88CFDA:
mov     esi, [ebp+FileHandle]
jmp     loc_88D38E

loc_88CFE5:
mov     esi, [ebp+FileHandle]
jmp     loc_88D398

loc_88CFF0:
mov     eax, [ebp+var_1AD0]
mov     eax, dword_89BB38[eax*4]
test    byte ptr [esi+eax+4], 80h
jz      loc_88D35D
mov     edx, [ebp+lpBuffer]
xor     esi, esi
mov     [ebp+var_1AC8], esi
test    bl, bl
jnz     loc_88D0FF
mov     eax, edx
mov     dword ptr [ebp+WideCharStr], eax
cmp     [ebp+nNumberOfBytesToWrite], esi
jbe     loc_88D3C0

loc_88D02F:
xor     ecx, ecx
sub     eax, edx
mov     edx, dword ptr [ebp+WideCharStr]
lea     ebx, [ebp+Buffer]
mov     [ebp+FileHandle], ecx

loc_88D045:
cmp     eax, [ebp+nNumberOfBytesToWrite]
jnb     short loc_88D08E
mov     cl, [edx]
inc     edx
inc     eax
mov     [ebp+var_1ADD], cl
cmp     cl, 0Ah
mov     ecx, [ebp+FileHandle]
mov     dword ptr [ebp+WideCharStr], edx
jnz     short loc_88D070
inc     [ebp+var_1AD4]
mov     byte ptr [ebx], 0Dh
inc     ebx
inc     ecx

loc_88D070:
mov     dl, [ebp+var_1ADD]
mov     [ebx], dl
mov     edx, dword ptr [ebp+WideCharStr]
inc     ebx
inc     ecx
mov     [ebp+FileHandle], ecx
cmp     ecx, 13FFh
jb      short loc_88D045

loc_88D08E:
mov     ecx, [ebp+var_1AEC]
lea     eax, [ebp+Buffer]
sub     ebx, eax
push    0               ; lpOverlapped
lea     eax, [ebp+var_1AD8]
push    eax             ; lpNumberOfBytesWritten
push    ebx             ; nNumberOfBytesToWrite
lea     eax, [ebp+Buffer]
push    eax             ; lpBuffer
mov     eax, [ebp+var_1AD0]
mov     eax, dword_89BB38[eax*4]
push    dword ptr [ecx+eax] ; hFile
call    ds:WriteFile
test    eax, eax
jz      loc_88D386
add     edi, [ebp+var_1AD8]
mov     edx, [ebp+lpBuffer]
cmp     [ebp+var_1AD8], ebx
jl      loc_88D394
mov     eax, dword ptr [ebp+WideCharStr]
sub     eax, edx
cmp     eax, [ebp+nNumberOfBytesToWrite]
mov     eax, dword ptr [ebp+WideCharStr]
jb      loc_88D02F
jmp     loc_88D394

loc_88D0FF:
mov     ecx, edx
cmp     bl, 2
jnz     loc_88D208
mov     [ebp+FileHandle], ecx
cmp     [ebp+nNumberOfBytesToWrite], esi
jbe     loc_88D3C0
mov     [ebp+var_1AE8], 0Ah

loc_88D123:
and     [ebp+Mode], 0
mov     edi, [ebp+var_1AD4]
mov     eax, ecx
sub     eax, edx
mov     edx, [ebp+Mode]
lea     ebx, [ebp+Buffer]

loc_88D140:
cmp     eax, [ebp+nNumberOfBytesToWrite]
jnb     short loc_88D183
movzx   esi, word ptr [ecx]
add     ecx, 2
add     eax, 2
mov     [ebp+FileHandle], ecx
cmp     si, word ptr [ebp+var_1AE8]
jnz     short loc_88D172
push    0Dh
pop     ecx
mov     [ebx], cx
mov     ecx, [ebp+FileHandle]
add     edi, 2
add     ebx, 2
add     edx, 2

loc_88D172:
mov     [ebx], si
add     edx, 2
add     ebx, 2
cmp     edx, 13FEh
jb      short loc_88D140

loc_88D183:
mov     ecx, [ebp+var_1AEC]
lea     eax, [ebp+Buffer]
sub     ebx, eax
push    0               ; lpOverlapped
lea     eax, [ebp+var_1AD8]
push    eax             ; lpNumberOfBytesWritten
push    ebx             ; nNumberOfBytesToWrite
lea     eax, [ebp+Buffer]
push    eax             ; lpBuffer
mov     eax, [ebp+var_1AD0]
mov     [ebp+var_1AD4], edi
mov     eax, dword_89BB38[eax*4]
push    dword ptr [ecx+eax] ; hFile
call    ds:WriteFile
mov     esi, [ebp+var_1AC8]
mov     edi, dword ptr [ebp+WideCharStr]
test    eax, eax
jz      loc_88D386
add     edi, [ebp+var_1AD8]
mov     edx, [ebp+lpBuffer]
mov     dword ptr [ebp+WideCharStr], edi
cmp     [ebp+var_1AD8], ebx
jl      loc_88D394
mov     ecx, [ebp+FileHandle]
mov     eax, ecx
sub     eax, edx
cmp     eax, [ebp+nNumberOfBytesToWrite]
jb      loc_88D123
jmp     loc_88D394

loc_88D208:
mov     ebx, [ebp+nNumberOfBytesToWrite]
mov     [ebp+NumberOfBytesWritten], ecx
test    ebx, ebx
jz      loc_88D3C0
mov     [ebp+var_1AE8], 0Ah

loc_88D223:
and     [ebp+Mode], 0
mov     esi, [ebp+NumberOfBytesWritten]
sub     ecx, edx
mov     edx, [ebp+Mode]
lea     eax, [ebp+var_6B8]

loc_88D23E:
cmp     ecx, ebx
jnb     short loc_88D27D
movzx   edi, word ptr [esi]
add     esi, 2
add     ecx, 2
mov     [ebp+NumberOfBytesWritten], esi
cmp     di, word ptr [ebp+var_1AE8]
jnz     short loc_88D26C
push    0Dh
pop     esi
mov     [eax], si
mov     esi, [ebp+NumberOfBytesWritten]
add     eax, 2
add     edx, 2

loc_88D26C:
mov     [eax], di
add     edx, 2
add     eax, 2
cmp     edx, 6A8h
jb      short loc_88D23E

loc_88D27D:
xor     esi, esi
push    esi             ; lpUsedDefaultChar
push    esi             ; lpDefaultChar
push    0D55h           ; cbMultiByte
lea     ecx, [ebp+var_1410]
push    ecx             ; lpMultiByteStr
lea     ecx, [ebp+var_6B8]
sub     eax, ecx
cdq
sub     eax, edx
sar     eax, 1
push    eax             ; cchWideChar
mov     eax, ecx
push    eax             ; lpWideCharStr
push    esi             ; dwFlags
push    0FDE9h          ; CodePage
call    ds:WideCharToMultiByte
mov     esi, [ebp+var_1AC8]
mov     edi, dword ptr [ebp+WideCharStr]
mov     [ebp+SrcCh], eax
test    eax, eax
jz      loc_88D386
xor     ecx, ecx
mov     [ebp+FileHandle], ecx

loc_88D2CC:             ; lpOverlapped
push    0
sub     eax, ecx
lea     edx, [ebp+var_1AD8]
push    edx             ; lpNumberOfBytesWritten
push    eax             ; nNumberOfBytesToWrite
lea     eax, [ebp+var_1410]
add     eax, ecx
mov     ecx, [ebp+var_1AEC]
push    eax             ; lpBuffer
mov     eax, [ebp+var_1AD0]
mov     eax, dword_89BB38[eax*4]
push    dword ptr [ecx+eax] ; hFile
call    ds:WriteFile
test    eax, eax
jz      short loc_88D31F
mov     ecx, [ebp+FileHandle]
add     ecx, [ebp+var_1AD8]
mov     eax, [ebp+SrcCh]
mov     [ebp+FileHandle], ecx
cmp     eax, ecx
jg      short loc_88D2CC
jmp     short loc_88D339

loc_88D31F:
call    ds:GetLastError
mov     ecx, [ebp+FileHandle]
mov     esi, eax
mov     eax, [ebp+SrcCh]
mov     [ebp+var_1AC8], esi

loc_88D339:
cmp     eax, ecx
jg      short loc_88D38E
mov     ecx, [ebp+NumberOfBytesWritten]
mov     edx, [ebp+lpBuffer]
mov     edi, ecx
sub     edi, edx
mov     dword ptr [ebp+WideCharStr], edi
cmp     edi, ebx
jb      loc_88D223
jmp     short loc_88D394

loc_88D35D:             ; lpOverlapped
push    0
lea     ecx, [ebp+var_1AD8]
push    ecx             ; lpNumberOfBytesWritten
push    [ebp+nNumberOfBytesToWrite] ; nNumberOfBytesToWrite
push    [ebp+lpBuffer]  ; lpBuffer
push    dword ptr [esi+eax] ; hFile
call    ds:WriteFile
test    eax, eax
jz      short loc_88D386
mov     edi, [ebp+var_1AD8]
xor     esi, esi
jmp     short loc_88D38E

loc_88D386:
call    ds:GetLastError
mov     esi, eax

loc_88D38E:
mov     edx, [ebp+lpBuffer]

loc_88D394:
test    edi, edi
jnz     short loc_88D3FB

loc_88D398:
test    esi, esi
jz      short loc_88D3C0
push    5
pop     ebx
cmp     esi, ebx
jnz     short loc_88D3B7
call    __errno
mov     dword ptr [eax], 9
call    ___doserrno
mov     [eax], ebx
jmp     short loc_88D3F6

loc_88D3B7:
push    esi
call    __dosmaperr
pop     ecx
jmp     short loc_88D3F6

loc_88D3C0:
mov     eax, [ebp+var_1AD0]
mov     ecx, [ebp+var_1AEC]
mov     eax, dword_89BB38[eax*4]
test    byte ptr [ecx+eax+4], 40h
jz      short loc_88D3E3
cmp     byte ptr [edx], 1Ah
jnz     short loc_88D3E3
xor     eax, eax
jmp     short loc_88D403

loc_88D3E3:
call    __errno
mov     dword ptr [eax], 1Ch
call    ___doserrno
and     dword ptr [eax], 0

loc_88D3F6:
or      eax, 0FFFFFFFFh
jmp     short loc_88D403

loc_88D3FB:
sub     edi, [ebp+var_1AD4]
mov     eax, edi

loc_88D403:
pop     esi
pop     ebx

loc_88D405:
mov     ecx, [ebp+var_4]
xor     ecx, ebp        ; StackCookie
pop     edi
call    @__security_check_cookie@4 ; __security_check_cookie(x)
leave
retn
sub_88CBE8 endp

; [000000FC BYTES: COLLAPSED FUNCTION __lseeki64]
; [00000071 BYTES: COLLAPSED FUNCTION __lseeki64_nolock]
; [00000046 BYTES: COLLAPSED FUNCTION __getbuf]


; Attributes: bp-based frame

; int __cdecl sub_88D5C5(int, int, struct localeinfo_struct *, int)
sub_88D5C5 proc near

var_488= dword ptr -488h
var_484= dword ptr -484h
var_480= dword ptr -480h
var_47C= dword ptr -47Ch
var_478= dword ptr -478h
var_474= dword ptr -474h
var_46C= dword ptr -46Ch
var_468= dword ptr -468h
Character= word ptr -464h
var_460= dword ptr -460h
var_45C= dword ptr -45Ch
Block= dword ptr -458h
var_454= dword ptr -454h
var_450= dword ptr -450h
Locale= __crt_locale_pointers ptr -44Ch
var_444= dword ptr -444h
var_440= byte ptr -440h
SrcCh= byte ptr -43Ch
var_43B= byte ptr -43Bh
var_438= dword ptr -438h
var_434= dword ptr -434h
var_430= dword ptr -430h
var_42C= dword ptr -42Ch
Stream= dword ptr -428h
var_424= dword ptr -424h
var_420= dword ptr -420h
var_41C= dword ptr -41Ch
var_418= dword ptr -418h
var_414= dword ptr -414h
var_410= dword ptr -410h
var_40C= dword ptr -40Ch
var_408= dword ptr -408h
DstCh= word ptr -404h
var_205= byte ptr -205h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h
arg_C= dword ptr  14h

push    ebp
mov     ebp, esp
sub     esp, 488h
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+var_4], eax
mov     eax, [ebp+arg_0]
push    ebx
push    esi
mov     esi, [ebp+arg_4]
push    edi
mov     edi, [ebp+arg_C]
push    [ebp+arg_8]     ; struct localeinfo_struct *
mov     [ebp+Stream], eax
xor     eax, eax
mov     ebx, eax
lea     ecx, [ebp+Locale] ; this
mov     [ebp+var_408], esi
mov     [ebp+var_40C], edi
mov     [ebp+var_454], eax
mov     [ebp+var_410], ebx
mov     [ebp+var_424], eax
mov     [ebp+var_418], eax
mov     [ebp+var_42C], eax
mov     [ebp+var_450], eax
mov     [ebp+var_430], eax
call    ??0_LocaleUpdate@@QAE@PAUlocaleinfo_struct@@@Z ; _LocaleUpdate::_LocaleUpdate(localeinfo_struct *)
call    __errno
mov     [ebp+var_45C], eax
cmp     [ebp+Stream], ebx
jnz     short loc_88D66F

loc_88D645:
call    __errno
mov     dword ptr [eax], 16h
call    __invalid_parameter_noinfo
cmp     [ebp+var_440], bl

loc_88D65B:
jz      short loc_88D667
mov     eax, [ebp+var_444]
and     dword ptr [eax+70h], 0FFFFFFFDh

loc_88D667:
or      eax, 0FFFFFFFFh
jmp     loc_88E19F

loc_88D66F:
test    esi, esi
jz      short loc_88D645
xor     ecx, ecx
mov     eax, ecx
mov     edx, ecx
mov     [ebp+var_434], ecx
mov     [ebp+Block], ecx
movzx   ecx, word ptr [esi]
mov     [ebp+var_420], eax
mov     [ebp+var_414], edx
mov     [ebp+var_41C], ecx
test    cx, cx
jz      loc_88E18C
mov     esi, [ebp+var_46C]
mov     [ebp+var_474], 58h ; 'X'
mov     [ebp+var_47C], 64h ; 'd'
mov     [ebp+var_480], 69h ; 'i'
mov     [ebp+var_468], 6Fh ; 'o'

loc_88D6D1:
add     [ebp+var_408], 2
test    eax, eax
js      loc_88E17D
push    58h ; 'X'
lea     eax, [ecx-20h]
pop     edi
cmp     ax, di
ja      short loc_88D6FA
movzx   eax, cx
movzx   eax, ds:byte_897398[eax]
and     eax, 0Fh
jmp     short loc_88D6FC

loc_88D6FA:
xor     eax, eax

loc_88D6FC:
mov     edi, [ebp+var_434]
imul    eax, 9
movzx   edi, ds:byte_8973B8[eax+edi]
mov     eax, edi
shr     eax, 4
mov     [ebp+var_434], edi
mov     edi, [ebp+var_40C]
mov     [ebp+var_434], eax
cmp     eax, 8
jz      loc_88E1DA
cmp     eax, 7          ; switch 8 cases
ja      def_88D736      ; jumptable 0088D736 default case
jmp     ds:jpt_88D736[eax*4] ; switch jump

loc_88D73D:             ; jumptable 0088D736 case 1
xor     eax, eax
or      [ebp+var_418], 0FFFFFFFFh
mov     ebx, eax
mov     [ebp+var_460], eax
mov     [ebp+var_450], eax
mov     [ebp+var_424], eax
mov     [ebp+var_42C], eax
mov     [ebp+var_410], ebx
mov     [ebp+var_430], eax
jmp     def_88D736      ; jumptable 0088D736 default case

loc_88D771:             ; jumptable 0088D736 case 2
movzx   eax, cx
push    20h ; ' '
pop     ecx
sub     eax, ecx
jz      short loc_88D7C1
sub     eax, 3
jz      short loc_88D7B9
sub     eax, 8
jz      short loc_88D7B4
dec     eax
dec     eax
jz      short loc_88D7A6
sub     eax, 3
mov     eax, [ebp+var_408]
jnz     loc_88E165
or      ebx, 8

loc_88D79B:
mov     [ebp+var_410], ebx
jmp     loc_88E165

loc_88D7A6:
or      ebx, 4

loc_88D7A9:
mov     [ebp+var_410], ebx
jmp     def_88D736      ; jumptable 0088D736 default case

loc_88D7B4:
or      ebx, 1
jmp     short loc_88D7A9

loc_88D7B9:
or      ebx, 80h
jmp     short loc_88D7A9

loc_88D7C1:
or      ebx, 2
jmp     short loc_88D7A9

loc_88D7C6:             ; jumptable 0088D736 case 3
push    2Ah ; '*'
pop     eax
cmp     cx, ax
jnz     short loc_88D7FD
mov     eax, [edi]
add     edi, 4
mov     [ebp+var_40C], edi
mov     [ebp+var_424], eax
test    eax, eax
jns     def_88D736      ; jumptable 0088D736 default case
or      ebx, 4
neg     eax
mov     [ebp+var_410], ebx
mov     [ebp+var_424], eax
jmp     def_88D736      ; jumptable 0088D736 default case

loc_88D7FD:
mov     eax, [ebp+var_424]
imul    eax, 0Ah
mov     [ebp+var_424], eax
movzx   eax, cx
mov     ecx, [ebp+var_424]
add     ecx, 0FFFFFFD0h
add     ecx, eax
mov     [ebp+var_424], ecx
jmp     def_88D736      ; jumptable 0088D736 default case

loc_88D825:             ; jumptable 0088D736 case 4
xor     eax, eax
mov     [ebp+var_418], eax
jmp     def_88D736      ; jumptable 0088D736 default case

loc_88D832:             ; jumptable 0088D736 case 5
push    2Ah ; '*'
pop     eax
cmp     cx, ax
jnz     short loc_88D865
mov     eax, [edi]
add     edi, 4
mov     [ebp+var_418], eax
test    eax, eax
mov     eax, [ebp+var_408]
mov     [ebp+var_40C], edi
jns     loc_88E165
or      [ebp+var_418], 0FFFFFFFFh
jmp     loc_88E165

loc_88D865:
mov     eax, [ebp+var_418]
imul    eax, 0Ah
mov     [ebp+var_418], eax
movzx   eax, cx
mov     ecx, [ebp+var_418]
add     ecx, 0FFFFFFD0h
add     ecx, eax
mov     [ebp+var_418], ecx
jmp     def_88D736      ; jumptable 0088D736 default case

loc_88D88D:             ; jumptable 0088D736 case 6
movzx   eax, cx
cmp     eax, 49h ; 'I'
jz      short loc_88D8EC
cmp     eax, 68h ; 'h'
jz      short loc_88D8E2
push    6Ch ; 'l'
pop     ecx
cmp     eax, ecx
jz      short loc_88D8BB
cmp     eax, 77h ; 'w'
mov     eax, [ebp+var_408]
jnz     loc_88E165
or      ebx, 800h
jmp     loc_88D79B

loc_88D8BB:
mov     eax, [ebp+var_408]
cmp     [eax], cx
jnz     short loc_88D8DA
add     eax, 2
mov     [ebp+var_408], eax
or      ebx, 1000h
jmp     loc_88D79B

loc_88D8DA:
or      ebx, 10h
jmp     loc_88D79B

loc_88D8E2:
push    20h ; ' '
pop     eax
or      ebx, eax
jmp     loc_88D7A9

loc_88D8EC:
mov     eax, [ebp+var_408]
movzx   eax, word ptr [eax]
cmp     eax, 36h ; '6'
jnz     short loc_88D91D
mov     edi, [ebp+var_408]
cmp     word ptr [edi+2], 34h ; '4'
jnz     short loc_88D91D
mov     eax, edi
add     eax, 4
mov     [ebp+var_408], eax
or      ebx, 8000h
jmp     loc_88D79B

loc_88D91D:
cmp     eax, 33h ; '3'
jnz     short loc_88D945
mov     edi, [ebp+var_408]
cmp     word ptr [edi+2], 32h ; '2'
jnz     short loc_88D945
mov     eax, edi
add     eax, 4
mov     [ebp+var_408], eax
and     ebx, 0FFFF7FFFh
jmp     loc_88D79B

loc_88D945:
cmp     ax, word ptr [ebp+var_47C]
jz      def_88D736      ; jumptable 0088D736 default case
cmp     ax, word ptr [ebp+var_480]
jz      def_88D736      ; jumptable 0088D736 default case
cmp     ax, word ptr [ebp+var_468]
jz      def_88D736      ; jumptable 0088D736 default case
cmp     eax, 75h ; 'u'
jz      def_88D736      ; jumptable 0088D736 default case
cmp     eax, 78h ; 'x'
jz      def_88D736      ; jumptable 0088D736 default case
cmp     ax, word ptr [ebp+var_474]
jz      def_88D736      ; jumptable 0088D736 default case
xor     eax, eax
mov     [ebp+var_434], eax

loc_88D993:             ; jumptable 0088D736 case 0
lea     eax, [ebp+var_420]
push    eax             ; int
push    [ebp+Stream]    ; Stream
mov     [ebp+var_430], 1
push    ecx             ; Character
call    _write_char
add     esp, 0Ch
jmp     loc_88E159

loc_88D9B8:             ; jumptable 0088D736 case 7
movzx   eax, cx
cmp     eax, 64h ; 'd'
jg      loc_88DBEF
jz      loc_88DC7D
cmp     eax, 53h ; 'S'
jg      loc_88DAFA
jz      short loc_88DA52
sub     eax, 41h ; 'A'
jz      short loc_88D9EA
dec     eax
dec     eax
jz      short loc_88DA36
dec     eax
dec     eax
jz      short loc_88D9EA
dec     eax
dec     eax
jnz     loc_88DF86

loc_88D9EA:
push    20h ; ' '
pop     eax
add     ecx, eax
mov     [ebp+var_460], 1
mov     [ebp+var_41C], ecx

loc_88D9FF:
mov     eax, [ebp+var_418]
or      ebx, 40h
mov     edx, 200h
mov     [ebp+var_410], ebx
lea     esi, [ebp+DstCh]
mov     [ebp+var_414], edx
test    eax, eax
jns     loc_88DCB7
mov     [ebp+var_418], 6
jmp     loc_88DD17

loc_88DA36:
test    ebx, 830h
jnz     loc_88DB1C
push    20h ; ' '
pop     eax
or      ebx, eax
mov     [ebp+var_410], ebx
jmp     loc_88DB1C

loc_88DA52:
test    ebx, 830h
jnz     short loc_88DA65
push    20h ; ' '
pop     eax
or      ebx, eax
mov     [ebp+var_410], ebx

loc_88DA65:
mov     eax, [ebp+var_418]
mov     edi, 7FFFFFFFh
cmp     eax, 0FFFFFFFFh
jz      short loc_88DA77
mov     edi, eax

loc_88DA77:
mov     esi, [ebp+var_40C]
add     esi, 4
mov     [ebp+var_40C], esi
mov     esi, [esi-4]
test    bl, 20h
jz      loc_88DF53
test    esi, esi
jnz     short loc_88DA9C
mov     esi, Str

loc_88DA9C:
xor     ecx, ecx
mov     eax, esi
mov     edx, ecx
mov     [ebp+var_41C], eax
mov     [ebp+var_414], edx
test    edi, edi
jle     loc_88DF86

loc_88DAB6:
mov     al, [eax]
test    al, al
jz      loc_88DF86
lea     ecx, [ebp+Locale]
movzx   eax, al
push    ecx             ; Locale
push    eax             ; C
call    __isleadbyte_l
pop     ecx
test    eax, eax
mov     eax, [ebp+var_41C]
pop     ecx
jz      short loc_88DADD
inc     eax

loc_88DADD:
mov     edx, [ebp+var_414]
inc     eax
inc     edx
mov     [ebp+var_41C], eax
mov     [ebp+var_414], edx
cmp     edx, edi
jl      short loc_88DAB6
jmp     loc_88DF86

loc_88DAFA:
sub     eax, 58h ; 'X'
jz      loc_88DDDF
dec     eax
dec     eax
jz      loc_88DB96
sub     eax, 7
jz      loc_88D9FF
dec     eax
dec     eax
jnz     loc_88DF86

loc_88DB1C:
movzx   eax, word ptr [edi]
add     edi, 4
mov     [ebp+var_430], 1
mov     [ebp+var_40C], edi
mov     dword ptr [ebp+Character], eax
test    bl, 20h
jz      short loc_88DB81
mov     [ebp+SrcCh], al
xor     eax, eax
mov     [ebp+var_43B], al
lea     eax, [ebp+Locale]
push    eax             ; Locale
mov     eax, [ebp+Locale.locinfo]
push    dword ptr [eax+74h] ; SrcSizeInBytes
lea     eax, [ebp+SrcCh]
push    eax             ; SrcCh
lea     eax, [ebp+DstCh]
push    eax             ; DstCh
call    __mbtowc_l
add     esp, 10h
test    eax, eax
jns     short loc_88DB88
mov     [ebp+var_450], 1
jmp     short loc_88DB88

loc_88DB81:
mov     [ebp+DstCh], ax

loc_88DB88:
xor     edx, edx
lea     esi, [ebp+DstCh]
inc     edx
jmp     loc_88DF80

loc_88DB96:
mov     eax, [edi]
add     edi, 4
mov     [ebp+var_40C], edi
test    eax, eax
jz      short loc_88DBDB
mov     esi, [eax+4]
test    esi, esi
jz      short loc_88DBDB
test    ebx, 800h
jz      short loc_88DBCB
movsx   eax, word ptr [eax]
cdq
sub     eax, edx
mov     edx, eax
mov     [ebp+var_430], 1
jmp     loc_88DF7E

loc_88DBCB:
movsx   edx, word ptr [eax]
xor     ecx, ecx
mov     [ebp+var_430], ecx
jmp     loc_88DF80

loc_88DBDB:
mov     esi, Str

loc_88DBE1:             ; Str
push    esi
call    _strlen
pop     ecx
mov     edx, eax
jmp     loc_88DF80

loc_88DBEF:
cmp     eax, 70h ; 'p'
jg      loc_88DDE3
jz      loc_88DDD5
cmp     eax, 65h ; 'e'
jl      loc_88DF86
cmp     eax, 67h ; 'g'
jle     loc_88D9FF
push    69h ; 'i'
pop     ecx
cmp     eax, ecx
jz      short loc_88DC7D
cmp     eax, 6Eh ; 'n'
jz      short loc_88DC43
push    6Fh ; 'o'
pop     ecx
cmp     eax, ecx
jnz     loc_88DF86
mov     [ebp+var_41C], 8
test    bl, bl
jns     short loc_88DC90
or      ebx, 200h
mov     [ebp+var_410], ebx
jmp     short loc_88DC90

loc_88DC43:
add     edi, 4
mov     [ebp+var_40C], edi
mov     edi, [edi-4]
call    __get_printf_count_output
test    eax, eax
jz      loc_88E1AE
mov     eax, [ebp+var_420]
test    bl, 20h
jz      short loc_88DC6C
mov     [edi], ax
jmp     short loc_88DC6E

loc_88DC6C:
mov     [edi], eax

loc_88DC6E:
mov     [ebp+var_450], 1
jmp     loc_88E140

loc_88DC7D:
or      ebx, 40h
mov     [ebp+var_410], ebx

loc_88DC86:
mov     [ebp+var_41C], 0Ah

loc_88DC90:
test    ebx, 8000h
jnz     short loc_88DCA4
test    ebx, 1000h
jz      loc_88DE3B

loc_88DCA4:
mov     ecx, [edi]
add     edi, 8
mov     [ebp+var_40C], edi
mov     edi, [edi-4]
jmp     loc_88DE67

loc_88DCB7:
jnz     short loc_88DCCD
push    67h ; 'g'
pop     eax
cmp     cx, ax
jnz     short loc_88DD17
mov     [ebp+var_418], 1
jmp     short loc_88DD17

loc_88DCCD:
cmp     eax, edx
jle     short loc_88DCD9
mov     eax, edx
mov     [ebp+var_418], eax

loc_88DCD9:
cmp     eax, 0A3h
jle     short loc_88DD17
lea     edi, [eax+15Dh]
push    edi             ; Size
call    __malloc_crt
pop     ecx
mov     ecx, [ebp+var_41C]
mov     [ebp+Block], eax
test    eax, eax
jz      short loc_88DD07
mov     esi, eax
mov     [ebp+var_414], edi
jmp     short loc_88DD11

loc_88DD07:
mov     [ebp+var_418], 0A3h

loc_88DD11:
mov     edi, [ebp+var_40C]

loc_88DD17:
mov     eax, [edi]
add     edi, 8
mov     [ebp+var_488], eax
mov     eax, [edi-4]
mov     [ebp+var_484], eax
lea     eax, [ebp+Locale]
push    eax
push    [ebp+var_460]
movsx   eax, cl
push    [ebp+var_418]
mov     [ebp+var_40C], edi
push    eax
push    [ebp+var_414]
lea     eax, [ebp+var_488]
push    esi
push    eax
push    off_89AC18      ; Ptr
call    ds:DecodePointer
call    eax
mov     edi, ebx
add     esp, 1Ch
and     edi, 80h
jz      short loc_88DD92
cmp     [ebp+var_418], 0
jnz     short loc_88DD92
lea     eax, [ebp+Locale]
push    eax
push    esi
push    off_89AC24      ; Ptr
call    ds:DecodePointer
call    eax
pop     ecx
pop     ecx

loc_88DD92:
push    67h ; 'g'
pop     eax
cmp     word ptr [ebp+var_41C], ax
jnz     short loc_88DDBA
test    edi, edi
jnz     short loc_88DDBA
lea     eax, [ebp+Locale]
push    eax
push    esi
push    off_89AC20      ; Ptr
call    ds:DecodePointer
call    eax
pop     ecx
pop     ecx

loc_88DDBA:
cmp     byte ptr [esi], 2Dh ; '-'
jnz     loc_88DBE1
or      ebx, 100h
mov     [ebp+var_410], ebx
inc     esi
jmp     loc_88DBE1

loc_88DDD5:
mov     [ebp+var_418], 8

loc_88DDDF:
push    7
jmp     short loc_88DDFF

loc_88DDE3:
sub     eax, 73h ; 's'
jz      loc_88DA65
dec     eax
dec     eax
jz      loc_88DC86
sub     eax, 3
jnz     loc_88DF86
push    27h ; '''

loc_88DDFF:
pop     eax
mov     [ebp+var_454], eax
mov     [ebp+var_41C], 10h
test    bl, bl
jns     loc_88DC90
push    30h ; '0'
pop     ecx
add     eax, 51h ; 'Q'
mov     word ptr [ebp+var_438], cx
mov     word ptr [ebp+var_438+2], ax
mov     [ebp+var_42C], 2
jmp     loc_88DC90

loc_88DE3B:
add     edi, 4
mov     [ebp+var_40C], edi
test    bl, 20h
jz      short loc_88DE5A
test    bl, 40h
jz      short loc_88DE54
movsx   eax, word ptr [edi-4]
jmp     short loc_88DE62

loc_88DE54:
movzx   eax, word ptr [edi-4]
jmp     short loc_88DE62

loc_88DE5A:
test    bl, 40h
jz      short loc_88DE6B
mov     eax, [edi-4]

loc_88DE62:
cdq
mov     ecx, eax
mov     edi, edx

loc_88DE67:
xor     eax, eax
jmp     short loc_88DE72

loc_88DE6B:
mov     ecx, [edi-4]
xor     eax, eax
mov     edi, eax

loc_88DE72:
test    bl, 40h
jz      short loc_88DE93
cmp     edi, eax
jg      short loc_88DE93
jl      short loc_88DE81
cmp     ecx, eax
jnb     short loc_88DE93

loc_88DE81:
neg     ecx
adc     edi, eax
neg     edi
or      ebx, 100h
mov     [ebp+var_410], ebx

loc_88DE93:
test    ebx, 9000h
jnz     short loc_88DE9D
mov     edi, eax

loc_88DE9D:
mov     edx, [ebp+var_418]
test    edx, edx
jns     short loc_88DEAC
xor     edx, edx
inc     edx
jmp     short loc_88DEC2

loc_88DEAC:
and     ebx, 0FFFFFFF7h
mov     [ebp+var_410], ebx
cmp     edx, 200h
jle     short loc_88DEC2
mov     edx, 200h

loc_88DEC2:
mov     eax, ecx
or      eax, edi
jnz     short loc_88DECE
mov     [ebp+var_42C], eax

loc_88DECE:
lea     esi, [ebp+var_205]

loc_88DED4:
mov     eax, edx
dec     edx
mov     [ebp+var_418], edx
test    eax, eax
jg      short loc_88DEE7
mov     eax, ecx
or      eax, edi
jz      short loc_88DF24

loc_88DEE7:
mov     eax, [ebp+var_41C]
cdq
push    edx
push    eax
push    edi
push    ecx
call    __aulldvrm
add     ecx, 30h ; '0'
mov     [ebp+var_46C], ebx
mov     [ebp+var_414], eax
mov     edi, edx
cmp     ecx, 39h ; '9'
jle     short loc_88DF13
add     ecx, [ebp+var_454]

loc_88DF13:
mov     edx, [ebp+var_418]
mov     [esi], cl
mov     ecx, [ebp+var_414]
dec     esi
jmp     short loc_88DED4

loc_88DF24:
mov     ebx, [ebp+var_410]
lea     edx, [ebp+var_205]
sub     edx, esi
inc     esi
mov     [ebp+var_414], edx
test    ebx, 200h
jz      short loc_88DF86
test    edx, edx
jz      short loc_88DF4A
cmp     byte ptr [esi], 30h ; '0'
jz      short loc_88DF86

loc_88DF4A:
dec     esi
push    30h ; '0'
pop     eax
mov     [esi], al
inc     edx
jmp     short loc_88DF80

loc_88DF53:
test    esi, esi
jnz     short loc_88DF5D
mov     esi, off_89AEAC ; "(null)"

loc_88DF5D:
mov     [ebp+var_430], 1
mov     edx, esi
test    edi, edi
jz      short loc_88DF7C
xor     eax, eax

loc_88DF6F:
dec     edi
cmp     [edx], ax
jz      short loc_88DF7C
add     edx, 2
test    edi, edi
jnz     short loc_88DF6F

loc_88DF7C:
sub     edx, esi

loc_88DF7E:
sar     edx, 1

loc_88DF80:
mov     [ebp+var_414], edx

loc_88DF86:
cmp     [ebp+var_450], 0
jnz     loc_88E140
test    bl, 40h
jz      short loc_88DFB8
test    ebx, 100h
jz      loc_88E0C1
push    2Dh ; '-'

loc_88DFA6:
pop     eax
mov     word ptr [ebp+var_438], ax
mov     [ebp+var_42C], 1

loc_88DFB8:
push    20h ; ' '
pop     ecx

loc_88DFBB:
mov     edi, [ebp+var_424]
mov     eax, [ebp+var_42C]
sub     edi, edx
sub     edi, eax
test    bl, 0Ch
jnz     short loc_88DFED
lea     eax, [ebp+var_420]
push    eax             ; int
push    [ebp+Stream]    ; Stream
push    edi             ; int
push    ecx             ; Character
call    _write_multi_char
mov     eax, [ebp+var_42C]
add     esp, 10h

loc_88DFED:             ; int
push    [ebp+var_45C]
lea     ecx, [ebp+var_420]
push    ecx             ; int
push    [ebp+Stream]    ; Stream
push    eax             ; int
lea     eax, [ebp+var_438]
push    eax             ; int
call    _write_string
add     esp, 14h
test    bl, 8
jz      short loc_88E034
test    bl, 4
jnz     short loc_88E034
lea     eax, [ebp+var_420]
push    eax             ; int
push    [ebp+Stream]    ; Stream
push    edi             ; int
push    30h ; '0'
pop     eax
push    eax             ; Character
call    _write_multi_char
add     esp, 10h

loc_88E034:
cmp     [ebp+var_430], 0
mov     eax, [ebp+var_414]
jnz     loc_88E0FA
test    eax, eax
jle     loc_88E0FA
mov     ecx, esi
mov     [ebp+var_41C], esi

loc_88E057:
dec     eax
mov     [ebp+var_46C], eax
lea     eax, [ebp+Locale]
push    eax             ; Locale
mov     eax, [ebp+Locale.locinfo]
push    dword ptr [eax+74h] ; SrcSizeInBytes
lea     eax, [ebp+Character]
push    ecx             ; SrcCh
push    eax             ; DstCh
call    __mbtowc_l
add     esp, 10h
mov     [ebp+var_478], eax
test    eax, eax
jle     short loc_88E0EF
lea     eax, [ebp+var_420]
push    eax             ; int
push    [ebp+Stream]    ; Stream
push    dword ptr [ebp+Character] ; Character
call    _write_char
mov     ecx, [ebp+var_41C]
add     ecx, [ebp+var_478]
mov     eax, [ebp+var_46C]
add     esp, 0Ch
mov     [ebp+var_41C], ecx
test    eax, eax
jg      short loc_88E057
jmp     short loc_88E117

loc_88E0C1:
test    bl, 1
jz      short loc_88E0CD
push    2Bh ; '+'
jmp     loc_88DFA6

loc_88E0CD:
test    bl, 2
jz      loc_88DFB8
push    20h ; ' '
pop     ecx
mov     word ptr [ebp+var_438], cx
mov     [ebp+var_42C], 1
jmp     loc_88DFBB

loc_88E0EF:
or      eax, 0FFFFFFFFh
mov     [ebp+var_420], eax
jmp     short loc_88E11D

loc_88E0FA:             ; int
push    [ebp+var_45C]
lea     ecx, [ebp+var_420]
push    ecx             ; int
push    [ebp+Stream]    ; Stream
push    eax             ; int
push    esi             ; int
call    _write_string
add     esp, 14h

loc_88E117:
mov     eax, [ebp+var_420]

loc_88E11D:
test    eax, eax
js      short loc_88E140
test    bl, 4
jz      short loc_88E140
lea     eax, [ebp+var_420]
push    eax             ; int
push    [ebp+Stream]    ; Stream
push    edi             ; int
push    20h ; ' '
pop     eax
push    eax             ; Character
call    _write_multi_char
add     esp, 10h

loc_88E140:
mov     eax, [ebp+Block]
test    eax, eax
jz      short loc_88E159
push    eax             ; Block
call    _free
xor     eax, eax
pop     ecx
mov     [ebp+Block], eax

loc_88E159:
mov     edx, [ebp+var_414]

def_88D736:             ; jumptable 0088D736 default case
mov     eax, [ebp+var_408]

loc_88E165:
movzx   ecx, word ptr [eax]
mov     eax, [ebp+var_420]
mov     [ebp+var_41C], ecx
test    cx, cx
jnz     loc_88D6D1

loc_88E17D:
mov     ecx, [ebp+var_434]
test    ecx, ecx
jz      short loc_88E18C
cmp     ecx, 7
jnz     short loc_88E1DA

loc_88E18C:
cmp     [ebp+var_440], 0
jz      short loc_88E19F
mov     ecx, [ebp+var_444]
and     dword ptr [ecx+70h], 0FFFFFFFDh

loc_88E19F:
mov     ecx, [ebp+var_4]
pop     edi
pop     esi
xor     ecx, ebp        ; StackCookie
pop     ebx
call    @__security_check_cookie@4 ; __security_check_cookie(x)
leave
retn

loc_88E1AE:
call    __errno
mov     dword ptr [eax], 16h
call    __invalid_parameter_noinfo
cmp     [ebp+var_440], 0
jz      loc_88D667
mov     ecx, [ebp+var_444]
and     dword ptr [ecx+70h], 0FFFFFFFDh
jmp     loc_88D667

loc_88E1DA:
call    __errno
mov     dword ptr [eax], 16h
call    __invalid_parameter_noinfo
cmp     [ebp+var_440], 0
jmp     loc_88D65B
sub_88D5C5 endp

db 8Dh, 49h, 0
jpt_88D736 dd offset loc_88D993 ; jump table for switch statement
dd offset loc_88D73D
dd offset loc_88D771
dd offset loc_88D7C6
dd offset loc_88D825
dd offset loc_88D832
dd offset loc_88D88D
dd offset loc_88D9B8
; [00000036 BYTES: COLLAPSED FUNCTION _write_char]
; [0000002C BYTES: COLLAPSED FUNCTION _write_multi_char]
; [00000079 BYTES: COLLAPSED FUNCTION _write_string]
; [00000036 BYTES: COLLAPSED FUNCTION __isleadbyte_l]
; [00000011 BYTES: COLLAPSED FUNCTION _isleadbyte]
; [00000015 BYTES: COLLAPSED FUNCTION __get_printf_count_output]
; [00000185 BYTES: COLLAPSED FUNCTION __fputwc_nolock]
; [000000F3 BYTES: COLLAPSED FUNCTION __mbtowc_l]
; [00000018 BYTES: COLLAPSED FUNCTION _mbtowc]
; [00000034 BYTES: COLLAPSED FUNCTION __allmul]
; [0000006D BYTES: COLLAPSED CHUNK OF FUNCTION _memset]
align 4
; [00000058 BYTES: COLLAPSED CHUNK OF FUNCTION _memset]


; Attributes: bp-based frame

sub_88E6DC proc near

arg_0= dword ptr  8

push    ebp
mov     ebp, esp
push    0Ah
push    0
push    [ebp+arg_0]
call    sub_88FB0C
add     esp, 0Ch
pop     ebp
retn
sub_88E6DC endp

; [00000084 BYTES: COLLAPSED FUNCTION __getenv_helper_nolock]
; [00000026 BYTES: COLLAPSED FUNCTION ____lc_codepage_func]
; [000000FC BYTES: COLLAPSED FUNCTION ___free_lconv_mon]
; [00000067 BYTES: COLLAPSED FUNCTION ___free_lconv_num]
; [00000380 BYTES: COLLAPSED FUNCTION ___free_lc_time]
; [000001E9 BYTES: COLLAPSED FUNCTION __crtLCMapStringA_stat(localeinfo_struct *,wchar_t const *,ulong,char const *,int,char *,int,int,int)]
; [00000044 BYTES: COLLAPSED FUNCTION ___crtLCMapStringA]
; [000000EC BYTES: COLLAPSED FUNCTION __crtGetStringTypeA_stat(localeinfo_struct *,ulong,char const *,int,ushort *,int,int)]
; [0000003E BYTES: COLLAPSED FUNCTION ___crtGetStringTypeA]
; [00000052 BYTES: COLLAPSED FUNCTION _iswctype]
; [0000002F BYTES: COLLAPSED FUNCTION ___crtLCMapStringW]
; [0000001F BYTES: COLLAPSED FUNCTION _wcsnlen]
align 10h
; [00000020 BYTES: COLLAPSED FUNCTION __global_unwind2]
; [00000045 BYTES: COLLAPSED FUNCTION __unwind_handler]
; [00000084 BYTES: COLLAPSED FUNCTION __local_unwind2]
; [00000023 BYTES: COLLAPSED FUNCTION __abnormal_termination]
; [00000009 BYTES: COLLAPSED FUNCTION __NLG_Notify1]
; [0000001F BYTES: COLLAPSED FUNCTION __NLG_Notify]
; [00000003 BYTES: COLLAPSED FUNCTION __NLG_Call]
; [0000000F BYTES: COLLAPSED FUNCTION unknown_libname_4]
; [00000007 BYTES: COLLAPSED FUNCTION __fptrap]
pop     ecx
retn
; [00000046 BYTES: COLLAPSED FUNCTION __fflush_nolock]
; [00000064 BYTES: COLLAPSED FUNCTION __flush]



sub_88F279 proc near
push    1
call    _flsall
pop     ecx
retn
sub_88F279 endp

; [000000E4 BYTES: COLLAPSED FUNCTION _flsall]
align 10h
; [00000016 BYTES: COLLAPSED FUNCTION __alloca_probe_16]
; [00000016 BYTES: COLLAPSED FUNCTION __alloca_probe_8]
; [0000009D BYTES: COLLAPSED FUNCTION __fcloseall]
; [0000008C BYTES: COLLAPSED FUNCTION ___lock_fhandle]
; [00000086 BYTES: COLLAPSED FUNCTION __free_osfhnd]
; [00000067 BYTES: COLLAPSED FUNCTION __get_osfhandle]
; [00000026 BYTES: COLLAPSED FUNCTION __unlock_fhandle]
; [00000041 BYTES: COLLAPSED FUNCTION __putwch_nolock]
align 10h
; [0000002B BYTES: COLLAPSED FUNCTION __alloca_probe]
; [00000122 BYTES: COLLAPSED FUNCTION __wctomb_s_l]
; [0000001B BYTES: COLLAPSED FUNCTION _wctomb_s]
; [00000160 BYTES: COLLAPSED FUNCTION __flswbuf]
; [00000224 BYTES: COLLAPSED FUNCTION sub_88F8E8]


; Attributes: bp-based frame

sub_88FB0C proc near

arg_0= dword ptr  8
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h

push    ebp
mov     ebp, esp
cmp     dword_89BB30, 0
push    0               ; int
push    [ebp+arg_8]     ; int
push    [ebp+arg_4]     ; int
push    [ebp+arg_0]     ; int
jnz     short loc_88FB2A
push    offset off_89AA58
jmp     short loc_88FB2C

loc_88FB2A:             ; struct localeinfo_struct *
push    0

loc_88FB2C:
call    sub_88F8E8
add     esp, 14h
pop     ebp
retn
sub_88FB0C endp

; [0000008D BYTES: COLLAPSED FUNCTION ___wtomb_environ]
; [00000018 BYTES: COLLAPSED FUNCTION __mbsnbicoll]
; [000000B4 BYTES: COLLAPSED FUNCTION __mbsnbicoll_l]


; Attributes: bp-based frame

; int __cdecl sub_88FC8F(int FileHandle)
sub_88FC8F proc near

var_20= dword ptr -20h
var_1C= dword ptr -1Ch
ms_exc= CPPEH_RECORD ptr -18h
FileHandle= dword ptr  8

; __unwind { // __SEH_prolog4
push    14h
push    offset stru_898620
call    __SEH_prolog4
mov     edi, [ebp+FileHandle]
cmp     edi, 0FFFFFFFEh
jnz     short loc_88FCB3
call    __errno
mov     dword ptr [eax], 9
jmp     loc_88FD6C

loc_88FCB3:
test    edi, edi
js      loc_88FD5C
cmp     edi, dword_89D114
jnb     loc_88FD5C
mov     eax, edi
sar     eax, 5
mov     [ebp+var_20], eax
mov     ebx, edi
and     ebx, 1Fh
shl     ebx, 6
mov     eax, dword_89BB38[eax*4]
movsx   eax, byte ptr [ebx+eax+4]
and     eax, 1
jz      short loc_88FD5C
push    edi
call    ___lock_fhandle
pop     ecx
xor     esi, esi
;   __try { // __finally(loc_88FD4E)
mov     [ebp+ms_exc.registration.TryLevel], esi
mov     eax, [ebp+var_20]
mov     eax, dword_89BB38[eax*4]
test    byte ptr [ebx+eax+4], 1
jz      short loc_88FD2D
push    edi             ; FileHandle
call    __get_osfhandle
pop     ecx
push    eax             ; hFile
call    ds:FlushFileBuffers
test    eax, eax
jnz     short loc_88FD1F
call    ds:GetLastError
mov     esi, eax

loc_88FD1F:
mov     [ebp+var_1C], esi
test    esi, esi
jz      short loc_88FD3E
call    ___doserrno
mov     [eax], esi

loc_88FD2D:
call    __errno
mov     dword ptr [eax], 9
or      esi, 0FFFFFFFFh
mov     [ebp+var_1C], esi
;   } // starts at 88FCF1

loc_88FD3E:
mov     [ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
call    loc_88FD54

loc_88FD4A:
mov     eax, esi
jmp     short loc_88FD6F

loc_88FD4E:
;   __finally // owned by 88FCF1
mov     edi, [ebp+FileHandle]
mov     esi, [ebp+var_1C]

loc_88FD54:
push    edi
call    __unlock_fhandle
pop     ecx
retn

loc_88FD5C:
call    __errno
mov     dword ptr [eax], 9
call    __invalid_parameter_noinfo

loc_88FD6C:
or      eax, 0FFFFFFFFh

loc_88FD6F:
call    __SEH_epilog4
retn
; } // starts at 88FC8F
sub_88FC8F endp

; [0000006C BYTES: COLLAPSED FUNCTION __fclose_nolock]
; [00000077 BYTES: COLLAPSED FUNCTION _fclose]



sub_88FE58 proc near
mov     eax, hObject
cmp     eax, 0FFFFFFFFh
jz      short locret_88FE6E
cmp     eax, 0FFFFFFFEh
jz      short locret_88FE6E
push    eax             ; hObject
call    ds:CloseHandle

locret_88FE6E:
retn
sub_88FE58 endp

; [0000001F BYTES: COLLAPSED FUNCTION ___initconout]
; [000000AF BYTES: COLLAPSED FUNCTION __isctype_l]
; [00000245 BYTES: COLLAPSED FUNCTION ___crtsetenv]
db 0CCh
; [00000060 BYTES: COLLAPSED FUNCTION _copy_environ]
; [0000005B BYTES: COLLAPSED FUNCTION _findenv]
; [000000C3 BYTES: COLLAPSED FUNCTION __strnicoll_l]
; [0000026B BYTES: COLLAPSED FUNCTION __crtCompareStringA_stat(localeinfo_struct *,wchar_t const *,ulong,char const *,int,char const *,int,int)]
; [00000020 BYTES: COLLAPSED FUNCTION ___strncnt]
; [00000041 BYTES: COLLAPSED FUNCTION ___crtCompareStringA]


; Attributes: bp-based frame

; int __cdecl sub_8905CD(int FileHandle)
sub_8905CD proc near

var_1C= dword ptr -1Ch
ms_exc= CPPEH_RECORD ptr -18h
FileHandle= dword ptr  8

; __unwind { // __SEH_prolog4
push    10h
push    offset stru_898660
call    __SEH_prolog4
mov     esi, [ebp+FileHandle]
cmp     esi, 0FFFFFFFEh
jnz     short loc_8905F9
call    ___doserrno
and     dword ptr [eax], 0
call    __errno
mov     dword ptr [eax], 9
jmp     loc_89068E

loc_8905F9:
test    esi, esi
js      short loc_890676
cmp     esi, dword_89D114
jnb     short loc_890676
mov     ebx, esi
sar     ebx, 5
mov     edi, esi
and     edi, 1Fh
shl     edi, 6
mov     eax, dword_89BB38[ebx*4]
movsx   eax, byte ptr [eax+edi+4]
and     eax, 1
jz      short loc_890676
push    esi
call    ___lock_fhandle
pop     ecx
;   __try { // __finally(loc_890668)
and     [ebp+ms_exc.registration.TryLevel], 0
mov     eax, dword_89BB38[ebx*4]
test    byte ptr [eax+edi+4], 1
jz      short loc_890647
push    esi             ; FileHandle
call    __close_nolock
pop     ecx
mov     edi, eax
jmp     short loc_890655

loc_890647:
call    __errno
mov     dword ptr [eax], 9
or      edi, 0FFFFFFFFh

loc_890655:
mov     [ebp+var_1C], edi
;   } // starts at 89062A
mov     [ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
call    loc_89066E

loc_890664:
mov     eax, edi
jmp     short loc_890691

loc_890668:
;   __finally // owned by 89062A
mov     esi, [ebp+FileHandle]
mov     edi, [ebp+var_1C]

loc_89066E:
push    esi
call    __unlock_fhandle
pop     ecx
retn

loc_890676:
call    ___doserrno
and     dword ptr [eax], 0
call    __errno
mov     dword ptr [eax], 9
call    __invalid_parameter_noinfo

loc_89068E:
or      eax, 0FFFFFFFFh

loc_890691:
call    __SEH_epilog4
retn
; } // starts at 8905CD
sub_8905CD endp

; [0000009A BYTES: COLLAPSED FUNCTION __close_nolock]
; [00000030 BYTES: COLLAPSED FUNCTION __freebuf]
; [0000004F BYTES: COLLAPSED FUNCTION __strdup]
db 0CCh
; [00000015 BYTES: COLLAPSED FUNCTION __mbschr]
; [0000009B BYTES: COLLAPSED FUNCTION __mbschr_l]
; [000000AF BYTES: COLLAPSED FUNCTION __strnicmp_l]
; [0000012B BYTES: COLLAPSED FUNCTION _strchr]
align 10h
; [00000061 BYTES: COLLAPSED FUNCTION ___ascii_strnicmp]
; [00000141 BYTES: COLLAPSED FUNCTION __tolower_l]
; [00000006 BYTES: COLLAPSED FUNCTION RtlUnwind]
; [00000006 BYTES: COLLAPSED FUNCTION IsProcessorFeaturePresent]
align 10h
; [0000001B BYTES: COLLAPSED CHUNK OF FUNCTION CallUnexpected(_s_ESTypeList const *)]
align 10h
; START OF FUNCTION CHUNK FOR sub_881520

SEH_401520:
; __unwind { // SEH_401520
mov     edx, [esp-4+Size]
lea     eax, [edx+0Ch]
mov     ecx, [edx-1Ch]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_89867C
jmp     ___CxxFrameHandler3
; } // starts at 890C10
; END OF FUNCTION CHUNK FOR sub_881520
align 10h
; START OF FUNCTION CHUNK FOR sub_881C20

loc_890C30:
; __unwind { // SEH_401C20
;   cleanup() // owned by 881C6A
lea     ecx, [ebp+var_40]
jmp     sub_882220

loc_890C38:
;   cleanup() // owned by 881C7E
;   cleanup() // owned by 881D43
;   cleanup() // owned by 881F86
lea     ecx, [ebp+var_28]
jmp     sub_882220

loc_890C40:
lea     ecx, [ebp+var_58]
jmp     sub_882220

loc_890C48:
lea     ecx, [ebp+var_88]
jmp     sub_882220

loc_890C53:
;   cleanup() // owned by 881CDD
;   cleanup() // owned by 881CF3
;   cleanup() // owned by 881DB3
lea     ecx, [ebp+var_E0]
jmp     sub_882220

loc_890C5E:
;   cleanup() // owned by 881DF5
lea     ecx, [ebp+var_58]
jmp     sub_882220

loc_890C66:
;   cleanup() // owned by 881E0E
lea     ecx, [ebp+var_C8]
jmp     sub_882220

loc_890C71:
;   cleanup() // owned by 881E20
lea     ecx, [ebp+var_B0]
jmp     sub_882220

loc_890C7C:
;   cleanup() // owned by 881E39
lea     ecx, [ebp+Block]
jmp     sub_882220

SEH_401C20:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-0E4h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     ecx, [edx-4]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_8987C0
jmp     ___CxxFrameHandler3
; } // starts at 890C30
; END OF FUNCTION CHUNK FOR sub_881C20
align 10h
; START OF FUNCTION CHUNK FOR sub_881870

loc_890CB0:
; __unwind { // SEH_401870
;   cleanup() // owned by 8818BD
;   cleanup() // owned by 881A00
lea     ecx, [ebp+lpPathName]
jmp     sub_882220

loc_890CBB:
;   cleanup() // owned by 881940
lea     ecx, [ebp+var_248]
jmp     sub_882220

loc_890CC6:
;   cleanup() // owned by 881956
lea     ecx, [ebp+var_278]
jmp     sub_882220

loc_890CD1:
;   cleanup() // owned by 88196A
lea     ecx, [ebp+var_290]
jmp     sub_882220

SEH_401870:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-294h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     ecx, [edx-4]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_898830
jmp     ___CxxFrameHandler3
; } // starts at 890CB0
; END OF FUNCTION CHUNK FOR sub_881870
align 10h
; START OF FUNCTION CHUNK FOR sub_8816E0

loc_890D10:
; __unwind { // SEH_4016E0
;   cleanup() // owned by 881756
lea     ecx, [ebp+Src]
jmp     sub_882220

SEH_4016E0:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-2Ch]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     ecx, [edx-4]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_898874
jmp     ___CxxFrameHandler3
; } // starts at 890D10
; END OF FUNCTION CHUNK FOR sub_8816E0
align 10h
; START OF FUNCTION CHUNK FOR sub_882790

SEH_402790:
; __unwind { // SEH_402790
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-1Ch]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_898708
jmp     ___CxxFrameHandler3
; } // starts at 890D40
; END OF FUNCTION CHUNK FOR sub_882790
align 10h
; START OF FUNCTION CHUNK FOR sub_882050
;   ADDITIONAL PARENT FUNCTION sub_8830D0
;   ADDITIONAL PARENT FUNCTION sub_884E80

loc_890D60:
; __unwind { // SEH_404E80
;   cleanup() // owned by 882095
;   cleanup() // owned by 8830FE
;   cleanup() // owned by 88312B
;   cleanup() // owned by 884EC6
mov     eax, [ebp+var_10]
and     eax, 1
jz      locret_890D78
and     [ebp+var_10], 0FFFFFFFEh
mov     ecx, [ebp+var_14]
jmp     sub_882220

locret_890D78:
retn

SEH_404E80:
SEH_4030D0:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-14h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_898794
jmp     ___CxxFrameHandler3
; } // starts at 890D60
; END OF FUNCTION CHUNK FOR sub_882050
align 10h
; START OF FUNCTION CHUNK FOR sub_884DC0

loc_890DA0:
; __unwind { // SEH_404DC0
;   cleanup() // owned by 884E09
mov     eax, [ebp+var_10]
and     eax, 1
jz      locret_890DB8
and     [ebp+var_10], 0FFFFFFFEh
mov     ecx, [ebp+var_14]
jmp     sub_882220

locret_890DB8:
retn

SEH_404DC0:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-18h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_8988A0
jmp     ___CxxFrameHandler3
; } // starts at 890DA0
; END OF FUNCTION CHUNK FOR sub_884DC0
align 10h
; START OF FUNCTION CHUNK FOR sub_8831D0

loc_890DE0:
; __unwind { // SEH_4031D0
;   cleanup() // owned by 883220
lea     ecx, [ebp+lpFileName]
jmp     sub_882220

SEH_4031D0:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-274h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     ecx, [edx-4]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_8989F8
jmp     ___CxxFrameHandler3
; } // starts at 890DE0
; END OF FUNCTION CHUNK FOR sub_8831D0
; START OF FUNCTION CHUNK FOR sub_883410

loc_890E10:
; __unwind { // SEH_403410
;   cleanup() // owned by 8834AE
;   cleanup() // owned by 88357F
;   cleanup() // owned by 883684
lea     ecx, [ebp+szLogFile]
jmp     sub_882220

loc_890E1B:
lea     ecx, [ebp+lpData]
jmp     loc_884A80

loc_890E26:
lea     ecx, [ebp+Block]
jmp     sub_882220

loc_890E31:
lea     ecx, [ebp+Tm.tm_mday]
jmp     sub_882220

loc_890E3C:
lea     ecx, [ebp+Block]
jmp     sub_882220

loc_890E47:
;   cleanup() // owned by 883525
;   cleanup() // owned by 883653
;   cleanup() // owned by 883812
;   cleanup() // owned by 883827
;   cleanup() // owned by 8838C5
lea     ecx, [ebp+Tm.tm_mday]
jmp     sub_882220

loc_890E52:
;   cleanup() // owned by 8838DA
lea     ecx, [ebp+var_248]
jmp     sub_882220

SEH_403410:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-294h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     ecx, [edx-4]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_898960
jmp     ___CxxFrameHandler3
; } // starts at 890E10
; END OF FUNCTION CHUNK FOR sub_883410
align 10h
; START OF FUNCTION CHUNK FOR sub_8832A0

loc_890E90:
; __unwind { // SEH_4032A0
;   cleanup() // owned by 8832FB
;   cleanup() // owned by 883356
lea     ecx, [ebp+lpPathName]
jmp     sub_882220

loc_890E98:
mov     eax, [ebp+var_48]
and     eax, 1
jz      locret_890EB0
and     [ebp+var_48], 0FFFFFFFEh
lea     ecx, [ebp+Block]
jmp     sub_882220

locret_890EB0:
retn

loc_890EB1:
;   cleanup() // owned by 883324
;   cleanup() // owned by 88338E
lea     ecx, [ebp+var_40]
jmp     sub_882220

SEH_4032A0:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-64h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     ecx, [edx-4]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_8989BC
jmp     ___CxxFrameHandler3
; } // starts at 890E90
; END OF FUNCTION CHUNK FOR sub_8832A0
align 10h
; START OF FUNCTION CHUNK FOR sub_8842D0

loc_890EE0:
; __unwind { // SEH_4042D0
;   cleanup() // owned by 884322
lea     ecx, [ebp+Block]
jmp     sub_882220

SEH_4042D0:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-4Ch]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     ecx, [edx-4]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_8988F8
jmp     ___CxxFrameHandler3
; } // starts at 890EE0
; END OF FUNCTION CHUNK FOR sub_8842D0
align 10h
; START OF FUNCTION CHUNK FOR sub_882FE0

loc_890F10:
; __unwind { // SEH_402FE0
;   cleanup() // owned by 883012
;   cleanup() // owned by 883042
mov     eax, [ebp+var_10]
and     eax, 1
jz      locret_890F28
and     [ebp+var_10], 0FFFFFFFEh
mov     ecx, [ebp+var_18]
jmp     sub_882220

locret_890F28:
retn

SEH_402FE0:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-34h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_898A24
jmp     ___CxxFrameHandler3
; } // starts at 890F10
; END OF FUNCTION CHUNK FOR sub_882FE0
align 10h
; START OF FUNCTION CHUNK FOR sub_884610

loc_890F50:
; __unwind { // SEH_404610
;   cleanup() // owned by 8846CC
lea     ecx, [ebp+Src]
jmp     sub_882220

SEH_404610:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-84h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     ecx, [edx-4]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_8988CC
jmp     ___CxxFrameHandler3
; } // starts at 890F50
; END OF FUNCTION CHUNK FOR sub_884610
; START OF FUNCTION CHUNK FOR sub_8839E0

loc_890F80:
; __unwind { // SEH_4039E0
;   cleanup() // owned by 883A12
lea     ecx, [ebp+szPackagePath]
jmp     sub_882220

loc_890F88:
;   cleanup() // owned by 883A45
;   cleanup() // owned by 883A7D
lea     ecx, [ebp+szCommandLine]
jmp     sub_882220

loc_890F90:
;   cleanup() // owned by 883A74
lea     ecx, [ebp+Block]
jmp     sub_882220

SEH_4039E0:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-5Ch]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     ecx, [edx-4]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_898924
jmp     ___CxxFrameHandler3
; } // starts at 890F80
; END OF FUNCTION CHUNK FOR sub_8839E0
align 10h



sub_890FC0 proc near
push    offset sub_891060 ; void (__cdecl *)()
call    _atexit
pop     ecx
retn
sub_890FC0 endp

align 10h



sub_890FD0 proc near
push    offset sub_891050 ; void (__cdecl *)()
call    _atexit
pop     ecx
retn
sub_890FD0 endp

align 10h



sub_890FE0 proc near
push    offset sub_891040 ; void (__cdecl *)()
call    _atexit
pop     ecx
retn
sub_890FE0 endp

align 10h



sub_890FF0 proc near
push    0               ; int
push    offset unk_8974A4 ; Src
mov     ecx, offset lpData
call    sub_882490
push    offset sub_891070 ; void (__cdecl *)()
call    _atexit
pop     ecx
retn
sub_890FF0 endp

align 10h



sub_891010 proc near
push    offset sub_8910D0 ; void (__cdecl *)()
call    _atexit
pop     ecx
retn
sub_891010 endp

align 10h



sub_891020 proc near
push    0               ; int
push    offset unk_8974A4 ; Src
mov     ecx, offset dword_89B064
call    sub_882490
push    offset sub_891130 ; void (__cdecl *)()
call    _atexit
pop     ecx
retn
sub_891020 endp

align 10h



; void __cdecl sub_891040()
sub_891040 proc near
mov     off_89B084, offset off_892FF4
retn
sub_891040 endp

align 10h



; void __cdecl sub_891050()
sub_891050 proc near
mov     off_89B080, offset off_892FF4
retn
sub_891050 endp

align 10h



; void __cdecl sub_891060()
sub_891060 proc near
mov     off_89B07C, offset off_892FF4
retn
sub_891060 endp

align 10h


; Attributes: bp-based frame

; void __cdecl sub_891070()
sub_891070 proc near

var_1= byte ptr -1

push    ebp
mov     ebp, esp
push    ecx
cmp     dword_89B060, 8
jb      short loc_8910A4
push    esi
mov     esi, lpData
lea     ecx, [ebp+var_1]
call    sub_882780
push    ecx
call    nullsub_1
lea     ecx, [ebp+var_1]
call    sub_882780
push    esi             ; Block
call    j__free
add     esp, 4
pop     esi

loc_8910A4:
xor     eax, eax
mov     dword_89B060, 7
mov     dword_89B05C, 0
mov     word ptr lpData, ax
mov     esp, ebp
pop     ebp
retn
sub_891070 endp

align 10h


; Attributes: bp-based frame

; void __cdecl sub_8910D0()
sub_8910D0 proc near

var_1= byte ptr -1

push    ebp
mov     ebp, esp
push    ecx
mov     eax, Block
test    eax, eax
jz      short loc_89111D
push    dword_89C044
push    eax
call    sub_884C90
lea     ecx, [ebp+var_1]
call    sub_882780
push    Block           ; Block
call    j__free
add     esp, 4
mov     Block, 0
mov     dword_89C044, 0
mov     dword_89C048, 0

loc_89111D:
mov     esp, ebp
pop     ebp
retn
sub_8910D0 endp

align 10h


; Attributes: bp-based frame

; void __cdecl sub_891130()
sub_891130 proc near

var_1= byte ptr -1

push    ebp
mov     ebp, esp
push    ecx
cmp     dword_89B078, 8
jb      short loc_891164
push    esi
mov     esi, dword_89B064
lea     ecx, [ebp+var_1]
call    sub_882780
push    ecx
call    nullsub_1
lea     ecx, [ebp+var_1]
call    sub_882780
push    esi             ; Block
call    j__free
add     esp, 4
pop     esi

loc_891164:
xor     eax, eax
mov     dword_89B078, 7
mov     dword_89B074, 0
mov     word ptr dword_89B064, ax
mov     esp, ebp
pop     ebp
retn
sub_891130 endp

align 80h
dd 380h dup(?)
_text ends

; Section 2. (virtual address 00012000)
; Virtual size                  : 00007538 (  30008.)
; Section size in file          : 00007600 (  30208.)
; Offset to raw data for section: 00010600
; Flags 40000040: Data Readable
; Alignment     : default
;
; Imports from ADVAPI32.dll
;

; Segment type: Externs
; _idata
; LSTATUS (__stdcall *RegCloseKey)(HKEY hKey)
extrn RegCloseKey:dword
; LSTATUS (__stdcall *RegSetValueExW)(HKEY hKey, LPCWSTR lpValueName, DWORD Reserved, DWORD dwType, const BYTE *lpData, DWORD cbData)
extrn RegSetValueExW:dword
; LSTATUS (__stdcall *RegQueryValueExW)(HKEY hKey, LPCWSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
extrn RegQueryValueExW:dword
; LSTATUS (__stdcall *RegCreateKeyExW)(HKEY hKey, LPCWSTR lpSubKey, DWORD Reserved, LPWSTR lpClass, DWORD dwOptions, REGSAM samDesired, const LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult, LPDWORD lpdwDisposition)
extrn RegCreateKeyExW:dword
; LSTATUS (__stdcall *RegOpenKeyExW)(HKEY hKey, LPCWSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
extrn RegOpenKeyExW:dword

;
; Imports from COMCTL32.dll
;
; int (__stdcall *ImageList_Add)(HIMAGELIST himl, HBITMAP hbmImage, HBITMAP hbmMask)
extrn ImageList_Add:dword
; BOOL (__stdcall *InitCommonControlsEx)(const INITCOMMONCONTROLSEX *picce)
extrn InitCommonControlsEx:dword
; void (__stdcall *InitCommonControls)()
extrn InitCommonControls:dword ; Import by ordinal 17
; HIMAGELIST (__stdcall *ImageList_Create)(int cx, int cy, UINT flags, int cInitial, int cGrow)
extrn ImageList_Create:dword

;
; Imports from GDI32.dll
;
; HGDIOBJ (__stdcall *GetStockObject)(int i)
extrn GetStockObject:dword

;
; Imports from KERNEL32.dll
;
; BOOL (__stdcall *CreateDirectoryW)(LPCWSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
extrn CreateDirectoryW:dword
; DWORD (__stdcall *GetLastError)()
extrn GetLastError:dword
; BOOL (__stdcall *SetFileAttributesW)(LPCWSTR lpFileName, DWORD dwFileAttributes)
extrn SetFileAttributesW:dword
; HRSRC (__stdcall *FindResourceExW)(HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, WORD wLanguage)
extrn FindResourceExW:dword
; HGLOBAL (__stdcall *LoadResource)(HMODULE hModule, HRSRC hResInfo)
extrn LoadResource:dword
; DWORD (__stdcall *SizeofResource)(HMODULE hModule, HRSRC hResInfo)
extrn SizeofResource:dword
; LPVOID (__stdcall *LockResource)(HGLOBAL hResData)
extrn LockResource:dword
; HANDLE (__stdcall *CreateFileW)(LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
extrn CreateFileW:dword
; BOOL (__stdcall *WriteFile)(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped)
extrn WriteFile:dword
; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
extrn CloseHandle:dword
; BOOL (__stdcall *DeleteFileW)(LPCWSTR lpFileName)
extrn DeleteFileW:dword
; DWORD (__stdcall *GetTickCount)()
extrn GetTickCount:dword
; BOOL (__stdcall *GetVersionExW)(LPOSVERSIONINFOW lpVersionInformation)
extrn GetVersionExW:dword
; DWORD (__stdcall *ExpandEnvironmentStringsW)(LPCWSTR lpSrc, LPWSTR lpDst, DWORD nSize)
extrn ExpandEnvironmentStringsW:dword
; HANDLE (__stdcall *FindFirstFileW)(LPCWSTR lpFileName, LPWIN32_FIND_DATAW lpFindFileData)
extrn FindFirstFileW:dword
; BOOL (__stdcall *FindClose)(HANDLE hFindFile)
extrn FindClose:dword
; BOOL (__stdcall *MoveFileExW)(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, DWORD dwFlags)
extrn MoveFileExW:dword
; UINT (__stdcall *GetConsoleCP)()
extrn GetConsoleCP:dword
; BOOL (__stdcall *CopyFileW)(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, BOOL bFailIfExists)
extrn CopyFileW:dword
; BOOL (__stdcall *FindNextFileW)(HANDLE hFindFile, LPWIN32_FIND_DATAW lpFindFileData)
extrn FindNextFileW:dword
; DWORD (__stdcall *GetTempPathW)(DWORD nBufferLength, LPWSTR lpBuffer)
extrn GetTempPathW:dword
; LANGID (__stdcall *GetUserDefaultUILanguage)()
extrn GetUserDefaultUILanguage:dword
; int (__stdcall *GetLocaleInfoW)(LCID Locale, LCTYPE LCType, LPWSTR lpLCData, int cchData)
extrn GetLocaleInfoW:dword
; LANGID (__stdcall *SetThreadUILanguage)(LANGID LangId)
extrn SetThreadUILanguage:dword
; BOOL (__stdcall *SetThreadLocale)(LCID Locale)
extrn SetThreadLocale:dword
; int (__stdcall *LCMapStringW)(LCID Locale, DWORD dwMapFlags, LPCWSTR lpSrcStr, int cchSrc, LPWSTR lpDestStr, int cchDest)
extrn LCMapStringW:dword
; int (__stdcall *CompareStringW)(LCID Locale, DWORD dwCmpFlags, PCNZWCH lpString1, int cchCount1, PCNZWCH lpString2, int cchCount2)
extrn CompareStringW:dword
; HMODULE (__stdcall *LoadLibraryW)(LPCWSTR lpLibFileName)
extrn LoadLibraryW:dword
; void (__stdcall *OutputDebugStringW)(LPCWSTR lpOutputString)
extrn OutputDebugStringW:dword
; LPVOID (__stdcall *HeapReAlloc)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem, SIZE_T dwBytes)
extrn HeapReAlloc:dword
; HMODULE (__stdcall *LoadLibraryExW)(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags)
extrn LoadLibraryExW:dword
; void (__stdcall *LeaveCriticalSection)(LPCRITICAL_SECTION lpCriticalSection)
extrn LeaveCriticalSection:dword
; void (__stdcall *EnterCriticalSection)(LPCRITICAL_SECTION lpCriticalSection)
extrn EnterCriticalSection:dword
; BOOL (__stdcall *SetFilePointerEx)(HANDLE hFile, LARGE_INTEGER liDistanceToMove, PLARGE_INTEGER lpNewFilePointer, DWORD dwMoveMethod)
extrn SetFilePointerEx:dword
; BOOL (__stdcall *GetConsoleMode)(HANDLE hConsoleHandle, LPDWORD lpMode)
extrn GetConsoleMode:dword
; BOOL (__stdcall *GetStringTypeW)(DWORD dwInfoType, LPCWCH lpSrcStr, int cchSrc, LPWORD lpCharType)
extrn GetStringTypeW:dword
; BOOL (__stdcall *SetStdHandle)(DWORD nStdHandle, HANDLE hHandle)
extrn SetStdHandle:dword
; BOOL (__stdcall *WriteConsoleW)(HANDLE hConsoleOutput, const void *lpBuffer, DWORD nNumberOfCharsToWrite, LPDWORD lpNumberOfCharsWritten, LPVOID lpReserved)
extrn WriteConsoleW:dword
; BOOL (__stdcall *FlushFileBuffers)(HANDLE hFile)
extrn FlushFileBuffers:dword
; DWORD (__stdcall *GetFileAttributesW)(LPCWSTR lpFileName)
extrn GetFileAttributesW:dword
; void (__stdcall *RaiseException)(DWORD dwExceptionCode, DWORD dwExceptionFlags, DWORD nNumberOfArguments, const ULONG_PTR *lpArguments)
extrn RaiseException:dword
; PVOID (__stdcall *EncodePointer)(PVOID Ptr)
extrn EncodePointer:dword
; PVOID (__stdcall *DecodePointer)(PVOID Ptr)
extrn DecodePointer:dword
; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
extrn GetSystemTimeAsFileTime:dword
; LPWSTR (__stdcall *GetCommandLineW)()
extrn GetCommandLineW:dword
; BOOL (__stdcall *SetEnvironmentVariableA)(LPCSTR lpName, LPCSTR lpValue)
extrn SetEnvironmentVariableA:dword
; void (__stdcall *RtlUnwind)(PVOID TargetFrame, PVOID TargetIp, PEXCEPTION_RECORD ExceptionRecord, PVOID ReturnValue)
extrn __imp_RtlUnwind:dword
; BOOL (__stdcall *IsDebuggerPresent)()
extrn IsDebuggerPresent:dword
; BOOL (__stdcall *IsProcessorFeaturePresent)(DWORD ProcessorFeature)
extrn __imp_IsProcessorFeaturePresent:dword
; BOOL (__stdcall *HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
extrn HeapFree:dword
; LPVOID (__stdcall *HeapAlloc)(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
extrn HeapAlloc:dword
; LONG (__stdcall *InterlockedDecrement)(volatile LONG *lpAddend)
extrn InterlockedDecrement:dword
; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
extrn ExitProcess:dword
; BOOL (__stdcall *GetModuleHandleExW)(DWORD dwFlags, LPCWSTR lpModuleName, HMODULE *phModule)
extrn GetModuleHandleExW:dword
; FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName)
extrn GetProcAddress:dword
; int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
extrn MultiByteToWideChar:dword
; SIZE_T (__stdcall *HeapSize)(HANDLE hHeap, DWORD dwFlags, LPCVOID lpMem)
extrn HeapSize:dword
; void (__stdcall *Sleep)(DWORD dwMilliseconds)
extrn Sleep:dword
; HANDLE (__stdcall *GetStdHandle)(DWORD nStdHandle)
extrn GetStdHandle:dword
; DWORD (__stdcall *GetModuleFileNameW)(HMODULE hModule, LPWSTR lpFilename, DWORD nSize)
extrn GetModuleFileNameW:dword
; DWORD (__stdcall *GetTimeZoneInformation)(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
extrn GetTimeZoneInformation:dword
; int (__stdcall *WideCharToMultiByte)(UINT CodePage, DWORD dwFlags, LPCWCH lpWideCharStr, int cchWideChar, LPSTR lpMultiByteStr, int cbMultiByte, LPCCH lpDefaultChar, LPBOOL lpUsedDefaultChar)
extrn WideCharToMultiByte:dword
; LONG (__stdcall *InterlockedIncrement)(volatile LONG *lpAddend)
extrn InterlockedIncrement:dword
; BOOL (__stdcall *IsValidCodePage)(UINT CodePage)
extrn IsValidCodePage:dword
; UINT (__stdcall *GetACP)()
extrn GetACP:dword
; UINT (__stdcall *GetOEMCP)()
extrn GetOEMCP:dword
; BOOL (__stdcall *GetCPInfo)(UINT CodePage, LPCPINFO lpCPInfo)
extrn GetCPInfo:dword
; void (__stdcall *SetLastError)(DWORD dwErrCode)
extrn SetLastError:dword
; DWORD (__stdcall *GetCurrentThreadId)()
extrn GetCurrentThreadId:dword
; HANDLE (__stdcall *GetProcessHeap)()
extrn GetProcessHeap:dword
; DWORD (__stdcall *GetFileType)(HANDLE hFile)
extrn GetFileType:dword
; BOOL (__stdcall *InitializeCriticalSectionAndSpinCount)(LPCRITICAL_SECTION lpCriticalSection, DWORD dwSpinCount)
extrn InitializeCriticalSectionAndSpinCount:dword
; void (__stdcall *DeleteCriticalSection)(LPCRITICAL_SECTION lpCriticalSection)
extrn DeleteCriticalSection:dword
; void (__stdcall *GetStartupInfoW)(LPSTARTUPINFOW lpStartupInfo)
extrn GetStartupInfoW:dword
; BOOL (__stdcall *QueryPerformanceCounter)(LARGE_INTEGER *lpPerformanceCount)
extrn QueryPerformanceCounter:dword
; DWORD (__stdcall *GetCurrentProcessId)()
extrn GetCurrentProcessId:dword
; LPWCH (__stdcall *GetEnvironmentStringsW)()
extrn GetEnvironmentStringsW:dword
; BOOL (__stdcall *FreeEnvironmentStringsW)(LPWCH penv)
extrn FreeEnvironmentStringsW:dword
; LONG (__stdcall *UnhandledExceptionFilter)(struct _EXCEPTION_POINTERS *ExceptionInfo)
extrn UnhandledExceptionFilter:dword
; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
extrn SetUnhandledExceptionFilter:dword
; HANDLE (__stdcall *GetCurrentProcess)()
extrn GetCurrentProcess:dword
; BOOL (__stdcall *TerminateProcess)(HANDLE hProcess, UINT uExitCode)
extrn TerminateProcess:dword
; DWORD (__stdcall *TlsAlloc)()
extrn TlsAlloc:dword
; LPVOID (__stdcall *TlsGetValue)(DWORD dwTlsIndex)
extrn TlsGetValue:dword
; BOOL (__stdcall *TlsSetValue)(DWORD dwTlsIndex, LPVOID lpTlsValue)
extrn TlsSetValue:dword
; BOOL (__stdcall *TlsFree)(DWORD dwTlsIndex)
extrn TlsFree:dword
; HMODULE (__stdcall *GetModuleHandleW)(LPCWSTR lpModuleName)
extrn GetModuleHandleW:dword

;
; Imports from SHELL32.dll
;
; HRESULT (__stdcall *SHGetFolderPathW)(HWND hwnd, int csidl, HANDLE hToken, DWORD dwFlags, LPWSTR pszPath)
extrn SHGetFolderPathW:dword

;
; Imports from USER32.dll
;
; HWND (__stdcall *SetFocus)(HWND hWnd)
extrn SetFocus:dword
; BOOL (__stdcall *InvalidateRect)(HWND hWnd, const RECT *lpRect, BOOL bErase)
extrn InvalidateRect:dword
; BOOL (__stdcall *ShowWindow)(HWND hWnd, int nCmdShow)
extrn ShowWindow:dword
; BOOL (__stdcall *MoveWindow)(HWND hWnd, int X, int Y, int nWidth, int nHeight, BOOL bRepaint)
extrn MoveWindow:dword
; BOOL (__stdcall *GetWindowRect)(HWND hWnd, LPRECT lpRect)
extrn GetWindowRect:dword
; HWND (__stdcall *GetDesktopWindow)()
extrn GetDesktopWindow:dword
; BOOL (__stdcall *EndDialog)(HWND hDlg, INT_PTR nResult)
extrn EndDialog:dword
; HBITMAP (__stdcall *LoadBitmapW)(HINSTANCE hInstance, LPCWSTR lpBitmapName)
extrn LoadBitmapW:dword
; LRESULT (__stdcall *SendMessageW)(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
extrn SendMessageW:dword
; HWND (__stdcall *GetDlgItem)(HWND hDlg, int nIDDlgItem)
extrn GetDlgItem:dword
; BOOL (__stdcall *SetWindowTextW)(HWND hWnd, LPCWSTR lpString)
extrn SetWindowTextW:dword
; int (__stdcall *LoadStringW)(HINSTANCE hInstance, UINT uID, LPWSTR lpBuffer, int cchBufferMax)
extrn LoadStringW:dword
; INT_PTR (__stdcall *DialogBoxParamW)(HINSTANCE hInstance, LPCWSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam)
extrn DialogBoxParamW:dword
; LRESULT (__stdcall *SendMessageTimeoutW)(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam, UINT fuFlags, UINT uTimeout, PDWORD_PTR lpdwResult)
extrn SendMessageTimeoutW:dword
; BOOL (__stdcall *GetClientRect)(HWND hWnd, LPRECT lpRect)
extrn GetClientRect:dword

;
; Imports from msi.dll
;
; UINT (__stdcall *MsiOpenProductW)(LPCWSTR szProduct, MSIHANDLE *hProduct)
extrn MsiOpenProductW:dword ; Import by ordinal 96
; UINT (__stdcall *MsiEnumRelatedProductsW)(LPCWSTR lpUpgradeCode, DWORD dwReserved, DWORD iProductIndex, LPWSTR lpProductBuf)
extrn MsiEnumRelatedProductsW:dword ; Import by ordinal 205
; UINT (__stdcall *MsiConfigureProductExW)(LPCWSTR szProduct, int iInstallLevel, INSTALLSTATE eInstallState, LPCWSTR szCommandLine)
extrn MsiConfigureProductExW:dword ; Import by ordinal 190
; UINT (__stdcall *MsiInstallProductW)(LPCWSTR szPackagePath, LPCWSTR szCommandLine)
extrn MsiInstallProductW:dword ; Import by ordinal 88
; INSTALLUILEVEL (__stdcall *MsiSetInternalUI)(INSTALLUILEVEL dwUILevel, HWND *phWnd)
extrn MsiSetInternalUI:dword ; Import by ordinal 141
; UINT (__stdcall *MsiEnableLogW)(DWORD dwLogMode, LPCWSTR szLogFile, DWORD dwLogAttributes)
extrn MsiEnableLogW:dword ; Import by ordinal 169
; UINT (__stdcall *MsiCloseHandle)(MSIHANDLE hAny)
extrn MsiCloseHandle:dword ; Import by ordinal 8



; Segment type: Pure data
; Segment permissions: Read
_rdata segment para public 'DATA' use32
assume cs:_rdata
;org 8921FCh
unk_8921FC db    0
db    0
db    0
db    0
dd offset sub_890FC0
dd offset sub_890FD0
dd offset sub_890FE0
dd offset sub_890FF0
dd offset sub_891010
dd offset sub_891020
unk_892218 db    0
db    0
db    0
db    0
; const _PIFV dword_89221C
dword_89221C dd 0
dd offset ___onexitinit
dd offset ___isa_available_init
dd offset ___initmbctable
dd offset ___initstdio
dd offset sub_88A0F0
; const _PIFV dword_892234
dword_892234 dd 0
; const _PVFV First
First dd 0
dd offset __locterm
dd offset sub_88FE58
dd offset ___endstdio
; const _PVFV Last
Last dd 0
; const _PVFV dword_89224C
dword_89224C dd 0
; const _PVFV dword_892250
dword_892250 dd 0
align 10h
; Debug Directory entries
dd 0                    ; Characteristics
dd 5CB61F9Fh            ; TimeDateStamp: Tue Apr 16 18:31:59 2019
dw 0                    ; MajorVersion
dw 0                    ; MinorVersion
dd 2                    ; Type: IMAGE_DEBUG_TYPE_CODEVIEW
dd 86h                  ; SizeOfData
dd rva asc_897C98       ; AddressOfRawData
dd 16298h               ; PointerToRawData
dd 0                    ; Characteristics
dd 5CB61F9Fh            ; TimeDateStamp: Tue Apr 16 18:31:59 2019
dw 0                    ; MajorVersion
dw 0                    ; MinorVersion
dd 0Ch                  ; Type: IMAGE_DEBUG_TYPE_VC_FEATURE
dd 10h                  ; SizeOfData
dd rva unk_897D20       ; AddressOfRawData
dd 16320h               ; PointerToRawData
unk_892298 db    5
db    0
db    0
db    0
off_89229C dd offset aPermissionDeni ; "permission denied"
db 0B7h
db    0
db    0
db    0
dd offset aFileExists   ; "file exists"
db  14h
db    0
db    0
db    0
dd offset aNoSuchDevice ; "no such device"
db  6Fh ; o
db    0
db    0
db    0
dd offset aFilenameTooLon ; "filename too long"
db 0AAh
db    0
db    0
db    0
dd offset aDeviceOrResour ; "device or resource busy"
db  8Eh
db    0
db    0
db    0
dd offset aDeviceOrResour ; "device or resource busy"
db  52h ; R
db    0
db    0
db    0
dd offset aPermissionDeni ; "permission denied"
db 0F3h
db    3
db    0
db    0
dd offset aIoError      ; "io error"
db 0F4h
db    3
db    0
db    0
dd offset aIoError      ; "io error"
db 0F5h
db    3
db    0
db    0
dd offset aIoError      ; "io error"
db  10h
db    0
db    0
db    0
dd offset aPermissionDeni ; "permission denied"
db  37h ; 7
db    0
db    0
db    0
dd offset aNoSuchDevice ; "no such device"
db  64h ; d
db    9
db    0
db    0
dd offset aDeviceOrResour ; "device or resource busy"
db  91h
db    0
db    0
db    0
dd offset aDirectoryNotEm ; "directory not empty"
db  0Bh
db    1
db    0
db    0
dd offset aInvalidArgumen ; "invalid argument"
db  70h ; p
db    0
db    0
db    0
dd offset aNoSpaceOnDevic ; "no space on device"
db  50h ; P
db    0
db    0
db    0
dd offset aFileExists   ; "file exists"
db    2
db    0
db    0
db    0
dd offset aNoSuchFileOrDi ; "no such file or directory"
db  27h ; '
db    0
db    0
db    0
dd offset aNoSpaceOnDevic ; "no space on device"
db  0Ch
db    0
db    0
db    0
dd offset aPermissionDeni ; "permission denied"
db  0Fh
db    0
db    0
db    0
dd offset aNoSuchDevice ; "no such device"
db    1
db    0
db    0
db    0
dd offset aFunctionNotSup ; "function not supported"
db    6
db    0
db    0
db    0
dd offset aInvalidArgumen ; "invalid argument"
db  7Bh ; {
db    0
db    0
db    0
dd offset aInvalidArgumen ; "invalid argument"
db  21h ; !
db    0
db    0
db    0
dd offset aNoLockAvailabl ; "no lock available"
db 0D4h
db    0
db    0
db    0
dd offset aNoLockAvailabl ; "no lock available"
db  83h
db    0
db    0
db    0
dd offset aInvalidArgumen ; "invalid argument"
db 0E6h
db    3
db    0
db    0
dd offset aPermissionDeni ; "permission denied"
db    8
db    0
db    0
db    0
dd offset aNotEnoughMemor ; "not enough memory"
db  15h
db    0
db    0
db    0
dd offset aResourceUnavai ; "resource unavailable try again"
db  11h
db    0
db    0
db    0
dd offset aCrossDeviceLin ; "cross device link"
db  6Eh ; n
db    0
db    0
db    0
dd offset aIoError      ; "io error"
db  61h ; a
db    9
db    0
db    0
dd offset aDeviceOrResour ; "device or resource busy"
db 0E3h
db    3
db    0
db    0
dd offset aOperationCance ; "operation canceled"
db  0Eh
db    0
db    0
db    0
dd offset aNotEnoughMemor ; "not enough memory"
db    3
db    0
db    0
db    0
dd offset aNoSuchFileOrDi ; "no such file or directory"
db  1Eh
db    0
db    0
db    0
dd offset aIoError      ; "io error"
db 0D5h
db    4
db    0
db    0
dd offset aResourceUnavai ; "resource unavailable try again"
db  19h
db    0
db    0
db    0
dd offset aIoError      ; "io error"
db  20h
db    0
db    0
db    0
dd offset aPermissionDeni ; "permission denied"
db    4
db    0
db    0
db    0
dd offset aTooManyFilesOp ; "too many files open"
db  1Dh
db    0
db    0
db    0
dd offset aIoError      ; "io error"
db  13h
db    0
db    0
db    0
dd offset aPermissionDeni ; "permission denied"
db  1Dh
db  27h ; '
db    0
db    0
dd offset aPermissionDeni_0 ; "permission_denied"
db  40h ; @
db  27h ; '
db    0
db    0
dd offset aAddressInUse ; "address_in_use"
db  41h ; A
db  27h ; '
db    0
db    0
dd offset aAddressNotAvai ; "address_not_available"
db  3Fh ; ?
db  27h ; '
db    0
db    0
dd offset aAddressFamilyN_0 ; "address_family_not_supported"
db  35h ; 5
db  27h ; '
db    0
db    0
dd offset aConnectionAlre ; "connection_already_in_progress"
db  19h
db  27h ; '
db    0
db    0
dd offset aBadFileDescrip ; "bad_file_descriptor"
db  45h ; E
db  27h ; '
db    0
db    0
dd offset aConnectionAbor ; "connection_aborted"
db  4Dh ; M
db  27h ; '
db    0
db    0
dd offset aConnectionRefu ; "connection_refused"
db  46h ; F
db  27h ; '
db    0
db    0
dd offset aConnectionRese ; "connection_reset"
db  37h ; 7
db  27h ; '
db    0
db    0
dd offset aDestinationAdd ; "destination_address_required"
db  1Eh
db  27h ; '
db    0
db    0
dd offset aBadAddress   ; "bad_address"
db  51h ; Q
db  27h ; '
db    0
db    0
dd offset aHostUnreachabl ; "host_unreachable"
db  34h ; 4
db  27h ; '
db    0
db    0
dd offset aOperationInPro ; "operation_in_progress"
db  14h
db  27h ; '
db    0
db    0
dd offset aInterrupted  ; "interrupted"
db  26h ; &
db  27h ; '
db    0
db    0
dd offset aInvalidArgumen_0 ; "invalid_argument"
db  48h ; H
db  27h ; '
db    0
db    0
dd offset aAlreadyConnect ; "already_connected"
db  28h ; (
db  27h ; '
db    0
db    0
dd offset aTooManyFilesOp_0 ; "too_many_files_open"
db  38h ; 8
db  27h ; '
db    0
db    0
dd offset aMessageSize  ; "message_size"
db  4Fh ; O
db  27h ; '
db    0
db    0
dd offset aFilenameTooLon_0 ; "filename_too_long"
db  42h ; B
db  27h ; '
db    0
db    0
dd offset aNetworkDown  ; "network_down"
db  44h ; D
db  27h ; '
db    0
db    0
dd offset aNetworkReset ; "network_reset"
db  43h ; C
db  27h ; '
db    0
db    0
dd offset aNetworkUnreach ; "network_unreachable"
db  47h ; G
db  27h ; '
db    0
db    0
dd offset aNoBufferSpace ; "no_buffer_space"
db  3Ah ; :
db  27h ; '
db    0
db    0
dd offset aNoProtocolOpti ; "no_protocol_option"
db  49h ; I
db  27h ; '
db    0
db    0
dd offset aNotConnected ; "not_connected"
db  36h ; 6
db  27h ; '
db    0
db    0
dd offset aNotASocket   ; "not_a_socket"
db  3Dh ; =
db  27h ; '
db    0
db    0
dd offset aOperationNotSu ; "operation_not_supported"
db  3Bh ; ;
db  27h ; '
db    0
db    0
dd offset aProtocolNotSup ; "protocol_not_supported"
db  39h ; 9
db  27h ; '
db    0
db    0
dd offset aWrongProtocolT ; "wrong_protocol_type"
db  4Ch ; L
db  27h ; '
db    0
db    0
dd offset aTimedOut     ; "timed_out"
db  33h ; 3
db  27h ; '
db    0
db    0
dd offset aOperationWould ; "operation_would_block"
align 10h
unk_8924F0 db  66h ; f
db    0
db    0
db    0
off_8924F4 dd offset aAddressFamilyN ; "address family not supported"
db  64h ; d
db    0
db    0
db    0
dd offset aAddressInUse_0 ; "address in use"
db  65h ; e
db    0
db    0
db    0
dd offset aAddressNotAvai_0 ; "address not available"
db  71h ; q
db    0
db    0
db    0
dd offset aAlreadyConnect_0 ; "already connected"
db    7
db    0
db    0
db    0
dd offset aArgumentListTo ; "argument list too long"
db  21h ; !
db    0
db    0
db    0
dd offset aArgumentOutOfD ; "argument out of domain"
db  0Eh
db    0
db    0
db    0
dd offset aBadAddress_0 ; "bad address"
db    9
db    0
db    0
db    0
dd offset aBadFileDescrip_0 ; "bad file descriptor"
db  68h ; h
db    0
db    0
db    0
dd offset aBadMessage   ; "bad message"
db  20h
db    0
db    0
db    0
dd offset aBrokenPipe   ; "broken pipe"
db  6Ah ; j
db    0
db    0
db    0
dd offset aConnectionAbor_0 ; "connection aborted"
db  67h ; g
db    0
db    0
db    0
dd offset aConnectionAlre_0 ; "connection already in progress"
db  6Bh ; k
db    0
db    0
db    0
dd offset aConnectionRefu_0 ; "connection refused"
db  6Ch ; l
db    0
db    0
db    0
dd offset aConnectionRese_0 ; "connection reset"
db  12h
db    0
db    0
db    0
dd offset aCrossDeviceLin ; "cross device link"
db  6Dh ; m
db    0
db    0
db    0
dd offset aDestinationAdd_0 ; "destination address required"
db  10h
db    0
db    0
db    0
dd offset aDeviceOrResour ; "device or resource busy"
db  29h ; )
db    0
db    0
db    0
dd offset aDirectoryNotEm ; "directory not empty"
db    8
db    0
db    0
db    0
dd offset aExecutableForm ; "executable format error"
db  11h
db    0
db    0
db    0
dd offset aFileExists   ; "file exists"
db  1Bh
db    0
db    0
db    0
dd offset aFileTooLarge ; "file too large"
db  26h ; &
db    0
db    0
db    0
dd offset aFilenameTooLon ; "filename too long"
db  28h ; (
db    0
db    0
db    0
dd offset aFunctionNotSup ; "function not supported"
db  6Eh ; n
db    0
db    0
db    0
dd offset aHostUnreachabl_0 ; "host unreachable"
db  6Fh ; o
db    0
db    0
db    0
dd offset aIdentifierRemo ; "identifier removed"
db  2Ah ; *
db    0
db    0
db    0
dd offset aIllegalByteSeq ; "illegal byte sequence"
db  19h
db    0
db    0
db    0
dd offset aInappropriateI ; "inappropriate io control operation"
db    4
db    0
db    0
db    0
dd offset aInterrupted  ; "interrupted"
db  16h
db    0
db    0
db    0
dd offset aInvalidArgumen ; "invalid argument"
db  1Dh
db    0
db    0
db    0
dd offset aInvalidSeek  ; "invalid seek"
db    5
db    0
db    0
db    0
dd offset aIoError      ; "io error"
db  15h
db    0
db    0
db    0
dd offset aIsADirectory ; "is a directory"
db  73h ; s
db    0
db    0
db    0
dd offset aMessageSize_0 ; "message size"
db  74h ; t
db    0
db    0
db    0
dd offset aNetworkDown_0 ; "network down"
db  75h ; u
db    0
db    0
db    0
dd offset aNetworkReset_0 ; "network reset"
db  76h ; v
db    0
db    0
db    0
dd offset aNetworkUnreach_0 ; "network unreachable"
db  77h ; w
db    0
db    0
db    0
dd offset aNoBufferSpace_0 ; "no buffer space"
db  0Ah
db    0
db    0
db    0
dd offset aNoChildProcess ; "no child process"
db  79h ; y
db    0
db    0
db    0
dd offset aNoLink       ; "no link"
db  27h ; '
db    0
db    0
db    0
dd offset aNoLockAvailabl ; "no lock available"
db  78h ; x
db    0
db    0
db    0
dd offset aNoMessageAvail ; "no message available"
db  7Ah ; z
db    0
db    0
db    0
dd offset aNoMessage    ; "no message"
db  7Bh ; {
db    0
db    0
db    0
dd offset aNoProtocolOpti_0 ; "no protocol option"
db  1Ch
db    0
db    0
db    0
dd offset aNoSpaceOnDevic ; "no space on device"
db  7Ch ; |
db    0
db    0
db    0
dd offset aNoStreamResour ; "no stream resources"
db    6
db    0
db    0
db    0
dd offset aNoSuchDeviceOr ; "no such device or address"
db  13h
db    0
db    0
db    0
dd offset aNoSuchDevice ; "no such device"
db    2
db    0
db    0
db    0
dd offset aNoSuchFileOrDi ; "no such file or directory"
db    3
db    0
db    0
db    0
dd offset aNoSuchProcess ; "no such process"
db  14h
db    0
db    0
db    0
dd offset aNotADirectory ; "not a directory"
db  80h
db    0
db    0
db    0
dd offset aNotASocket_0 ; "not a socket"
db  7Dh ; }
db    0
db    0
db    0
dd offset aNotAStream   ; "not a stream"
db  7Eh ; ~
db    0
db    0
db    0
dd offset aNotConnected_0 ; "not connected"
db  0Ch
db    0
db    0
db    0
dd offset aNotEnoughMemor ; "not enough memory"
db  81h
db    0
db    0
db    0
dd offset aNotSupported ; "not supported"
db  69h ; i
db    0
db    0
db    0
dd offset aOperationCance ; "operation canceled"
db  70h ; p
db    0
db    0
db    0
dd offset aOperationInPro_0 ; "operation in progress"
db    1
db    0
db    0
db    0
dd offset aOperationNotPe ; "operation not permitted"
db  82h
db    0
db    0
db    0
dd offset aOperationNotSu_0 ; "operation not supported"
db  8Ch
db    0
db    0
db    0
dd offset aOperationWould_0 ; "operation would block"
db  85h
db    0
db    0
db    0
dd offset aOwnerDead    ; "owner dead"
db  0Dh
db    0
db    0
db    0
dd offset aPermissionDeni ; "permission denied"
db  86h
db    0
db    0
db    0
dd offset aProtocolError ; "protocol error"
db  87h
db    0
db    0
db    0
dd offset aProtocolNotSup_0 ; "protocol not supported"
db  1Eh
db    0
db    0
db    0
dd offset aReadOnlyFileSy ; "read only file system"
db  24h ; $
db    0
db    0
db    0
dd offset aResourceDeadlo ; "resource deadlock would occur"
db  0Bh
db    0
db    0
db    0
dd offset aResourceUnavai ; "resource unavailable try again"
db  22h ; "
db    0
db    0
db    0
dd offset aResultOutOfRan ; "result out of range"
db  7Fh ; 
db    0
db    0
db    0
dd offset aStateNotRecove ; "state not recoverable"
db  89h
db    0
db    0
db    0
dd offset aStreamTimeout ; "stream timeout"
db  8Bh
db    0
db    0
db    0
dd offset aTextFileBusy ; "text file busy"
db  8Ah
db    0
db    0
db    0
dd offset aTimedOut_0   ; "timed out"
db  17h
db    0
db    0
db    0
dd offset aTooManyFilesOp_1 ; "too many files open in system"
db  18h
db    0
db    0
db    0
dd offset aTooManyFilesOp ; "too many files open"
db  1Fh
db    0
db    0
db    0
dd offset aTooManyLinks ; "too many links"
db  72h ; r
db    0
db    0
db    0
dd offset aTooManySymboli ; "too many symbolic link levels"
db  84h
db    0
db    0
db    0
dd offset aValueTooLarge ; "value too large"
db  88h
db    0
db    0
db    0
dd offset aWrongProtocolT_0 ; "wrong protocol type"
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
aPermissionDeni db 'permission denied',0
align 4
aFileExists db 'file exists',0
aNoSuchDevice db 'no such device',0
align 4
aFilenameTooLon db 'filename too long',0
align 4
aDeviceOrResour db 'device or resource busy',0
aIoError db 'io error',0
align 10h
aDirectoryNotEm db 'directory not empty',0
aInvalidArgumen db 'invalid argument',0
align 4
aNoSpaceOnDevic db 'no space on device',0
align 4
aNoSuchFileOrDi db 'no such file or directory',0
align 4
aFunctionNotSup db 'function not supported',0
align 10h
aNoLockAvailabl db 'no lock available',0
align 4
aNotEnoughMemor db 'not enough memory',0
align 4
aResourceUnavai db 'resource unavailable try again',0
align 4
aCrossDeviceLin db 'cross device link',0
align 4
aOperationCance db 'operation canceled',0
align 10h
aTooManyFilesOp db 'too many files open',0
aPermissionDeni_0 db 'permission_denied',0
align 4
aAddressInUse db 'address_in_use',0
align 4
aAddressNotAvai db 'address_not_available',0
align 10h
aAddressFamilyN_0 db 'address_family_not_supported',0
align 10h
aConnectionAlre db 'connection_already_in_progress',0
align 10h
aBadFileDescrip db 'bad_file_descriptor',0
aConnectionAbor db 'connection_aborted',0
align 4
aConnectionRefu db 'connection_refused',0
align 4
aConnectionRese db 'connection_reset',0
align 10h
aDestinationAdd db 'destination_address_required',0
align 10h
aBadAddress db 'bad_address',0
aHostUnreachabl db 'host_unreachable',0
align 10h
aOperationInPro db 'operation_in_progress',0
align 4
aInterrupted db 'interrupted',0
aInvalidArgumen_0 db 'invalid_argument',0
align 4
aAlreadyConnect db 'already_connected',0
align 4
aTooManyFilesOp_0 db 'too_many_files_open',0
aMessageSize db 'message_size',0
align 10h
aFilenameTooLon_0 db 'filename_too_long',0
align 4
aNetworkDown db 'network_down',0
align 4
aNetworkReset db 'network_reset',0
align 4
aNetworkUnreach db 'network_unreachable',0
aNoBufferSpace db 'no_buffer_space',0
aNoProtocolOpti db 'no_protocol_option',0
align 4
aNotConnected db 'not_connected',0
align 4
aNotASocket db 'not_a_socket',0
align 4
aOperationNotSu db 'operation_not_supported',0
aProtocolNotSup db 'protocol_not_supported',0
align 4
aWrongProtocolT db 'wrong_protocol_type',0
aTimedOut db 'timed_out',0
align 4
aOperationWould db 'operation_would_block',0
align 4
aAddressFamilyN db 'address family not supported',0
align 4
aAddressInUse_0 db 'address in use',0
align 4
aAddressNotAvai_0 db 'address not available',0
align 4
aAlreadyConnect_0 db 'already connected',0
align 10h
aArgumentListTo db 'argument list too long',0
align 4
aArgumentOutOfD db 'argument out of domain',0
align 10h
aBadAddress_0 db 'bad address',0
aBadFileDescrip_0 db 'bad file descriptor',0
aBadMessage db 'bad message',0
aBrokenPipe db 'broken pipe',0
aConnectionAbor_0 db 'connection aborted',0
align 4
aConnectionAlre_0 db 'connection already in progress',0
align 4
aConnectionRefu_0 db 'connection refused',0
align 10h
aConnectionRese_0 db 'connection reset',0
align 4
aDestinationAdd_0 db 'destination address required',0
align 4
aExecutableForm db 'executable format error',0
aFileTooLarge db 'file too large',0
align 4
aHostUnreachabl_0 db 'host unreachable',0
align 10h
aIdentifierRemo db 'identifier removed',0
align 4
aIllegalByteSeq db 'illegal byte sequence',0
align 4
aInappropriateI db 'inappropriate io control operation',0
align 10h
aInvalidSeek db 'invalid seek',0
align 10h
aIsADirectory db 'is a directory',0
align 10h
aMessageSize_0 db 'message size',0
align 10h
aNetworkDown_0 db 'network down',0
align 10h
aNetworkReset_0 db 'network reset',0
align 10h
aNetworkUnreach_0 db 'network unreachable',0
aNoBufferSpace_0 db 'no buffer space',0
aNoChildProcess db 'no child process',0
align 4
aNoLink db 'no link',0
aNoMessageAvail db 'no message available',0
align 4
aNoMessage db 'no message',0
align 4
aNoProtocolOpti_0 db 'no protocol option',0
align 4
aNoStreamResour db 'no stream resources',0
aNoSuchDeviceOr db 'no such device or address',0
align 4
aNoSuchProcess db 'no such process',0
aNotADirectory db 'not a directory',0
aNotASocket_0 db 'not a socket',0
align 4
aNotAStream db 'not a stream',0
align 4
aNotConnected_0 db 'not connected',0
align 4
aNotSupported db 'not supported',0
align 4
aOperationInPro_0 db 'operation in progress',0
align 10h
aOperationNotPe db 'operation not permitted',0
aOperationNotSu_0 db 'operation not supported',0
aOperationWould_0 db 'operation would block',0
align 4
aOwnerDead db 'owner dead',0
align 4
aProtocolError db 'protocol error',0
align 4
aProtocolNotSup_0 db 'protocol not supported',0
align 4
aReadOnlyFileSy db 'read only file system',0
align 4
aResourceDeadlo db 'resource deadlock would occur',0
align 4
aResultOutOfRan db 'result out of range',0
aStateNotRecove db 'state not recoverable',0
align 10h
aStreamTimeout db 'stream timeout',0
align 10h
aTextFileBusy db 'text file busy',0
align 10h
aTimedOut_0 db 'timed out',0
align 4
aTooManyFilesOp_1 db 'too many files open in system',0
align 4
aTooManyLinks db 'too many links',0
align 4
aTooManySymboli db 'too many symbolic link levels',0
align 4
aValueTooLarge db 'value too large',0
aWrongProtocolT_0 db 'wrong protocol type',0
dd offset unk_898064
off_892FF4 dd offset sub_881000
dd offset __purecall
dd offset __purecall
dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
dd offset sub_881090
dd offset sub_881050
dd offset unk_898050
off_893010 dd offset sub_881000
dd offset sub_8810B0
dd offset sub_8810C0
dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
dd offset sub_881090
dd offset sub_881050
dd offset unk_89803C
off_89302C dd offset sub_881000
dd offset sub_881130
dd offset sub_881140
dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
dd offset sub_881090
dd offset sub_881050
dd offset unk_898028
off_893048 dd offset sub_881000
dd offset sub_881190
dd offset sub_8811A0
dd offset sub_881210
dd offset sub_881090
dd offset sub_881050
dd offset unk_897D64
off_893064 dd offset sub_8853A8
dd offset ?what@exception@@UBEPBDXZ ; exception::what(void)
aBadAllocation db 'bad allocation',0
align 4
dd offset unk_897DB0
off_893080 dd offset sub_8853CD
dd offset ?what@exception@@UBEPBDXZ ; exception::what(void)
dd offset unk_897DFC
off_89308C dd offset sub_8853CD
dd offset ?what@exception@@UBEPBDXZ ; exception::what(void)
dd offset unk_897E4C
off_893098 dd offset sub_8853CD
dd offset ?what@exception@@UBEPBDXZ ; exception::what(void)
dd offset unk_897E9C
off_8930A4 dd offset sub_885B10
unk_8930A8 db  63h ; c
db  73h ; s
db  6Dh ; m
db 0E0h
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    3
db    0
db    0
db    0
db  20h
db    5
db  93h
db  19h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset unk_897EE4
off_8930CC dd offset sub_887230
dd offset ?what@exception@@UBEPBDXZ ; exception::what(void)
aUnknownExcepti db 'Unknown exception',0
align 4
; const struct _EXCEPTION_POINTERS ExceptionInfo
ExceptionInfo _EXCEPTION_POINTERS <offset dword_89B0B0,\
                     offset dword_89B100>
; const WCHAR ModuleName
ModuleName:
text "UTF-16LE", 'mscoree.dll',0
; const CHAR ProcName[]
ProcName db 'CorExitProcess',0
align 4
aR6008NotEnough:
text "UTF-16LE", 'R6008',0Dh,0Ah
text "UTF-16LE", '- not enough space fo'
text "UTF-16LE", 'r arguments',0Dh,0Ah,0
align 10h
aR6009NotEnough:
text "UTF-16LE", 'R6009',0Dh,0Ah
text "UTF-16LE", '- not enough space fo'
text "UTF-16LE", 'r environment',0Dh,0Ah
text "UTF-16LE", 0
aR6010AbortHasB:
text "UTF-16LE", 'R6010',0Dh,0Ah
text "UTF-16LE", '- abort() has been ca'
text "UTF-16LE", 'lled',0Dh,0Ah,0
align 10h
aR6016NotEnough:
text "UTF-16LE", 'R6016',0Dh,0Ah
text "UTF-16LE", '- not enough space fo'
text "UTF-16LE", 'r thread data',0Dh,0Ah
text "UTF-16LE", 0
aR6017Unexpecte:
text "UTF-16LE", 'R6017',0Dh,0Ah
text "UTF-16LE", '- unexpected multithr'
text "UTF-16LE", 'ead lock error',0Dh,0Ah
text "UTF-16LE", 0
align 8
aR6018Unexpecte:
text "UTF-16LE", 'R6018',0Dh,0Ah
text "UTF-16LE", '- unexpected heap err'
text "UTF-16LE", 'or',0Dh,0Ah,0
align 10h
aR6019UnableToO:
text "UTF-16LE", 'R6019',0Dh,0Ah
text "UTF-16LE", '- unable to open cons'
text "UTF-16LE", 'ole device',0Dh,0Ah,0
align 8
aR6024NotEnough:
text "UTF-16LE", 'R6024',0Dh,0Ah
text "UTF-16LE", '- not enough space fo'
text "UTF-16LE", 'r _onexit/atexit tabl'
text "UTF-16LE", 'e',0Dh,0Ah,0
align 8
aR6025PureVirtu:
text "UTF-16LE", 'R6025',0Dh,0Ah
text "UTF-16LE", '- pure virtual functi'
text "UTF-16LE", 'on call',0Dh,0Ah,0
align 8
aR6026NotEnough:
text "UTF-16LE", 'R6026',0Dh,0Ah
text "UTF-16LE", '- not enough space fo'
text "UTF-16LE", 'r stdio initializatio'
text "UTF-16LE", 'n',0Dh,0Ah,0
align 8
aR6027NotEnough:
text "UTF-16LE", 'R6027',0Dh,0Ah
text "UTF-16LE", '- not enough space fo'
text "UTF-16LE", 'r lowio initializatio'
text "UTF-16LE", 'n',0Dh,0Ah,0
align 8
aR6028UnableToI:
text "UTF-16LE", 'R6028',0Dh,0Ah
text "UTF-16LE", '- unable to initializ'
text "UTF-16LE", 'e heap',0Dh,0Ah,0
align 4
aR6030CrtNotIni:
text "UTF-16LE", 'R6030',0Dh,0Ah
text "UTF-16LE", '- CRT not initialized'
text "UTF-16LE", 0Dh,0Ah,0
align 8
aR6031AttemptTo:
text "UTF-16LE", 'R6031',0Dh,0Ah
text "UTF-16LE", '- Attempt to initiali'
text "UTF-16LE", 'ze the CRT more than '
text "UTF-16LE", 'once.',0Ah
text "UTF-16LE", 'This indicates a bug '
text "UTF-16LE", 'in your application.',0Dh
text "UTF-16LE", 0Ah,0
align 10h
aR6032NotEnough:
text "UTF-16LE", 'R6032',0Dh,0Ah
text "UTF-16LE", '- not enough space fo'
text "UTF-16LE", 'r locale information',0Dh
text "UTF-16LE", 0Ah,0
align 4
aR6033AttemptTo:
text "UTF-16LE", 'R6033',0Dh,0Ah
text "UTF-16LE", '- Attempt to use MSIL'
text "UTF-16LE", ' code from this assem'
text "UTF-16LE", 'bly during native cod'
text "UTF-16LE", 'e initialization',0Ah
text "UTF-16LE", 'This indicates a bug '
text "UTF-16LE", 'in your application. '
text "UTF-16LE", 'It is most likely the'
text "UTF-16LE", ' result of calling an'
text "UTF-16LE", ' MSIL-compiled (/clr)'
text "UTF-16LE", ' function from a nati'
text "UTF-16LE", 've constructor or fro'
text "UTF-16LE", 'm DllMain.',0Dh,0Ah,0
align 4
aR6034Inconsist:
text "UTF-16LE", 'R6034',0Dh,0Ah
text "UTF-16LE", '- inconsistent onexit'
text "UTF-16LE", ' begin-end variables',0Dh
text "UTF-16LE", 0Ah,0
align 10h
aDomainError:
text "UTF-16LE", 'DOMAIN error',0Dh,0Ah
text "UTF-16LE", 0
align 10h
aSingError:
text "UTF-16LE", 'SING error',0Dh,0Ah,0
align 4
aTlossError:
text "UTF-16LE", 'TLOSS error',0Dh,0Ah,0
asc_893978:
text "UTF-16LE", 0Dh,0Ah,0
align 10h
aRuntimeError:
text "UTF-16LE", 'runtime error ',0
align 10h
dword_8939A0 dd 2
off_8939A4 dd offset aR6002FloatingP ; "R6002\r\n- floating point support not l"...
db    8
db    0
db    0
db    0
dd offset aR6008NotEnough ; "R6008\r\n- not enough space for argumen"...
db    9
db    0
db    0
db    0
dd offset aR6009NotEnough ; "R6009\r\n- not enough space for environ"...
db  0Ah
db    0
db    0
db    0
dd offset aR6010AbortHasB ; "R6010\r\n- abort() has been called\r\n"
db  10h
db    0
db    0
db    0
dd offset aR6016NotEnough ; "R6016\r\n- not enough space for thread "...
db  11h
db    0
db    0
db    0
dd offset aR6017Unexpecte ; "R6017\r\n- unexpected multithread lock "...
db  12h
db    0
db    0
db    0
dd offset aR6018Unexpecte ; "R6018\r\n- unexpected heap error\r\n"
db  13h
db    0
db    0
db    0
dd offset aR6019UnableToO ; "R6019\r\n- unable to open console devic"...
db  18h
db    0
db    0
db    0
dd offset aR6024NotEnough ; "R6024\r\n- not enough space for _onexit"...
db  19h
db    0
db    0
db    0
dd offset aR6025PureVirtu ; "R6025\r\n- pure virtual function call\r"...
db  1Ah
db    0
db    0
db    0
dd offset aR6026NotEnough ; "R6026\r\n- not enough space for stdio i"...
db  1Bh
db    0
db    0
db    0
dd offset aR6027NotEnough ; "R6027\r\n- not enough space for lowio i"...
db  1Ch
db    0
db    0
db    0
dd offset aR6028UnableToI ; "R6028\r\n- unable to initialize heap\r"...
db  1Eh
db    0
db    0
db    0
dd offset aR6030CrtNotIni ; "R6030\r\n- CRT not initialized\r\n"
db  1Fh
db    0
db    0
db    0
dd offset aR6031AttemptTo ; "R6031\r\n- Attempt to initialize the CR"...
db  20h
db    0
db    0
db    0
dd offset aR6032NotEnough ; "R6032\r\n- not enough space for locale "...
db  21h ; !
db    0
db    0
db    0
dd offset aR6033AttemptTo ; "R6033\r\n- Attempt to use MSIL code fro"...
db  22h ; "
db    0
db    0
db    0
dd offset aR6034Inconsist ; "R6034\r\n- inconsistent onexit begin-en"...
db  78h ; x
db    0
db    0
db    0
dd offset aDomainError  ; "DOMAIN error\r\n"
db  79h ; y
db    0
db    0
db    0
dd offset aSingError    ; "SING error\r\n"
db  7Ah ; z
db    0
db    0
db    0
dd offset aTlossError   ; "TLOSS error\r\n"
db 0FCh
db    0
db    0
db    0
dd offset asc_893978    ; "\r\n"
db 0FFh
db    0
db    0
db    0
dd offset aRuntimeError ; "runtime error "
aR6002FloatingP:
text "UTF-16LE", 'R6002',0Dh,0Ah
text "UTF-16LE", '- floating point supp'
text "UTF-16LE", 'ort not loaded',0Dh,0Ah
text "UTF-16LE", 0
align 4
; const wchar_t aRuntimeErrorPr
aRuntimeErrorPr:
text "UTF-16LE", 'Runtime Error!',0Ah
text "UTF-16LE", 0Ah
text "UTF-16LE", 'Program: ',0
; const wchar_t aProgramNameUnk
aProgramNameUnk:
text "UTF-16LE", '<program name unknown'
text "UTF-16LE", '>',0
align 4
; const wchar_t Source
Source:
text "UTF-16LE", '...',0
; const wchar_t asc_893B20
asc_893B20:
text "UTF-16LE", 0Ah
text "UTF-16LE", 0Ah,0
align 4
aMicrosoftVisua:
text "UTF-16LE", 'Microsoft Visual C++ '
text "UTF-16LE", 'Runtime Library',0
align 4
aSunmontuewedth db 'SunMonTueWedThuFriSat',0
align 4
aJanfebmaraprma db 'JanFebMarAprMayJunJulAugSepOctNovDe'
db 'c',0
align 4
; const char aTz[]
aTz db 'TZ',0
align 4
off_893BB8 dd offset aJaJp ; "ja-JP"
off_893BBC dd offset aZhCn ; "zh-CN"
off_893BC0 dd offset aKoKr ; "ko-KR"
off_893BC4 dd offset aZhTw ; "zh-TW"
aJaJp:
text "UTF-16LE", 'ja-JP',0
aZhCn:
text "UTF-16LE", 'zh-CN',0
aKoKr:
text "UTF-16LE", 'ko-KR',0
aZhTw:
text "UTF-16LE", 'zh-TW',0
aSun db 'Sun',0
aMon db 'Mon',0
aTue db 'Tue',0
aWed db 'Wed',0
aThu db 'Thu',0
aFri db 'Fri',0
aSat db 'Sat',0
aSunday db 'Sunday',0
align 4
aMonday db 'Monday',0
align 4
aTuesday db 'Tuesday',0
aWednesday db 'Wednesday',0
align 4
aThursday db 'Thursday',0
align 4
aFriday db 'Friday',0
align 4
aSaturday db 'Saturday',0
align 4
aJan db 'Jan',0
aFeb db 'Feb',0
aMar db 'Mar',0
aApr db 'Apr',0
aMay db 'May',0
aJun db 'Jun',0
aJul db 'Jul',0
aAug db 'Aug',0
aSep db 'Sep',0
aOct db 'Oct',0
aNov db 'Nov',0
aDec db 'Dec',0
aJanuary db 'January',0
aFebruary db 'February',0
align 4
aMarch db 'March',0
align 4
aApril db 'April',0
align 4
aJune db 'June',0
align 4
aJuly db 'July',0
align 4
aAugust db 'August',0
align 4
aSeptember db 'September',0
align 10h
aOctober db 'October',0
aNovember db 'November',0
align 4
aDecember db 'December',0
align 10h
aAm db 'AM',0
align 4
aPm db 'PM',0
align 4
aMmDdYy db 'MM/dd/yy',0
align 4
aDdddMmmmDdYyyy db 'dddd, MMMM dd, yyyy',0
aHhMmSs db 'HH:mm:ss',0
align 4
aSun_0:
text "UTF-16LE", 'Sun',0
aMon_0:
text "UTF-16LE", 'Mon',0
aTue_0:
text "UTF-16LE", 'Tue',0
aWed_0:
text "UTF-16LE", 'Wed',0
aThu_0:
text "UTF-16LE", 'Thu',0
aFri_0:
text "UTF-16LE", 'Fri',0
aSat_0:
text "UTF-16LE", 'Sat',0
aSunday_0:
text "UTF-16LE", 'Sunday',0
align 4
aMonday_0:
text "UTF-16LE", 'Monday',0
align 4
aTuesday_0:
text "UTF-16LE", 'Tuesday',0
aWednesday_0:
text "UTF-16LE", 'Wednesday',0
aThursday_0:
text "UTF-16LE", 'Thursday',0
align 4
aFriday_0:
text "UTF-16LE", 'Friday',0
align 4
aSaturday_0:
text "UTF-16LE", 'Saturday',0
align 4
aJan_0:
text "UTF-16LE", 'Jan',0
aFeb_0:
text "UTF-16LE", 'Feb',0
aMar_0:
text "UTF-16LE", 'Mar',0
aApr_0:
text "UTF-16LE", 'Apr',0
aMay_0:
text "UTF-16LE", 'May',0
aJun_0:
text "UTF-16LE", 'Jun',0
aJul_0:
text "UTF-16LE", 'Jul',0
aAug_0:
text "UTF-16LE", 'Aug',0
aSep_0:
text "UTF-16LE", 'Sep',0
aOct_0:
text "UTF-16LE", 'Oct',0
aNov_0:
text "UTF-16LE", 'Nov',0
aDec_0:
text "UTF-16LE", 'Dec',0
aJanuary_0:
text "UTF-16LE", 'January',0
aFebruary_0:
text "UTF-16LE", 'February',0
align 4
aMarch_0:
text "UTF-16LE", 'March',0
aApril_0:
text "UTF-16LE", 'April',0
aJune_0:
text "UTF-16LE", 'June',0
align 10h
aJuly_0:
text "UTF-16LE", 'July',0
align 4
aAugust_0:
text "UTF-16LE", 'August',0
align 4
aSeptember_0:
text "UTF-16LE", 'September',0
aOctober_0:
text "UTF-16LE", 'October',0
aNovember_0:
text "UTF-16LE", 'November',0
align 4
aDecember_0:
text "UTF-16LE", 'December',0
align 4
aAm_0:
text "UTF-16LE", 'AM',0
align 10h
aPm_0:
text "UTF-16LE", 'PM',0
align 4
aMmDdYy_0:
text "UTF-16LE", 'MM/dd/yy',0
align 4
aDdddMmmmDdYyyy_0:
text "UTF-16LE", 'dddd, MMMM dd, yyyy',0
aHhMmSs_0:
text "UTF-16LE", 'HH:mm:ss',0
align 4
aEnUs:
text "UTF-16LE", 'en-US',0
align 8
db    1
db    2
db    3
db    4
db    5
db    6
db    7
db    8
db    9
db  0Ah
db  0Bh
db  0Ch
db  0Dh
db  0Eh
db  0Fh
db  10h
db  11h
db  12h
db  13h
db  14h
db  15h
db  16h
db  17h
db  18h
db  19h
db  1Ah
db  1Bh
db  1Ch
db  1Dh
db  1Eh
db  1Fh
db  20h
db  21h ; !
db  22h ; "
db  23h ; #
db  24h ; $
db  25h ; %
db  26h ; &
db  27h ; '
db  28h ; (
db  29h ; )
db  2Ah ; *
db  2Bh ; +
db  2Ch ; ,
db  2Dh ; -
db  2Eh ; .
db  2Fh ; /
db  30h ; 0
db  31h ; 1
db  32h ; 2
db  33h ; 3
db  34h ; 4
db  35h ; 5
db  36h ; 6
db  37h ; 7
db  38h ; 8
db  39h ; 9
db  3Ah ; :
db  3Bh ; ;
db  3Ch ; <
db  3Dh ; =
db  3Eh ; >
db  3Fh ; ?
db  40h ; @
db  41h ; A
db  42h ; B
db  43h ; C
db  44h ; D
db  45h ; E
db  46h ; F
db  47h ; G
db  48h ; H
db  49h ; I
db  4Ah ; J
db  4Bh ; K
db  4Ch ; L
db  4Dh ; M
db  4Eh ; N
db  4Fh ; O
db  50h ; P
db  51h ; Q
db  52h ; R
db  53h ; S
db  54h ; T
db  55h ; U
db  56h ; V
db  57h ; W
db  58h ; X
db  59h ; Y
db  5Ah ; Z
db  5Bh ; [
db  5Ch ; \
db  5Dh ; ]
db  5Eh ; ^
db  5Fh ; _
db  60h ; `
db  61h ; a
db  62h ; b
db  63h ; c
db  64h ; d
db  65h ; e
db  66h ; f
db  67h ; g
db  68h ; h
db  69h ; i
db  6Ah ; j
db  6Bh ; k
db  6Ch ; l
db  6Dh ; m
db  6Eh ; n
db  6Fh ; o
db  70h ; p
db  71h ; q
db  72h ; r
db  73h ; s
db  74h ; t
db  75h ; u
db  76h ; v
db  77h ; w
db  78h ; x
db  79h ; y
db  7Ah ; z
db  7Bh ; {
db  7Ch ; |
db  7Dh ; }
db  7Eh ; ~
db  7Fh ; 
db    0
unk_893FD8 db    5
db    0
db    0
db 0C0h
db  0Bh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  1Dh
db    0
db    0
db 0C0h
db    4
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  96h
db    0
db    0
db 0C0h
db    4
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  8Dh
db    0
db    0
db 0C0h
db    8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  8Eh
db    0
db    0
db 0C0h
db    8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  8Fh
db    0
db    0
db 0C0h
db    8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h
db    0
db    0
db 0C0h
db    8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  91h
db    0
db    0
db 0C0h
db    8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  92h
db    0
db    0
db 0C0h
db    8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  93h
db    0
db    0
db 0C0h
db    8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0B4h
db    2
db    0
db 0C0h
db    8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0B5h
db    2
db    0
db 0C0h
db    8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dword_894068 dd 0Ch
db  90h
db    0
db    0
db    0
dword_894070 dd 3
dword_894074 dd 9
; const WCHAR aKernel32Dll_0
aKernel32Dll_0:
text "UTF-16LE", 'kernel32.dll',0
align 4
; const CHAR aFlsalloc[]
aFlsalloc db 'FlsAlloc',0
align 10h
; const CHAR aFlsfree[]
aFlsfree db 'FlsFree',0
; const CHAR aFlsgetvalue[]
aFlsgetvalue db 'FlsGetValue',0
; const CHAR aFlssetvalue[]
aFlssetvalue db 'FlsSetValue',0
; const CHAR aInitializecrit[]
aInitializecrit db 'InitializeCriticalSectionEx',0
; const CHAR aCreatesemaphor[]
aCreatesemaphor db 'CreateSemaphoreExW',0
align 10h
; const CHAR aSetthreadstack[]
aSetthreadstack db 'SetThreadStackGuarantee',0
; const CHAR aCreatethreadpo[]
aCreatethreadpo db 'CreateThreadpoolTimer',0
align 10h
; const CHAR aSetthreadpoolt[]
aSetthreadpoolt db 'SetThreadpoolTimer',0
align 4
; const CHAR aWaitforthreadp[]
aWaitforthreadp db 'WaitForThreadpoolTimerCallbacks',0
; const CHAR aClosethreadpoo[]
aClosethreadpoo db 'CloseThreadpoolTimer',0
align 4
; const CHAR aCreatethreadpo_0[]
aCreatethreadpo_0 db 'CreateThreadpoolWait',0
align 4
; const CHAR aSetthreadpoolw[]
aSetthreadpoolw db 'SetThreadpoolWait',0
align 4
; const CHAR aClosethreadpoo_0[]
aClosethreadpoo_0 db 'CloseThreadpoolWait',0
; const CHAR aFlushprocesswr[]
aFlushprocesswr db 'FlushProcessWriteBuffers',0
align 4
; const CHAR aFreelibrarywhe[]
aFreelibrarywhe db 'FreeLibraryWhenCallbackReturns',0
align 4
; const CHAR aGetcurrentproc[]
aGetcurrentproc db 'GetCurrentProcessorNumber',0
align 4
; const CHAR aGetlogicalproc[]
aGetlogicalproc db 'GetLogicalProcessorInformation',0
align 4
; const CHAR aCreatesymbolic[]
aCreatesymbolic db 'CreateSymbolicLinkW',0
; const CHAR aSetdefaultdlld[]
aSetdefaultdlld db 'SetDefaultDllDirectories',0
align 4
; const CHAR aEnumsystemloca[]
aEnumsystemloca db 'EnumSystemLocalesEx',0
; const CHAR aComparestringe[]
aComparestringe db 'CompareStringEx',0
; const CHAR aGetdateformate[]
aGetdateformate db 'GetDateFormatEx',0
; const CHAR aGetlocaleinfoe[]
aGetlocaleinfoe db 'GetLocaleInfoEx',0
; const CHAR aGettimeformate[]
aGettimeformate db 'GetTimeFormatEx',0
; const CHAR aGetuserdefault[]
aGetuserdefault db 'GetUserDefaultLocaleName',0
align 4
; const CHAR aIsvalidlocalen[]
aIsvalidlocalen db 'IsValidLocaleName',0
align 4
; const CHAR aLcmapstringex[]
aLcmapstringex db 'LCMapStringEx',0
align 4
; const CHAR aGetcurrentpack[]
aGetcurrentpack db 'GetCurrentPackageId',0
off_8942FC dd offset ___DestructExceptionObject
dd offset unk_897EF8
off_894304 dd offset sub_88AEED
dd offset ?what@exception@@UBEPBDXZ ; exception::what(void)
aBadException db 'bad exception',0
align 10h
dd offset aBased        ; "__based("
dd offset aCdecl        ; "__cdecl"
dd offset aPascal       ; "__pascal"
dd offset aStdcall      ; "__stdcall"
dd offset aThiscall     ; "__thiscall"
dd offset aFastcall     ; "__fastcall"
dd offset aClrcall      ; "__clrcall"
dd offset aEabi         ; "__eabi"
dd offset aPtr64        ; "__ptr64"
dd offset aRestrict     ; "__restrict"
dd offset aUnaligned    ; "__unaligned"
dd offset aRestrict_0   ; "restrict("
dd offset unk_89452A
dd offset aTypeDescriptor ; " Type Descriptor'"
dd offset aBaseClassDescr ; " Base Class Descriptor at ("
dd offset aBaseClassArray ; " Base Class Array'"
dd offset aClassHierarchy ; " Class Hierarchy Descriptor'"
dd offset aCompleteObject ; " Complete Object Locator'"
dd offset aNew          ; " new"
dd offset aDelete       ; " delete"
dd offset asc_89453C    ; "="
dd offset asc_894540    ; ">>"
dd offset asc_894544    ; "<<"
dd offset asc_894548    ; "!"
dd offset asc_89454C    ; "=="
dd offset asc_894550    ; "!="
dd offset asc_894554    ; "[]"
dd offset aOperator     ; "operator"
dd offset asc_894564    ; "->"
dd offset asc_894568    ; "*"
dd offset asc_89456C    ; "++"
dd offset asc_894570    ; "--"
dd offset asc_894574    ; "-"
dd offset asc_894578    ; "+"
dd offset asc_89457C    ; "&"
dd offset asc_894580    ; "->*"
dd offset asc_894584    ; "/"
dd offset asc_894588    ; "%"
dd offset asc_89458C    ; "<"
dd offset asc_894590    ; "<="
dd offset asc_894594    ; ">"
dd offset asc_894598    ; ">="
dd offset asc_89459C    ; ","
dd offset asc_8945A0    ; "()"
dd offset asc_8945A4    ; "~"
dd offset asc_8945A8    ; "^"
dd offset asc_8945AC    ; "|"
dd offset asc_8945B0    ; "&&"
dd offset asc_8945B4    ; "||"
dd offset asc_8945B8    ; "*="
dd offset asc_8945BC    ; "+="
dd offset asc_8945C0    ; "-="
dd offset asc_8945C4    ; "/="
dd offset asc_8945C8    ; "%="
dd offset asc_8945CC    ; ">>="
dd offset asc_8945D0    ; "<<="
dd offset asc_8945D4    ; "&="
dd offset asc_8945D8    ; "|="
dd offset asc_8945DC    ; "^="
dd offset aVftable      ; "`vftable'"
dd offset aVbtable      ; "`vbtable'"
dd offset aVcall        ; "`vcall'"
dd offset aTypeof       ; "`typeof'"
dd offset aLocalStaticGua ; "`local static guard'"
dd offset aString       ; "`string'"
dd offset aVbaseDestructo ; "`vbase destructor'"
dd offset aVectorDeleting ; "`vector deleting destructor'"
dd offset aDefaultConstru ; "`default constructor closure'"
dd offset aScalarDeleting ; "`scalar deleting destructor'"
dd offset aVectorConstruc ; "`vector constructor iterator'"
dd offset aVectorDestruct ; "`vector destructor iterator'"
dd offset aVectorVbaseCon ; "`vector vbase constructor iterator'"
dd offset aVirtualDisplac ; "`virtual displacement map'"
dd offset aEhVectorConstr ; "`eh vector constructor iterator'"
dd offset aEhVectorDestru ; "`eh vector destructor iterator'"
dd offset aEhVectorVbaseC ; "`eh vector vbase constructor iterator'"
dd offset aCopyConstructo ; "`copy constructor closure'"
dd offset aUdtReturning ; "`udt returning'"
dd offset aEh           ; "`EH"
dd offset aRtti         ; "`RTTI"
dd offset aLocalVftable ; "`local vftable'"
dd offset aLocalVftableCo ; "`local vftable constructor closure'"
dd offset aNew_0        ; " new[]"
dd offset aDelete_0     ; " delete[]"
dd offset aOmniCallsig  ; "`omni callsig'"
dd offset aPlacementDelet ; "`placement delete closure'"
dd offset aPlacementDelet_0 ; "`placement delete[] closure'"
dd offset aManagedVectorC ; "`managed vector constructor iterator'"
dd offset aManagedVectorD ; "`managed vector destructor iterator'"
dd offset aEhVectorCopyCo ; "`eh vector copy constructor iterator'"
dd offset aEhVectorVbaseC_0 ; "`eh vector vbase copy constructor itera"...
dd offset aDynamicInitial ; "`dynamic initializer for '"
dd offset aDynamicAtexitD ; "`dynamic atexit destructor for '"
dd offset aVectorCopyCons ; "`vector copy constructor iterator'"
dd offset aVectorVbaseCop ; "`vector vbase copy constructor iterator"...
dd offset aManagedVectorC_0 ; "`managed vector copy constructor iterat"...
dd offset aLocalStaticThr ; "`local static thread guard'"
dd offset unk_89452A
aBased db '__based(',0
align 4
aCdecl db '__cdecl',0
aPascal db '__pascal',0
align 4
aStdcall db '__stdcall',0
align 4
aThiscall db '__thiscall',0
align 10h
aFastcall db '__fastcall',0
align 4
aClrcall db '__clrcall',0
align 4
aEabi db '__eabi',0
align 10h
aPtr64 db '__ptr64',0
aRestrict db '__restrict',0
align 4
aUnaligned db '__unaligned',0
aRestrict_0 db 'restrict(',0
unk_89452A db    0
db    0
aNew db ' new',0
align 4
aDelete db ' delete',0
asc_89453C db '=',0
align 10h
asc_894540 db '>>',0
align 4
asc_894544 db '<<',0
align 4
asc_894548 db '!',0
align 4
asc_89454C db '==',0
align 10h
asc_894550 db '!=',0
align 4
asc_894554 db '[]',0
align 4
aOperator db 'operator',0
align 4
asc_894564 db '->',0
align 4
asc_894568 db '*',0
align 4
asc_89456C db '++',0
align 10h
asc_894570 db '--',0
align 4
asc_894574 db '-',0
align 4
asc_894578 db '+',0
align 4
asc_89457C db '&',0
align 10h
asc_894580 db '->*',0
asc_894584 db '/',0
align 4
asc_894588 db '%',0
align 4
asc_89458C db '<',0
align 10h
asc_894590 db '<=',0
align 4
asc_894594 db '>',0
align 4
asc_894598 db '>=',0
align 4
asc_89459C db ',',0
align 10h
asc_8945A0 db '()',0
align 4
asc_8945A4 db '~',0
align 4
asc_8945A8 db '^',0
align 4
asc_8945AC db '|',0
align 10h
asc_8945B0 db '&&',0
align 4
asc_8945B4 db '||',0
align 4
asc_8945B8 db '*=',0
align 4
asc_8945BC db '+=',0
align 10h
asc_8945C0 db '-=',0
align 4
asc_8945C4 db '/=',0
align 4
asc_8945C8 db '%=',0
align 4
asc_8945CC db '>>=',0
asc_8945D0 db '<<=',0
asc_8945D4 db '&=',0
align 4
asc_8945D8 db '|=',0
align 4
asc_8945DC db '^=',0
align 10h
aVftable db '`vftable',27h,0
align 4
aVbtable db '`vbtable',27h,0
align 4
aVcall db '`vcall',27h,0
aTypeof db '`typeof',27h,0
align 4
aLocalStaticGua db '`local static guard',27h,0
align 4
aString db '`string',27h,0
align 10h
aVbaseDestructo db '`vbase destructor',27h,0
align 4
aVectorDeleting db '`vector deleting destructor',27h,0
align 4
aDefaultConstru db '`default constructor closure',27h,0
align 4
aScalarDeleting db '`scalar deleting destructor',27h,0
align 4
aVectorConstruc db '`vector constructor iterator',27h,0
align 4
aVectorDestruct db '`vector destructor iterator',27h,0
align 4
aVectorVbaseCon db '`vector vbase constructor iterator',27h
db 0
aVirtualDisplac db '`virtual displacement map',27h,0
align 4
aEhVectorConstr db '`eh vector constructor iterator',27h
db 0
align 4
aEhVectorDestru db '`eh vector destructor iterator',27h
db 0
aEhVectorVbaseC db '`eh vector vbase constructor iterat'
db 'or',27h,0
align 10h
aCopyConstructo db '`copy constructor closure',27h,0
align 4
aUdtReturning db '`udt returning',27h,0
aEh db '`EH',0
aRtti db '`RTTI',0
align 4
aLocalVftable db '`local vftable',27h,0
aLocalVftableCo db '`local vftable constructor closure',27h
db 0
aNew_0 db ' new[]',0
align 4
aDelete_0 db ' delete[]',0
align 10h
aOmniCallsig db '`omni callsig',27h,0
align 10h
aPlacementDelet db '`placement delete closure',27h,0
align 4
aPlacementDelet_0 db '`placement delete[] closure',27h,0
align 4
aManagedVectorC db '`managed vector constructor iterato'
db 'r',27h,0
align 4
aManagedVectorD db '`managed vector destructor iterator'
db 27h,0
align 4
aEhVectorCopyCo db '`eh vector copy constructor iterato'
db 'r',27h,0
align 4
aEhVectorVbaseC_0 db '`eh vector vbase copy constructor i'
db 'terator',27h,0
aDynamicInitial db '`dynamic initializer for ',27h,0
align 4
aDynamicAtexitD db '`dynamic atexit destructor for ',27h
db 0
align 10h
aVectorCopyCons db '`vector copy constructor iterator',27h
db 0
align 4
aVectorVbaseCop db '`vector vbase copy constructor iter'
db 'ator',27h,0
align 10h
aManagedVectorC_0 db '`managed vector copy constructor it'
db 'erator',27h,0
align 4
aLocalStaticThr db '`local static thread guard',27h,0
aTypeDescriptor db ' Type Descriptor',27h,0
align 4
aBaseClassDescr db ' Base Class Descriptor at (',0
aBaseClassArray db ' Base Class Array',27h,0
align 4
aClassHierarchy db ' Class Hierarchy Descriptor',27h,0
align 4
aCompleteObject db ' Complete Object Locator',27h,0
align 4
; const WCHAR LibFileName
LibFileName:
text "UTF-16LE", 'USER32.DLL',0
align 10h
; const CHAR aMessageboxw[]
aMessageboxw db 'MessageBoxW',0
; const CHAR aGetactivewindo[]
aGetactivewindo db 'GetActiveWindow',0
; const CHAR aGetlastactivep[]
aGetlastactivep db 'GetLastActivePopup',0
align 10h
; const CHAR aGetuserobjecti[]
aGetuserobjecti db 'GetUserObjectInformationW',0
align 4
; const CHAR aGetprocesswind[]
aGetprocesswind db 'GetProcessWindowStation',0
align 8
dword_894AD8 dd 1
dd offset aAr           ; "ar"
db    2
db    0
db    0
db    0
dd offset aBg           ; "bg"
db    3
db    0
db    0
db    0
dd offset aCa           ; "ca"
db    4
db    0
db    0
db    0
dd offset aZhChs        ; "zh-CHS"
db    5
db    0
db    0
db    0
dd offset aCs           ; "cs"
db    6
db    0
db    0
db    0
dd offset aDa           ; "da"
db    7
db    0
db    0
db    0
dd offset aDe           ; "de"
db    8
db    0
db    0
db    0
dd offset aEl           ; "el"
db    9
db    0
db    0
db    0
dd offset aEn           ; "en"
db  0Ah
db    0
db    0
db    0
dd offset aEs           ; "es"
db  0Bh
db    0
db    0
db    0
dd offset aFi           ; "fi"
db  0Ch
db    0
db    0
db    0
dd offset aFr           ; "fr"
db  0Dh
db    0
db    0
db    0
dd offset aHe           ; "he"
db  0Eh
db    0
db    0
db    0
dd offset aHu           ; "hu"
db  0Fh
db    0
db    0
db    0
dd offset aIs           ; "is"
db  10h
db    0
db    0
db    0
dd offset aIt           ; "it"
db  11h
db    0
db    0
db    0
dd offset aJa           ; "ja"
db  12h
db    0
db    0
db    0
dd offset aKo           ; "ko"
db  13h
db    0
db    0
db    0
dd offset aNl           ; "nl"
db  14h
db    0
db    0
db    0
dd offset aNo           ; "no"
db  15h
db    0
db    0
db    0
dd offset aPl           ; "pl"
db  16h
db    0
db    0
db    0
dd offset aPt           ; "pt"
db  18h
db    0
db    0
db    0
dd offset aRo           ; "ro"
db  19h
db    0
db    0
db    0
dd offset aRu           ; "ru"
db  1Ah
db    0
db    0
db    0
dd offset aHr           ; "hr"
db  1Bh
db    0
db    0
db    0
dd offset aSk           ; "sk"
db  1Ch
db    0
db    0
db    0
dd offset aSq           ; "sq"
db  1Dh
db    0
db    0
db    0
dd offset aSv           ; "sv"
db  1Eh
db    0
db    0
db    0
dd offset aTh           ; "th"
db  1Fh
db    0
db    0
db    0
dd offset aTr           ; "tr"
db  20h
db    0
db    0
db    0
dd offset aUr           ; "ur"
db  21h ; !
db    0
db    0
db    0
dd offset aId           ; "id"
db  22h ; "
db    0
db    0
db    0
dd offset aUk           ; "uk"
db  23h ; #
db    0
db    0
db    0
dd offset aBe           ; "be"
db  24h ; $
db    0
db    0
db    0
dd offset aSl           ; "sl"
db  25h ; %
db    0
db    0
db    0
dd offset aEt           ; "et"
db  26h ; &
db    0
db    0
db    0
dd offset aLv           ; "lv"
db  27h ; '
db    0
db    0
db    0
dd offset aLt           ; "lt"
db  29h ; )
db    0
db    0
db    0
dd offset aFa           ; "fa"
db  2Ah ; *
db    0
db    0
db    0
dd offset aVi           ; "vi"
db  2Bh ; +
db    0
db    0
db    0
dd offset aHy           ; "hy"
db  2Ch ; ,
db    0
db    0
db    0
dd offset aAz           ; "az"
db  2Dh ; -
db    0
db    0
db    0
dd offset aEu           ; "eu"
db  2Fh ; /
db    0
db    0
db    0
dd offset aMk           ; "mk"
db  36h ; 6
db    0
db    0
db    0
dd offset aAf           ; "af"
db  37h ; 7
db    0
db    0
db    0
dd offset aKa           ; "ka"
db  38h ; 8
db    0
db    0
db    0
dd offset aFo           ; "fo"
db  39h ; 9
db    0
db    0
db    0
dd offset aHi           ; "hi"
db  3Eh ; >
db    0
db    0
db    0
dd offset aMs           ; "ms"
db  3Fh ; ?
db    0
db    0
db    0
dd offset aKk           ; "kk"
db  40h ; @
db    0
db    0
db    0
dd offset aKy           ; "ky"
db  41h ; A
db    0
db    0
db    0
dd offset aSw           ; "sw"
db  43h ; C
db    0
db    0
db    0
dd offset aUz           ; "uz"
db  44h ; D
db    0
db    0
db    0
dd offset aTt           ; "tt"
db  46h ; F
db    0
db    0
db    0
dd offset aPa           ; "pa"
db  47h ; G
db    0
db    0
db    0
dd offset aGu           ; "gu"
db  49h ; I
db    0
db    0
db    0
dd offset aTa           ; "ta"
db  4Ah ; J
db    0
db    0
db    0
dd offset aTe           ; "te"
db  4Bh ; K
db    0
db    0
db    0
dd offset aKn           ; "kn"
db  4Eh ; N
db    0
db    0
db    0
dd offset aMr           ; "mr"
db  4Fh ; O
db    0
db    0
db    0
dd offset aSa           ; "sa"
db  50h ; P
db    0
db    0
db    0
dd offset aMn           ; "mn"
db  56h ; V
db    0
db    0
db    0
dd offset aGl           ; "gl"
db  57h ; W
db    0
db    0
db    0
dd offset aKok          ; "kok"
db  5Ah ; Z
db    0
db    0
db    0
dd offset aSyr          ; "syr"
db  65h ; e
db    0
db    0
db    0
dd offset aDiv          ; "div"
db  7Fh ; 
db    0
db    0
db    0
dd offset unk_8974A4
db    1
db    4
db    0
db    0
dd offset aArSa         ; "ar-SA"
db    2
db    4
db    0
db    0
dd offset aBgBg         ; "bg-BG"
db    3
db    4
db    0
db    0
dd offset aCaEs         ; "ca-ES"
db    4
db    4
db    0
db    0
dd offset aZhTw         ; "zh-TW"
db    5
db    4
db    0
db    0
dd offset aCsCz         ; "cs-CZ"
db    6
db    4
db    0
db    0
dd offset aDaDk         ; "da-DK"
db    7
db    4
db    0
db    0
dd offset aDeDe         ; "de-DE"
db    8
db    4
db    0
db    0
dd offset aElGr         ; "el-GR"
db    9
db    4
db    0
db    0
dd offset aEnUs         ; "en-US"
db  0Bh
db    4
db    0
db    0
dd offset aFiFi         ; "fi-FI"
db  0Ch
db    4
db    0
db    0
dd offset aFrFr         ; "fr-FR"
db  0Dh
db    4
db    0
db    0
dd offset aHeIl         ; "he-IL"
db  0Eh
db    4
db    0
db    0
dd offset aHuHu         ; "hu-HU"
db  0Fh
db    4
db    0
db    0
dd offset aIsIs         ; "is-IS"
db  10h
db    4
db    0
db    0
dd offset aItIt         ; "it-IT"
db  11h
db    4
db    0
db    0
dd offset aJaJp         ; "ja-JP"
db  12h
db    4
db    0
db    0
dd offset aKoKr         ; "ko-KR"
db  13h
db    4
db    0
db    0
dd offset aNlNl         ; "nl-NL"
db  14h
db    4
db    0
db    0
dd offset aNbNo         ; "nb-NO"
db  15h
db    4
db    0
db    0
dd offset aPlPl         ; "pl-PL"
db  16h
db    4
db    0
db    0
dd offset aPtBr         ; "pt-BR"
db  18h
db    4
db    0
db    0
dd offset aRoRo         ; "ro-RO"
db  19h
db    4
db    0
db    0
dd offset aRuRu         ; "ru-RU"
db  1Ah
db    4
db    0
db    0
dd offset aHrHr         ; "hr-HR"
db  1Bh
db    4
db    0
db    0
dd offset aSkSk         ; "sk-SK"
db  1Ch
db    4
db    0
db    0
dd offset aSqAl         ; "sq-AL"
db  1Dh
db    4
db    0
db    0
dd offset aSvSe         ; "sv-SE"
db  1Eh
db    4
db    0
db    0
dd offset aThTh         ; "th-TH"
db  1Fh
db    4
db    0
db    0
dd offset aTrTr         ; "tr-TR"
db  20h
db    4
db    0
db    0
dd offset aUrPk         ; "ur-PK"
db  21h ; !
db    4
db    0
db    0
dd offset String2       ; "id-ID"
db  22h ; "
db    4
db    0
db    0
dd offset aUkUa         ; "uk-UA"
db  23h ; #
db    4
db    0
db    0
dd offset aBeBy         ; "be-BY"
db  24h ; $
db    4
db    0
db    0
dd offset aSlSi         ; "sl-SI"
db  25h ; %
db    4
db    0
db    0
dd offset aEtEe         ; "et-EE"
db  26h ; &
db    4
db    0
db    0
dd offset aLvLv         ; "lv-LV"
db  27h ; '
db    4
db    0
db    0
dd offset aLtLt         ; "lt-LT"
db  29h ; )
db    4
db    0
db    0
dd offset aFaIr         ; "fa-IR"
db  2Ah ; *
db    4
db    0
db    0
dd offset aViVn         ; "vi-VN"
db  2Bh ; +
db    4
db    0
db    0
dd offset aHyAm         ; "hy-AM"
db  2Ch ; ,
db    4
db    0
db    0
dd offset aAzAzLatn     ; "az-AZ-Latn"
db  2Dh ; -
db    4
db    0
db    0
dd offset aEuEs         ; "eu-ES"
db  2Fh ; /
db    4
db    0
db    0
dd offset aMkMk         ; "mk-MK"
db  32h ; 2
db    4
db    0
db    0
dd offset aTnZa         ; "tn-ZA"
db  34h ; 4
db    4
db    0
db    0
dd offset aXhZa         ; "xh-ZA"
db  35h ; 5
db    4
db    0
db    0
dd offset aZuZa         ; "zu-ZA"
db  36h ; 6
db    4
db    0
db    0
dd offset aAfZa         ; "af-ZA"
db  37h ; 7
db    4
db    0
db    0
dd offset aKaGe         ; "ka-GE"
db  38h ; 8
db    4
db    0
db    0
dd offset aFoFo         ; "fo-FO"
db  39h ; 9
db    4
db    0
db    0
dd offset aHiIn         ; "hi-IN"
db  3Ah ; :
db    4
db    0
db    0
dd offset aMtMt         ; "mt-MT"
db  3Bh ; ;
db    4
db    0
db    0
dd offset aSeNo         ; "se-NO"
db  3Eh ; >
db    4
db    0
db    0
dd offset aMsMy         ; "ms-MY"
db  3Fh ; ?
db    4
db    0
db    0
dd offset aKkKz         ; "kk-KZ"
db  40h ; @
db    4
db    0
db    0
dd offset aKyKg         ; "ky-KG"
db  41h ; A
db    4
db    0
db    0
dd offset aSwKe         ; "sw-KE"
db  43h ; C
db    4
db    0
db    0
dd offset aUzUzLatn     ; "uz-UZ-Latn"
db  44h ; D
db    4
db    0
db    0
dd offset aTtRu         ; "tt-RU"
db  45h ; E
db    4
db    0
db    0
dd offset aBnIn         ; "bn-IN"
db  46h ; F
db    4
db    0
db    0
dd offset aPaIn         ; "pa-IN"
db  47h ; G
db    4
db    0
db    0
dd offset aGuIn         ; "gu-IN"
db  49h ; I
db    4
db    0
db    0
dd offset aTaIn         ; "ta-IN"
db  4Ah ; J
db    4
db    0
db    0
dd offset aTeIn         ; "te-IN"
db  4Bh ; K
db    4
db    0
db    0
dd offset aKnIn         ; "kn-IN"
db  4Ch ; L
db    4
db    0
db    0
dd offset aMlIn         ; "ml-IN"
db  4Eh ; N
db    4
db    0
db    0
dd offset aMrIn         ; "mr-IN"
db  4Fh ; O
db    4
db    0
db    0
dd offset aSaIn         ; "sa-IN"
db  50h ; P
db    4
db    0
db    0
dd offset aMnMn         ; "mn-MN"
db  52h ; R
db    4
db    0
db    0
dd offset aCyGb         ; "cy-GB"
db  56h ; V
db    4
db    0
db    0
dd offset aGlEs         ; "gl-ES"
db  57h ; W
db    4
db    0
db    0
dd offset aKokIn        ; "kok-IN"
db  5Ah ; Z
db    4
db    0
db    0
dd offset aSyrSy        ; "syr-SY"
db  65h ; e
db    4
db    0
db    0
dd offset aDivMv        ; "div-MV"
db  6Bh ; k
db    4
db    0
db    0
dd offset aQuzBo        ; "quz-BO"
db  6Ch ; l
db    4
db    0
db    0
dd offset aNsZa         ; "ns-ZA"
db  81h
db    4
db    0
db    0
dd offset aMiNz         ; "mi-NZ"
db    1
db    8
db    0
db    0
dd offset aArIq         ; "ar-IQ"
db    4
db    8
db    0
db    0
dd offset aZhCn         ; "zh-CN"
db    7
db    8
db    0
db    0
dd offset aDeCh         ; "de-CH"
db    9
db    8
db    0
db    0
dd offset aEnGb         ; "en-GB"
db  0Ah
db    8
db    0
db    0
dd offset aEsMx         ; "es-MX"
db  0Ch
db    8
db    0
db    0
dd offset aFrBe         ; "fr-BE"
db  10h
db    8
db    0
db    0
dd offset aItCh         ; "it-CH"
db  13h
db    8
db    0
db    0
dd offset aNlBe         ; "nl-BE"
db  14h
db    8
db    0
db    0
dd offset aNnNo         ; "nn-NO"
db  16h
db    8
db    0
db    0
dd offset aPtPt         ; "pt-PT"
db  1Ah
db    8
db    0
db    0
dd offset aSrSpLatn     ; "sr-SP-Latn"
db  1Dh
db    8
db    0
db    0
dd offset aSvFi         ; "sv-FI"
db  2Ch ; ,
db    8
db    0
db    0
dd offset aAzAzCyrl     ; "az-AZ-Cyrl"
db  3Bh ; ;
db    8
db    0
db    0
dd offset aSeSe         ; "se-SE"
db  3Eh ; >
db    8
db    0
db    0
dd offset aMsBn         ; "ms-BN"
db  43h ; C
db    8
db    0
db    0
dd offset aUzUzCyrl     ; "uz-UZ-Cyrl"
db  6Bh ; k
db    8
db    0
db    0
dd offset aQuzEc        ; "quz-EC"
db    1
db  0Ch
db    0
db    0
dd offset aArEg         ; "ar-EG"
db    4
db  0Ch
db    0
db    0
dd offset aZhHk         ; "zh-HK"
db    7
db  0Ch
db    0
db    0
dd offset aDeAt         ; "de-AT"
db    9
db  0Ch
db    0
db    0
dd offset aEnAu         ; "en-AU"
db  0Ah
db  0Ch
db    0
db    0
dd offset aEsEs         ; "es-ES"
db  0Ch
db  0Ch
db    0
db    0
dd offset aFrCa         ; "fr-CA"
db  1Ah
db  0Ch
db    0
db    0
dd offset aSrSpCyrl     ; "sr-SP-Cyrl"
db  3Bh ; ;
db  0Ch
db    0
db    0
dd offset aSeFi         ; "se-FI"
db  6Bh ; k
db  0Ch
db    0
db    0
dd offset aQuzPe        ; "quz-PE"
db    1
db  10h
db    0
db    0
dd offset aArLy         ; "ar-LY"
db    4
db  10h
db    0
db    0
dd offset aZhSg         ; "zh-SG"
db    7
db  10h
db    0
db    0
dd offset aDeLu         ; "de-LU"
db    9
db  10h
db    0
db    0
dd offset aEnCa         ; "en-CA"
db  0Ah
db  10h
db    0
db    0
dd offset aEsGt         ; "es-GT"
db  0Ch
db  10h
db    0
db    0
dd offset aFrCh         ; "fr-CH"
db  1Ah
db  10h
db    0
db    0
dd offset aHrBa         ; "hr-BA"
db  3Bh ; ;
db  10h
db    0
db    0
dd offset aSmjNo        ; "smj-NO"
db    1
db  14h
db    0
db    0
dd offset aArDz         ; "ar-DZ"
db    4
db  14h
db    0
db    0
dd offset aZhMo         ; "zh-MO"
db    7
db  14h
db    0
db    0
dd offset aDeLi         ; "de-LI"
db    9
db  14h
db    0
db    0
dd offset aEnNz         ; "en-NZ"
db  0Ah
db  14h
db    0
db    0
dd offset aEsCr         ; "es-CR"
db  0Ch
db  14h
db    0
db    0
dd offset aFrLu         ; "fr-LU"
db  1Ah
db  14h
db    0
db    0
dd offset aBsBaLatn     ; "bs-BA-Latn"
db  3Bh ; ;
db  14h
db    0
db    0
dd offset aSmjSe        ; "smj-SE"
db    1
db  18h
db    0
db    0
dd offset aArMa         ; "ar-MA"
db    9
db  18h
db    0
db    0
dd offset aEnIe         ; "en-IE"
db  0Ah
db  18h
db    0
db    0
dd offset aEsPa         ; "es-PA"
db  0Ch
db  18h
db    0
db    0
dd offset aFrMc         ; "fr-MC"
db  1Ah
db  18h
db    0
db    0
dd offset aSrBaLatn     ; "sr-BA-Latn"
db  3Bh ; ;
db  18h
db    0
db    0
dd offset aSmaNo        ; "sma-NO"
db    1
db  1Ch
db    0
db    0
dd offset aArTn         ; "ar-TN"
db    9
db  1Ch
db    0
db    0
dd offset aEnZa         ; "en-ZA"
db  0Ah
db  1Ch
db    0
db    0
dd offset aEsDo         ; "es-DO"
db  1Ah
db  1Ch
db    0
db    0
dd offset aSrBaCyrl     ; "sr-BA-Cyrl"
db  3Bh ; ;
db  1Ch
db    0
db    0
dd offset aSmaSe        ; "sma-SE"
db    1
db  20h
db    0
db    0
dd offset aArOm         ; "ar-OM"
db    9
db  20h
db    0
db    0
dd offset aEnJm         ; "en-JM"
db  0Ah
db  20h
db    0
db    0
dd offset aEsVe         ; "es-VE"
db  3Bh ; ;
db  20h
db    0
db    0
dd offset aSmsFi        ; "sms-FI"
db    1
db  24h ; $
db    0
db    0
dd offset aArYe         ; "ar-YE"
db    9
db  24h ; $
db    0
db    0
dd offset aEnCb         ; "en-CB"
db  0Ah
db  24h ; $
db    0
db    0
dd offset aEsCo         ; "es-CO"
db  3Bh ; ;
db  24h ; $
db    0
db    0
dd offset aSmnFi        ; "smn-FI"
db    1
db  28h ; (
db    0
db    0
dd offset aArSy         ; "ar-SY"
db    9
db  28h ; (
db    0
db    0
dd offset aEnBz         ; "en-BZ"
db  0Ah
db  28h ; (
db    0
db    0
dd offset aEsPe         ; "es-PE"
db    1
db  2Ch ; ,
db    0
db    0
dd offset aArJo         ; "ar-JO"
db    9
db  2Ch ; ,
db    0
db    0
dd offset aEnTt         ; "en-TT"
db  0Ah
db  2Ch ; ,
db    0
db    0
dd offset aEsAr         ; "es-AR"
db    1
db  30h ; 0
db    0
db    0
dd offset aArLb         ; "ar-LB"
db    9
db  30h ; 0
db    0
db    0
dd offset aEnZw         ; "en-ZW"
db  0Ah
db  30h ; 0
db    0
db    0
dd offset aEsEc         ; "es-EC"
db    1
db  34h ; 4
db    0
db    0
dd offset aArKw         ; "ar-KW"
db    9
db  34h ; 4
db    0
db    0
dd offset aEnPh         ; "en-PH"
db  0Ah
db  34h ; 4
db    0
db    0
dd offset aEsCl         ; "es-CL"
db    1
db  38h ; 8
db    0
db    0
dd offset aArAe         ; "ar-AE"
db  0Ah
db  38h ; 8
db    0
db    0
dd offset aEsUy         ; "es-UY"
db    1
db  3Ch ; <
db    0
db    0
dd offset aArBh         ; "ar-BH"
db  0Ah
db  3Ch ; <
db    0
db    0
dd offset aEsPy         ; "es-PY"
db    1
db  40h ; @
db    0
db    0
dd offset aArQa         ; "ar-QA"
db  0Ah
db  40h ; @
db    0
db    0
dd offset aEsBo         ; "es-BO"
db  0Ah
db  44h ; D
db    0
db    0
dd offset aEsSv         ; "es-SV"
db  0Ah
db  48h ; H
db    0
db    0
dd offset aEsHn         ; "es-HN"
db  0Ah
db  4Ch ; L
db    0
db    0
dd offset aEsNi         ; "es-NI"
db  0Ah
db  50h ; P
db    0
db    0
dd offset aEsPr         ; "es-PR"
db    4
db  7Ch ; |
db    0
db    0
dd offset aZhCht        ; "zh-CHT"
db  1Ah
db  7Ch ; |
db    0
db    0
dd offset aSr           ; "sr"
off_8951F8 dd offset unk_8974A4
dword_8951FC dd 42h
dd offset aAf           ; "af"
db  2Ch ; ,
db    0
db    0
db    0
dd offset aAfZa_0       ; "af-za"
db  71h ; q
db    0
db    0
db    0
dd offset aAr           ; "ar"
align 8
dd offset aArAe_0       ; "ar-ae"
db 0D8h
db    0
db    0
db    0
dd offset aArBh_0       ; "ar-bh"
db 0DAh
db    0
db    0
db    0
dd offset aArDz_0       ; "ar-dz"
db 0B1h
db    0
db    0
db    0
dd offset aArEg_0       ; "ar-eg"
db 0A0h
db    0
db    0
db    0
dd offset aArIq_0       ; "ar-iq"
db  8Fh
db    0
db    0
db    0
dd offset aArJo_0       ; "ar-jo"
db 0CFh
db    0
db    0
db    0
dd offset aArKw_0       ; "ar-kw"
db 0D5h
db    0
db    0
db    0
dd offset aArLb_0       ; "ar-lb"
db 0D2h
db    0
db    0
db    0
dd offset aArLy_0       ; "ar-ly"
db 0A9h
db    0
db    0
db    0
dd offset aArMa_0       ; "ar-ma"
db 0B9h
db    0
db    0
db    0
dd offset aArOm_0       ; "ar-om"
db 0C4h
db    0
db    0
db    0
dd offset aArQa_0       ; "ar-qa"
db 0DCh
db    0
db    0
db    0
dd offset aArSa_0       ; "ar-sa"
db  43h ; C
db    0
db    0
db    0
dd offset aArSy_0       ; "ar-sy"
db 0CCh
db    0
db    0
db    0
dd offset aArTn_0       ; "ar-tn"
db 0BFh
db    0
db    0
db    0
dd offset aArYe_0       ; "ar-ye"
db 0C8h
db    0
db    0
db    0
dd offset aAz           ; "az"
db  29h ; )
db    0
db    0
db    0
dd offset aAzAzCyrl_0   ; "az-az-cyrl"
db  9Bh
db    0
db    0
db    0
dd offset aAzAzLatn_0   ; "az-az-latn"
db  6Bh ; k
db    0
db    0
db    0
dd offset aBe           ; "be"
db  21h ; !
db    0
db    0
db    0
dd offset aBeBy_0       ; "be-by"
db  63h ; c
db    0
db    0
db    0
dd offset aBg           ; "bg"
db    1
db    0
db    0
db    0
dd offset aBgBg_0       ; "bg-bg"
db  44h ; D
db    0
db    0
db    0
dd offset aBnIn_0       ; "bn-in"
db  7Dh ; }
db    0
db    0
db    0
dd offset aBsBaLatn_0   ; "bs-ba-latn"
db 0B7h
db    0
db    0
db    0
dd offset aCa           ; "ca"
db    2
db    0
db    0
db    0
dd offset aCaEs_0       ; "ca-es"
db  45h ; E
db    0
db    0
db    0
dd offset aCs           ; "cs"
db    4
db    0
db    0
db    0
dd offset aCsCz_0       ; "cs-cz"
db  47h ; G
db    0
db    0
db    0
dd offset aCyGb_0       ; "cy-gb"
db  87h
db    0
db    0
db    0
dd offset aDa           ; "da"
db    5
db    0
db    0
db    0
dd offset aDaDk_0       ; "da-dk"
db  48h ; H
db    0
db    0
db    0
dd offset aDe           ; "de"
db    6
db    0
db    0
db    0
dd offset aDeAt_0       ; "de-at"
db 0A2h
db    0
db    0
db    0
dd offset aDeCh_0       ; "de-ch"
db  91h
db    0
db    0
db    0
dd offset aDeDe_0       ; "de-de"
db  49h ; I
db    0
db    0
db    0
dd offset aDeLi_0       ; "de-li"
db 0B3h
db    0
db    0
db    0
dd offset aDeLu_0       ; "de-lu"
db 0ABh
db    0
db    0
db    0
dd offset aDiv          ; "div"
db  41h ; A
db    0
db    0
db    0
dd offset aDivMv_0      ; "div-mv"
db  8Bh
db    0
db    0
db    0
dd offset aEl           ; "el"
db    7
db    0
db    0
db    0
dd offset aElGr_0       ; "el-gr"
db  4Ah ; J
db    0
db    0
db    0
dd offset aEn           ; "en"
db    8
db    0
db    0
db    0
dd offset aEnAu_0       ; "en-au"
db 0A3h
db    0
db    0
db    0
dd offset aEnBz_0       ; "en-bz"
db 0CDh
db    0
db    0
db    0
dd offset aEnCa_0       ; "en-ca"
db 0ACh
db    0
db    0
db    0
dd offset aEnCb_0       ; "en-cb"
db 0C9h
db    0
db    0
db    0
dd offset aEnGb_0       ; "en-gb"
db  92h
db    0
db    0
db    0
dd offset aEnIe_0       ; "en-ie"
db 0BAh
db    0
db    0
db    0
dd offset aEnJm_0       ; "en-jm"
db 0C5h
db    0
db    0
db    0
dd offset aEnNz_0       ; "en-nz"
db 0B4h
db    0
db    0
db    0
dd offset aEnPh_0       ; "en-ph"
db 0D6h
db    0
db    0
db    0
dd offset aEnTt_0       ; "en-tt"
db 0D0h
db    0
db    0
db    0
dd offset aEnUs_0       ; "en-us"
db  4Bh ; K
db    0
db    0
db    0
dd offset aEnZa_0       ; "en-za"
db 0C0h
db    0
db    0
db    0
dd offset aEnZw_0       ; "en-zw"
db 0D3h
db    0
db    0
db    0
dd offset aEs           ; "es"
db    9
db    0
db    0
db    0
dd offset aEsAr_0       ; "es-ar"
db 0D1h
db    0
db    0
db    0
dd offset aEsBo_0       ; "es-bo"
db 0DDh
db    0
db    0
db    0
dd offset aEsCl_0       ; "es-cl"
db 0D7h
db    0
db    0
db    0
dd offset aEsCo_0       ; "es-co"
db 0CAh
db    0
db    0
db    0
dd offset aEsCr_0       ; "es-cr"
db 0B5h
db    0
db    0
db    0
dd offset aEsDo_0       ; "es-do"
db 0C1h
db    0
db    0
db    0
dd offset aEsEc_0       ; "es-ec"
db 0D4h
db    0
db    0
db    0
dd offset aEsEs_0       ; "es-es"
db 0A4h
db    0
db    0
db    0
dd offset aEsGt_0       ; "es-gt"
db 0ADh
db    0
db    0
db    0
dd offset aEsHn_0       ; "es-hn"
db 0DFh
db    0
db    0
db    0
dd offset aEsMx_0       ; "es-mx"
db  93h
db    0
db    0
db    0
dd offset aEsNi_0       ; "es-ni"
db 0E0h
db    0
db    0
db    0
dd offset aEsPa_0       ; "es-pa"
db 0BBh
db    0
db    0
db    0
dd offset aEsPe_0       ; "es-pe"
db 0CEh
db    0
db    0
db    0
dd offset aEsPr_0       ; "es-pr"
db 0E1h
db    0
db    0
db    0
dd offset aEsPy_0       ; "es-py"
db 0DBh
db    0
db    0
db    0
dd offset aEsSv_0       ; "es-sv"
db 0DEh
db    0
db    0
db    0
dd offset aEsUy_0       ; "es-uy"
db 0D9h
db    0
db    0
db    0
dd offset aEsVe_0       ; "es-ve"
db 0C6h
db    0
db    0
db    0
dd offset aEt           ; "et"
db  23h ; #
db    0
db    0
db    0
dd offset aEtEe_0       ; "et-ee"
db  65h ; e
db    0
db    0
db    0
dd offset aEu           ; "eu"
db  2Ah ; *
db    0
db    0
db    0
dd offset aEuEs_0       ; "eu-es"
db  6Ch ; l
db    0
db    0
db    0
dd offset aFa           ; "fa"
db  26h ; &
db    0
db    0
db    0
dd offset aFaIr_0       ; "fa-ir"
db  68h ; h
db    0
db    0
db    0
dd offset aFi           ; "fi"
db  0Ah
db    0
db    0
db    0
dd offset aFiFi_0       ; "fi-fi"
db  4Ch ; L
db    0
db    0
db    0
dd offset aFo           ; "fo"
db  2Eh ; .
db    0
db    0
db    0
dd offset aFoFo_0       ; "fo-fo"
db  73h ; s
db    0
db    0
db    0
dd offset aFr           ; "fr"
db  0Bh
db    0
db    0
db    0
dd offset aFrBe_0       ; "fr-be"
db  94h
db    0
db    0
db    0
dd offset aFrCa_0       ; "fr-ca"
db 0A5h
db    0
db    0
db    0
dd offset aFrCh_0       ; "fr-ch"
db 0AEh
db    0
db    0
db    0
dd offset aFrFr_0       ; "fr-fr"
db  4Dh ; M
db    0
db    0
db    0
dd offset aFrLu_0       ; "fr-lu"
db 0B6h
db    0
db    0
db    0
dd offset aFrMc_0       ; "fr-mc"
db 0BCh
db    0
db    0
db    0
dd offset aGl           ; "gl"
db  3Eh ; >
db    0
db    0
db    0
dd offset aGlEs_0       ; "gl-es"
db  88h
db    0
db    0
db    0
dd offset aGu           ; "gu"
db  37h ; 7
db    0
db    0
db    0
dd offset aGuIn_0       ; "gu-in"
db  7Fh ; 
db    0
db    0
db    0
dd offset aHe           ; "he"
db  0Ch
db    0
db    0
db    0
dd offset aHeIl_0       ; "he-il"
db  4Eh ; N
db    0
db    0
db    0
dd offset aHi           ; "hi"
db  2Fh ; /
db    0
db    0
db    0
dd offset aHiIn_0       ; "hi-in"
db  74h ; t
db    0
db    0
db    0
dd offset aHr           ; "hr"
db  18h
db    0
db    0
db    0
dd offset aHrBa_0       ; "hr-ba"
db 0AFh
db    0
db    0
db    0
dd offset aHrHr_0       ; "hr-hr"
db  5Ah ; Z
db    0
db    0
db    0
dd offset aHu           ; "hu"
db  0Dh
db    0
db    0
db    0
dd offset aHuHu_0       ; "hu-hu"
db  4Fh ; O
db    0
db    0
db    0
dd offset aHy           ; "hy"
db  28h ; (
db    0
db    0
db    0
dd offset aHyAm_0       ; "hy-am"
db  6Ah ; j
db    0
db    0
db    0
dd offset aId           ; "id"
db  1Fh
db    0
db    0
db    0
dd offset aIdId         ; "id-id"
db  61h ; a
db    0
db    0
db    0
dd offset aIs           ; "is"
db  0Eh
db    0
db    0
db    0
dd offset aIsIs_0       ; "is-is"
db  50h ; P
db    0
db    0
db    0
dd offset aIt           ; "it"
db  0Fh
db    0
db    0
db    0
dd offset aItCh_0       ; "it-ch"
db  95h
db    0
db    0
db    0
dd offset aItIt_0       ; "it-it"
db  51h ; Q
db    0
db    0
db    0
dd offset aJa           ; "ja"
db  10h
db    0
db    0
db    0
dd offset aJaJp_0       ; "ja-jp"
db  52h ; R
db    0
db    0
db    0
dd offset aKa           ; "ka"
db  2Dh ; -
db    0
db    0
db    0
dd offset aKaGe_0       ; "ka-ge"
db  72h ; r
db    0
db    0
db    0
dd offset aKk           ; "kk"
db  31h ; 1
db    0
db    0
db    0
dd offset aKkKz_0       ; "kk-kz"
db  78h ; x
db    0
db    0
db    0
dd offset aKn           ; "kn"
db  3Ah ; :
db    0
db    0
db    0
dd offset aKnIn_0       ; "kn-in"
db  82h
db    0
db    0
db    0
dd offset aKo           ; "ko"
db  11h
db    0
db    0
db    0
dd offset aKok          ; "kok"
db  3Fh ; ?
db    0
db    0
db    0
dd offset aKokIn_0      ; "kok-in"
db  89h
db    0
db    0
db    0
dd offset aKoKr_0       ; "ko-kr"
db  53h ; S
db    0
db    0
db    0
dd offset aKy           ; "ky"
db  32h ; 2
db    0
db    0
db    0
dd offset aKyKg_0       ; "ky-kg"
db  79h ; y
db    0
db    0
db    0
dd offset aLt           ; "lt"
db  25h ; %
db    0
db    0
db    0
dd offset aLtLt_0       ; "lt-lt"
db  67h ; g
db    0
db    0
db    0
dd offset aLv           ; "lv"
db  24h ; $
db    0
db    0
db    0
dd offset aLvLv_0       ; "lv-lv"
db  66h ; f
db    0
db    0
db    0
dd offset aMiNz_0       ; "mi-nz"
db  8Eh
db    0
db    0
db    0
dd offset aMk           ; "mk"
db  2Bh ; +
db    0
db    0
db    0
dd offset aMkMk_0       ; "mk-mk"
db  6Dh ; m
db    0
db    0
db    0
dd offset aMlIn_0       ; "ml-in"
db  83h
db    0
db    0
db    0
dd offset aMn           ; "mn"
db  3Dh ; =
db    0
db    0
db    0
dd offset aMnMn_0       ; "mn-mn"
db  86h
db    0
db    0
db    0
dd offset aMr           ; "mr"
db  3Bh ; ;
db    0
db    0
db    0
dd offset aMrIn_0       ; "mr-in"
db  84h
db    0
db    0
db    0
dd offset aMs           ; "ms"
db  30h ; 0
db    0
db    0
db    0
dd offset aMsBn_0       ; "ms-bn"
db  9Dh
db    0
db    0
db    0
dd offset aMsMy_0       ; "ms-my"
db  77h ; w
db    0
db    0
db    0
dd offset aMtMt_0       ; "mt-mt"
db  75h ; u
db    0
db    0
db    0
dd offset aNbNo_0       ; "nb-no"
db  55h ; U
db    0
db    0
db    0
dd offset aNl           ; "nl"
db  12h
db    0
db    0
db    0
dd offset aNlBe_0       ; "nl-be"
db  96h
db    0
db    0
db    0
dd offset aNlNl_0       ; "nl-nl"
db  54h ; T
db    0
db    0
db    0
dd offset aNnNo_0       ; "nn-no"
db  97h
db    0
db    0
db    0
dd offset aNo           ; "no"
db  13h
db    0
db    0
db    0
dd offset aNsZa_0       ; "ns-za"
db  8Dh
db    0
db    0
db    0
dd offset aPa           ; "pa"
db  36h ; 6
db    0
db    0
db    0
dd offset aPaIn_0       ; "pa-in"
db  7Eh ; ~
db    0
db    0
db    0
dd offset aPl           ; "pl"
db  14h
db    0
db    0
db    0
dd offset aPlPl_0       ; "pl-pl"
db  56h ; V
db    0
db    0
db    0
dd offset aPt           ; "pt"
db  15h
db    0
db    0
db    0
dd offset aPtBr_0       ; "pt-br"
db  57h ; W
db    0
db    0
db    0
dd offset aPtPt_0       ; "pt-pt"
db  98h
db    0
db    0
db    0
dd offset aQuzBo_0      ; "quz-bo"
db  8Ch
db    0
db    0
db    0
dd offset aQuzEc_0      ; "quz-ec"
db  9Fh
db    0
db    0
db    0
dd offset aQuzPe_0      ; "quz-pe"
db 0A8h
db    0
db    0
db    0
dd offset aRo           ; "ro"
db  16h
db    0
db    0
db    0
dd offset aRoRo_0       ; "ro-ro"
db  58h ; X
db    0
db    0
db    0
dd offset aRu           ; "ru"
db  17h
db    0
db    0
db    0
dd offset aRuRu_0       ; "ru-ru"
db  59h ; Y
db    0
db    0
db    0
dd offset aSa           ; "sa"
db  3Ch ; <
db    0
db    0
db    0
dd offset aSaIn_0       ; "sa-in"
db  85h
db    0
db    0
db    0
dd offset aSeFi_0       ; "se-fi"
db 0A7h
db    0
db    0
db    0
dd offset aSeNo_0       ; "se-no"
db  76h ; v
db    0
db    0
db    0
dd offset aSeSe_0       ; "se-se"
db  9Ch
db    0
db    0
db    0
dd offset aSk           ; "sk"
db  19h
db    0
db    0
db    0
dd offset aSkSk_0       ; "sk-sk"
db  5Bh ; [
db    0
db    0
db    0
dd offset aSl           ; "sl"
db  22h ; "
db    0
db    0
db    0
dd offset aSlSi_0       ; "sl-si"
db  64h ; d
db    0
db    0
db    0
dd offset aSmaNo_0      ; "sma-no"
db 0BEh
db    0
db    0
db    0
dd offset aSmaSe_0      ; "sma-se"
db 0C3h
db    0
db    0
db    0
dd offset aSmjNo_0      ; "smj-no"
db 0B0h
db    0
db    0
db    0
dd offset aSmjSe_0      ; "smj-se"
db 0B8h
db    0
db    0
db    0
dd offset aSmnFi_0      ; "smn-fi"
db 0CBh
db    0
db    0
db    0
dd offset aSmsFi_0      ; "sms-fi"
db 0C7h
db    0
db    0
db    0
dd offset aSq           ; "sq"
db  1Ah
db    0
db    0
db    0
dd offset aSqAl_0       ; "sq-al"
db  5Ch ; \
db    0
db    0
db    0
dd offset aSr           ; "sr"
db 0E3h
db    0
db    0
db    0
dd offset aSrBaCyrl_0   ; "sr-ba-cyrl"
db 0C2h
db    0
db    0
db    0
dd offset aSrBaLatn_0   ; "sr-ba-latn"
db 0BDh
db    0
db    0
db    0
dd offset aSrSpCyrl_0   ; "sr-sp-cyrl"
db 0A6h
db    0
db    0
db    0
dd offset aSrSpLatn_0   ; "sr-sp-latn"
db  99h
db    0
db    0
db    0
dd offset aSv           ; "sv"
db  1Bh
db    0
db    0
db    0
dd offset aSvFi_0       ; "sv-fi"
db  9Ah
db    0
db    0
db    0
dd offset aSvSe_0       ; "sv-se"
db  5Dh ; ]
db    0
db    0
db    0
dd offset aSw           ; "sw"
db  33h ; 3
db    0
db    0
db    0
dd offset aSwKe_0       ; "sw-ke"
db  7Ah ; z
db    0
db    0
db    0
dd offset aSyr          ; "syr"
db  40h ; @
db    0
db    0
db    0
dd offset aSyrSy_0      ; "syr-sy"
db  8Ah
db    0
db    0
db    0
dd offset aTa           ; "ta"
db  38h ; 8
db    0
db    0
db    0
dd offset aTaIn_0       ; "ta-in"
db  80h
db    0
db    0
db    0
dd offset aTe           ; "te"
db  39h ; 9
db    0
db    0
db    0
dd offset aTeIn_0       ; "te-in"
db  81h
db    0
db    0
db    0
dd offset aTh           ; "th"
db  1Ch
db    0
db    0
db    0
dd offset aThTh_0       ; "th-th"
db  5Eh ; ^
db    0
db    0
db    0
dd offset aTnZa_0       ; "tn-za"
db  6Eh ; n
db    0
db    0
db    0
dd offset aTr           ; "tr"
db  1Dh
db    0
db    0
db    0
dd offset aTrTr_0       ; "tr-tr"
db  5Fh ; _
db    0
db    0
db    0
dd offset aTt           ; "tt"
db  35h ; 5
db    0
db    0
db    0
dd offset aTtRu_0       ; "tt-ru"
db  7Ch ; |
db    0
db    0
db    0
dd offset aUk           ; "uk"
db  20h
db    0
db    0
db    0
dd offset aUkUa_0       ; "uk-ua"
db  62h ; b
db    0
db    0
db    0
dd offset aUr           ; "ur"
db  1Eh
db    0
db    0
db    0
dd offset aUrPk_0       ; "ur-pk"
db  60h ; `
db    0
db    0
db    0
dd offset aUz           ; "uz"
db  34h ; 4
db    0
db    0
db    0
dd offset aUzUzCyrl_0   ; "uz-uz-cyrl"
db  9Eh
db    0
db    0
db    0
dd offset aUzUzLatn_0   ; "uz-uz-latn"
db  7Bh ; {
db    0
db    0
db    0
dd offset aVi           ; "vi"
db  27h ; '
db    0
db    0
db    0
dd offset aViVn_0       ; "vi-vn"
db  69h ; i
db    0
db    0
db    0
dd offset aXhZa_0       ; "xh-za"
db  6Fh ; o
db    0
db    0
db    0
dd offset aZhChs_0      ; "zh-chs"
db    3
db    0
db    0
db    0
dd offset aZhCht_0      ; "zh-cht"
db 0E2h
db    0
db    0
db    0
dd offset aZhCn_0       ; "zh-cn"
db  90h
db    0
db    0
db    0
dd offset aZhHk_0       ; "zh-hk"
db 0A1h
db    0
db    0
db    0
dd offset aZhMo_0       ; "zh-mo"
db 0B2h
db    0
db    0
db    0
dd offset aZhSg_0       ; "zh-sg"
db 0AAh
db    0
db    0
db    0
dd offset aZhTw_0       ; "zh-tw"
db  46h ; F
db    0
db    0
db    0
dd offset aZuZa_0       ; "zu-za"
db  70h ; p
db    0
db    0
db    0
aAr:
text "UTF-16LE", 'ar',0
align 10h
aBg:
text "UTF-16LE", 'bg',0
align 4
aCa:
text "UTF-16LE", 'ca',0
align 10h
aZhChs:
text "UTF-16LE", 'zh-CHS',0
align 10h
aCs:
text "UTF-16LE", 'cs',0
align 4
aDa:
text "UTF-16LE", 'da',0
align 10h
aEl:
text "UTF-16LE", 'el',0
align 4
aEs:
text "UTF-16LE", 'es',0
align 10h
aFi:
text "UTF-16LE", 'fi',0
align 4
aFr:
text "UTF-16LE", 'fr',0
align 10h
aHe:
text "UTF-16LE", 'he',0
align 4
aHu:
text "UTF-16LE", 'hu',0
align 10h
aIs:
text "UTF-16LE", 'is',0
align 4
aIt:
text "UTF-16LE", 'it',0
align 10h
aJa:
text "UTF-16LE", 'ja',0
align 4
aKo:
text "UTF-16LE", 'ko',0
align 10h
aNl:
text "UTF-16LE", 'nl',0
align 4
aNo:
text "UTF-16LE", 'no',0
align 10h
aPl:
text "UTF-16LE", 'pl',0
align 4
aPt:
text "UTF-16LE", 'pt',0
align 10h
aRo:
text "UTF-16LE", 'ro',0
align 4
aRu:
text "UTF-16LE", 'ru',0
align 10h
aHr:
text "UTF-16LE", 'hr',0
align 4
aSk:
text "UTF-16LE", 'sk',0
align 10h
aSq:
text "UTF-16LE", 'sq',0
align 4
aSv:
text "UTF-16LE", 'sv',0
align 10h
aTh:
text "UTF-16LE", 'th',0
align 4
aTr:
text "UTF-16LE", 'tr',0
align 10h
aUr:
text "UTF-16LE", 'ur',0
align 4
aId:
text "UTF-16LE", 'id',0
align 10h
aUk:
text "UTF-16LE", 'uk',0
align 4
aBe:
text "UTF-16LE", 'be',0
align 10h
aSl:
text "UTF-16LE", 'sl',0
align 4
aEt:
text "UTF-16LE", 'et',0
align 10h
aLv:
text "UTF-16LE", 'lv',0
align 4
aLt:
text "UTF-16LE", 'lt',0
align 10h
aFa:
text "UTF-16LE", 'fa',0
align 4
aVi:
text "UTF-16LE", 'vi',0
align 10h
aHy:
text "UTF-16LE", 'hy',0
align 4
aAz:
text "UTF-16LE", 'az',0
align 10h
aEu:
text "UTF-16LE", 'eu',0
align 4
aMk:
text "UTF-16LE", 'mk',0
align 10h
aAf:
text "UTF-16LE", 'af',0
align 4
aKa:
text "UTF-16LE", 'ka',0
align 10h
aFo:
text "UTF-16LE", 'fo',0
align 4
aHi:
text "UTF-16LE", 'hi',0
align 10h
aMs:
text "UTF-16LE", 'ms',0
align 4
aKk:
text "UTF-16LE", 'kk',0
align 10h
aKy:
text "UTF-16LE", 'ky',0
align 4
aSw:
text "UTF-16LE", 'sw',0
align 10h
aUz:
text "UTF-16LE", 'uz',0
align 4
aTt:
text "UTF-16LE", 'tt',0
align 10h
aPa:
text "UTF-16LE", 'pa',0
align 4
aGu:
text "UTF-16LE", 'gu',0
align 10h
aTa:
text "UTF-16LE", 'ta',0
align 4
aTe:
text "UTF-16LE", 'te',0
align 10h
aKn:
text "UTF-16LE", 'kn',0
align 4
aMr:
text "UTF-16LE", 'mr',0
align 10h
aSa:
text "UTF-16LE", 'sa',0
align 4
aMn:
text "UTF-16LE", 'mn',0
align 10h
aGl:
text "UTF-16LE", 'gl',0
align 4
aKok:
text "UTF-16LE", 'kok',0
aSyr:
text "UTF-16LE", 'syr',0
aDiv:
text "UTF-16LE", 'div',0
aArSa:
text "UTF-16LE", 'ar-SA',0
aBgBg:
text "UTF-16LE", 'bg-BG',0
aCaEs:
text "UTF-16LE", 'ca-ES',0
aCsCz:
text "UTF-16LE", 'cs-CZ',0
aDaDk:
text "UTF-16LE", 'da-DK',0
aDeDe:
text "UTF-16LE", 'de-DE',0
aElGr:
text "UTF-16LE", 'el-GR',0
aFiFi:
text "UTF-16LE", 'fi-FI',0
aFrFr:
text "UTF-16LE", 'fr-FR',0
aHeIl:
text "UTF-16LE", 'he-IL',0
aHuHu:
text "UTF-16LE", 'hu-HU',0
aIsIs:
text "UTF-16LE", 'is-IS',0
aItIt:
text "UTF-16LE", 'it-IT',0
aNlNl:
text "UTF-16LE", 'nl-NL',0
aNbNo:
text "UTF-16LE", 'nb-NO',0
aPlPl:
text "UTF-16LE", 'pl-PL',0
aPtBr:
text "UTF-16LE", 'pt-BR',0
aRoRo:
text "UTF-16LE", 'ro-RO',0
aRuRu:
text "UTF-16LE", 'ru-RU',0
aHrHr:
text "UTF-16LE", 'hr-HR',0
aSkSk:
text "UTF-16LE", 'sk-SK',0
aSqAl:
text "UTF-16LE", 'sq-AL',0
aSvSe:
text "UTF-16LE", 'sv-SE',0
aThTh:
text "UTF-16LE", 'th-TH',0
aTrTr:
text "UTF-16LE", 'tr-TR',0
aUrPk:
text "UTF-16LE", 'ur-PK',0
aUkUa:
text "UTF-16LE", 'uk-UA',0
aBeBy:
text "UTF-16LE", 'be-BY',0
aSlSi:
text "UTF-16LE", 'sl-SI',0
aEtEe:
text "UTF-16LE", 'et-EE',0
aLvLv:
text "UTF-16LE", 'lv-LV',0
aLtLt:
text "UTF-16LE", 'lt-LT',0
aFaIr:
text "UTF-16LE", 'fa-IR',0
aViVn:
text "UTF-16LE", 'vi-VN',0
aHyAm:
text "UTF-16LE", 'hy-AM',0
aAzAzLatn:
text "UTF-16LE", 'az-AZ-Latn',0
align 4
aEuEs:
text "UTF-16LE", 'eu-ES',0
aMkMk:
text "UTF-16LE", 'mk-MK',0
aTnZa:
text "UTF-16LE", 'tn-ZA',0
aXhZa:
text "UTF-16LE", 'xh-ZA',0
aZuZa:
text "UTF-16LE", 'zu-ZA',0
aAfZa:
text "UTF-16LE", 'af-ZA',0
aKaGe:
text "UTF-16LE", 'ka-GE',0
aFoFo:
text "UTF-16LE", 'fo-FO',0
aHiIn:
text "UTF-16LE", 'hi-IN',0
aMtMt:
text "UTF-16LE", 'mt-MT',0
aSeNo:
text "UTF-16LE", 'se-NO',0
aMsMy:
text "UTF-16LE", 'ms-MY',0
aKkKz:
text "UTF-16LE", 'kk-KZ',0
aKyKg:
text "UTF-16LE", 'ky-KG',0
aSwKe:
text "UTF-16LE", 'sw-KE',0
aUzUzLatn:
text "UTF-16LE", 'uz-UZ-Latn',0
align 4
aTtRu:
text "UTF-16LE", 'tt-RU',0
aBnIn:
text "UTF-16LE", 'bn-IN',0
aPaIn:
text "UTF-16LE", 'pa-IN',0
aGuIn:
text "UTF-16LE", 'gu-IN',0
aTaIn:
text "UTF-16LE", 'ta-IN',0
aTeIn:
text "UTF-16LE", 'te-IN',0
aKnIn:
text "UTF-16LE", 'kn-IN',0
aMlIn:
text "UTF-16LE", 'ml-IN',0
aMrIn:
text "UTF-16LE", 'mr-IN',0
aSaIn:
text "UTF-16LE", 'sa-IN',0
aMnMn:
text "UTF-16LE", 'mn-MN',0
aCyGb:
text "UTF-16LE", 'cy-GB',0
aGlEs:
text "UTF-16LE", 'gl-ES',0
aKokIn:
text "UTF-16LE", 'kok-IN',0
align 4
aSyrSy:
text "UTF-16LE", 'syr-SY',0
align 4
aDivMv:
text "UTF-16LE", 'div-MV',0
align 4
aQuzBo:
text "UTF-16LE", 'quz-BO',0
align 4
aNsZa:
text "UTF-16LE", 'ns-ZA',0
aMiNz:
text "UTF-16LE", 'mi-NZ',0
aArIq:
text "UTF-16LE", 'ar-IQ',0
aDeCh:
text "UTF-16LE", 'de-CH',0
aEnGb:
text "UTF-16LE", 'en-GB',0
aEsMx:
text "UTF-16LE", 'es-MX',0
aFrBe:
text "UTF-16LE", 'fr-BE',0
aItCh:
text "UTF-16LE", 'it-CH',0
aNlBe:
text "UTF-16LE", 'nl-BE',0
aNnNo:
text "UTF-16LE", 'nn-NO',0
aPtPt:
text "UTF-16LE", 'pt-PT',0
aSrSpLatn:
text "UTF-16LE", 'sr-SP-Latn',0
align 10h
aSvFi:
text "UTF-16LE", 'sv-FI',0
aAzAzCyrl:
text "UTF-16LE", 'az-AZ-Cyrl',0
align 4
aSeSe:
text "UTF-16LE", 'se-SE',0
aMsBn:
text "UTF-16LE", 'ms-BN',0
aUzUzCyrl:
text "UTF-16LE", 'uz-UZ-Cyrl',0
align 4
aQuzEc:
text "UTF-16LE", 'quz-EC',0
align 4
aArEg:
text "UTF-16LE", 'ar-EG',0
aZhHk:
text "UTF-16LE", 'zh-HK',0
aDeAt:
text "UTF-16LE", 'de-AT',0
aEnAu:
text "UTF-16LE", 'en-AU',0
aEsEs:
text "UTF-16LE", 'es-ES',0
aFrCa:
text "UTF-16LE", 'fr-CA',0
aSrSpCyrl:
text "UTF-16LE", 'sr-SP-Cyrl',0
align 4
aSeFi:
text "UTF-16LE", 'se-FI',0
aQuzPe:
text "UTF-16LE", 'quz-PE',0
align 10h
aArLy:
text "UTF-16LE", 'ar-LY',0
aZhSg:
text "UTF-16LE", 'zh-SG',0
aDeLu:
text "UTF-16LE", 'de-LU',0
aEnCa:
text "UTF-16LE", 'en-CA',0
aEsGt:
text "UTF-16LE", 'es-GT',0
aFrCh:
text "UTF-16LE", 'fr-CH',0
aHrBa:
text "UTF-16LE", 'hr-BA',0
aSmjNo:
text "UTF-16LE", 'smj-NO',0
align 4
aArDz:
text "UTF-16LE", 'ar-DZ',0
aZhMo:
text "UTF-16LE", 'zh-MO',0
aDeLi:
text "UTF-16LE", 'de-LI',0
aEnNz:
text "UTF-16LE", 'en-NZ',0
aEsCr:
text "UTF-16LE", 'es-CR',0
aFrLu:
text "UTF-16LE", 'fr-LU',0
aBsBaLatn:
text "UTF-16LE", 'bs-BA-Latn',0
align 4
aSmjSe:
text "UTF-16LE", 'smj-SE',0
align 4
aArMa:
text "UTF-16LE", 'ar-MA',0
aEnIe:
text "UTF-16LE", 'en-IE',0
aEsPa:
text "UTF-16LE", 'es-PA',0
aFrMc:
text "UTF-16LE", 'fr-MC',0
aSrBaLatn:
text "UTF-16LE", 'sr-BA-Latn',0
align 4
aSmaNo:
text "UTF-16LE", 'sma-NO',0
align 4
aArTn:
text "UTF-16LE", 'ar-TN',0
aEnZa:
text "UTF-16LE", 'en-ZA',0
aEsDo:
text "UTF-16LE", 'es-DO',0
aSrBaCyrl:
text "UTF-16LE", 'sr-BA-Cyrl',0
align 4
aSmaSe:
text "UTF-16LE", 'sma-SE',0
align 4
aArOm:
text "UTF-16LE", 'ar-OM',0
aEnJm:
text "UTF-16LE", 'en-JM',0
aEsVe:
text "UTF-16LE", 'es-VE',0
aSmsFi:
text "UTF-16LE", 'sms-FI',0
align 4
aArYe:
text "UTF-16LE", 'ar-YE',0
aEnCb:
text "UTF-16LE", 'en-CB',0
aEsCo:
text "UTF-16LE", 'es-CO',0
aSmnFi:
text "UTF-16LE", 'smn-FI',0
align 10h
aArSy:
text "UTF-16LE", 'ar-SY',0
aEnBz:
text "UTF-16LE", 'en-BZ',0
aEsPe:
text "UTF-16LE", 'es-PE',0
aArJo:
text "UTF-16LE", 'ar-JO',0
aEnTt:
text "UTF-16LE", 'en-TT',0
aEsAr:
text "UTF-16LE", 'es-AR',0
aArLb:
text "UTF-16LE", 'ar-LB',0
aEnZw:
text "UTF-16LE", 'en-ZW',0
aEsEc:
text "UTF-16LE", 'es-EC',0
aArKw:
text "UTF-16LE", 'ar-KW',0
aEnPh:
text "UTF-16LE", 'en-PH',0
aEsCl:
text "UTF-16LE", 'es-CL',0
aArAe:
text "UTF-16LE", 'ar-AE',0
aEsUy:
text "UTF-16LE", 'es-UY',0
aArBh:
text "UTF-16LE", 'ar-BH',0
aEsPy:
text "UTF-16LE", 'es-PY',0
aArQa:
text "UTF-16LE", 'ar-QA',0
aEsBo:
text "UTF-16LE", 'es-BO',0
aEsSv:
text "UTF-16LE", 'es-SV',0
aEsHn:
text "UTF-16LE", 'es-HN',0
aEsNi:
text "UTF-16LE", 'es-NI',0
aEsPr:
text "UTF-16LE", 'es-PR',0
aZhCht:
text "UTF-16LE", 'zh-CHT',0
align 4
aSr:
text "UTF-16LE", 'sr',0
align 10h
aAfZa_0:
text "UTF-16LE", 'af-za',0
aArAe_0:
text "UTF-16LE", 'ar-ae',0
aArBh_0:
text "UTF-16LE", 'ar-bh',0
aArDz_0:
text "UTF-16LE", 'ar-dz',0
aArEg_0:
text "UTF-16LE", 'ar-eg',0
aArIq_0:
text "UTF-16LE", 'ar-iq',0
aArJo_0:
text "UTF-16LE", 'ar-jo',0
aArKw_0:
text "UTF-16LE", 'ar-kw',0
aArLb_0:
text "UTF-16LE", 'ar-lb',0
aArLy_0:
text "UTF-16LE", 'ar-ly',0
aArMa_0:
text "UTF-16LE", 'ar-ma',0
aArOm_0:
text "UTF-16LE", 'ar-om',0
aArQa_0:
text "UTF-16LE", 'ar-qa',0
aArSa_0:
text "UTF-16LE", 'ar-sa',0
aArSy_0:
text "UTF-16LE", 'ar-sy',0
aArTn_0:
text "UTF-16LE", 'ar-tn',0
aArYe_0:
text "UTF-16LE", 'ar-ye',0
aAzAzCyrl_0:
text "UTF-16LE", 'az-az-cyrl',0
align 4
aAzAzLatn_0:
text "UTF-16LE", 'az-az-latn',0
align 4
aBeBy_0:
text "UTF-16LE", 'be-by',0
aBgBg_0:
text "UTF-16LE", 'bg-bg',0
aBnIn_0:
text "UTF-16LE", 'bn-in',0
aBsBaLatn_0:
text "UTF-16LE", 'bs-ba-latn',0
align 4
aCaEs_0:
text "UTF-16LE", 'ca-es',0
aCsCz_0:
text "UTF-16LE", 'cs-cz',0
aCyGb_0:
text "UTF-16LE", 'cy-gb',0
aDaDk_0:
text "UTF-16LE", 'da-dk',0
aDeAt_0:
text "UTF-16LE", 'de-at',0
aDeCh_0:
text "UTF-16LE", 'de-ch',0
aDeDe_0:
text "UTF-16LE", 'de-de',0
aDeLi_0:
text "UTF-16LE", 'de-li',0
aDeLu_0:
text "UTF-16LE", 'de-lu',0
aDivMv_0:
text "UTF-16LE", 'div-mv',0
align 4
aElGr_0:
text "UTF-16LE", 'el-gr',0
aEnAu_0:
text "UTF-16LE", 'en-au',0
aEnBz_0:
text "UTF-16LE", 'en-bz',0
aEnCa_0:
text "UTF-16LE", 'en-ca',0
aEnCb_0:
text "UTF-16LE", 'en-cb',0
aEnGb_0:
text "UTF-16LE", 'en-gb',0
aEnIe_0:
text "UTF-16LE", 'en-ie',0
aEnJm_0:
text "UTF-16LE", 'en-jm',0
aEnNz_0:
text "UTF-16LE", 'en-nz',0
aEnPh_0:
text "UTF-16LE", 'en-ph',0
aEnTt_0:
text "UTF-16LE", 'en-tt',0
aEnUs_0:
text "UTF-16LE", 'en-us',0
aEnZa_0:
text "UTF-16LE", 'en-za',0
aEnZw_0:
text "UTF-16LE", 'en-zw',0
aEsAr_0:
text "UTF-16LE", 'es-ar',0
aEsBo_0:
text "UTF-16LE", 'es-bo',0
aEsCl_0:
text "UTF-16LE", 'es-cl',0
aEsCo_0:
text "UTF-16LE", 'es-co',0
aEsCr_0:
text "UTF-16LE", 'es-cr',0
aEsDo_0:
text "UTF-16LE", 'es-do',0
aEsEc_0:
text "UTF-16LE", 'es-ec',0
aEsEs_0:
text "UTF-16LE", 'es-es',0
aEsGt_0:
text "UTF-16LE", 'es-gt',0
aEsHn_0:
text "UTF-16LE", 'es-hn',0
aEsMx_0:
text "UTF-16LE", 'es-mx',0
aEsNi_0:
text "UTF-16LE", 'es-ni',0
aEsPa_0:
text "UTF-16LE", 'es-pa',0
aEsPe_0:
text "UTF-16LE", 'es-pe',0
aEsPr_0:
text "UTF-16LE", 'es-pr',0
aEsPy_0:
text "UTF-16LE", 'es-py',0
aEsSv_0:
text "UTF-16LE", 'es-sv',0
aEsUy_0:
text "UTF-16LE", 'es-uy',0
aEsVe_0:
text "UTF-16LE", 'es-ve',0
aEtEe_0:
text "UTF-16LE", 'et-ee',0
aEuEs_0:
text "UTF-16LE", 'eu-es',0
aFaIr_0:
text "UTF-16LE", 'fa-ir',0
aFiFi_0:
text "UTF-16LE", 'fi-fi',0
aFoFo_0:
text "UTF-16LE", 'fo-fo',0
aFrBe_0:
text "UTF-16LE", 'fr-be',0
aFrCa_0:
text "UTF-16LE", 'fr-ca',0
aFrCh_0:
text "UTF-16LE", 'fr-ch',0
aFrFr_0:
text "UTF-16LE", 'fr-fr',0
aFrLu_0:
text "UTF-16LE", 'fr-lu',0
aFrMc_0:
text "UTF-16LE", 'fr-mc',0
aGlEs_0:
text "UTF-16LE", 'gl-es',0
aGuIn_0:
text "UTF-16LE", 'gu-in',0
aHeIl_0:
text "UTF-16LE", 'he-il',0
aHiIn_0:
text "UTF-16LE", 'hi-in',0
aHrBa_0:
text "UTF-16LE", 'hr-ba',0
aHrHr_0:
text "UTF-16LE", 'hr-hr',0
aHuHu_0:
text "UTF-16LE", 'hu-hu',0
aHyAm_0:
text "UTF-16LE", 'hy-am',0
aIdId:
text "UTF-16LE", 'id-id',0
aIsIs_0:
text "UTF-16LE", 'is-is',0
aItCh_0:
text "UTF-16LE", 'it-ch',0
aItIt_0:
text "UTF-16LE", 'it-it',0
aJaJp_0:
text "UTF-16LE", 'ja-jp',0
aKaGe_0:
text "UTF-16LE", 'ka-ge',0
aKkKz_0:
text "UTF-16LE", 'kk-kz',0
aKnIn_0:
text "UTF-16LE", 'kn-in',0
aKokIn_0:
text "UTF-16LE", 'kok-in',0
align 4
aKoKr_0:
text "UTF-16LE", 'ko-kr',0
aKyKg_0:
text "UTF-16LE", 'ky-kg',0
aLtLt_0:
text "UTF-16LE", 'lt-lt',0
aLvLv_0:
text "UTF-16LE", 'lv-lv',0
aMiNz_0:
text "UTF-16LE", 'mi-nz',0
aMkMk_0:
text "UTF-16LE", 'mk-mk',0
aMlIn_0:
text "UTF-16LE", 'ml-in',0
aMnMn_0:
text "UTF-16LE", 'mn-mn',0
aMrIn_0:
text "UTF-16LE", 'mr-in',0
aMsBn_0:
text "UTF-16LE", 'ms-bn',0
aMsMy_0:
text "UTF-16LE", 'ms-my',0
aMtMt_0:
text "UTF-16LE", 'mt-mt',0
aNbNo_0:
text "UTF-16LE", 'nb-no',0
aNlBe_0:
text "UTF-16LE", 'nl-be',0
aNlNl_0:
text "UTF-16LE", 'nl-nl',0
aNnNo_0:
text "UTF-16LE", 'nn-no',0
aNsZa_0:
text "UTF-16LE", 'ns-za',0
aPaIn_0:
text "UTF-16LE", 'pa-in',0
aPlPl_0:
text "UTF-16LE", 'pl-pl',0
aPtBr_0:
text "UTF-16LE", 'pt-br',0
aPtPt_0:
text "UTF-16LE", 'pt-pt',0
aQuzBo_0:
text "UTF-16LE", 'quz-bo',0
align 10h
aQuzEc_0:
text "UTF-16LE", 'quz-ec',0
align 10h
aQuzPe_0:
text "UTF-16LE", 'quz-pe',0
align 10h
aRoRo_0:
text "UTF-16LE", 'ro-ro',0
aRuRu_0:
text "UTF-16LE", 'ru-ru',0
aSaIn_0:
text "UTF-16LE", 'sa-in',0
aSeFi_0:
text "UTF-16LE", 'se-fi',0
aSeNo_0:
text "UTF-16LE", 'se-no',0
aSeSe_0:
text "UTF-16LE", 'se-se',0
aSkSk_0:
text "UTF-16LE", 'sk-sk',0
aSlSi_0:
text "UTF-16LE", 'sl-si',0
aSmaNo_0:
text "UTF-16LE", 'sma-no',0
align 10h
aSmaSe_0:
text "UTF-16LE", 'sma-se',0
align 10h
aSmjNo_0:
text "UTF-16LE", 'smj-no',0
align 10h
aSmjSe_0:
text "UTF-16LE", 'smj-se',0
align 10h
aSmnFi_0:
text "UTF-16LE", 'smn-fi',0
align 10h
aSmsFi_0:
text "UTF-16LE", 'sms-fi',0
align 10h
aSqAl_0:
text "UTF-16LE", 'sq-al',0
aSrBaCyrl_0:
text "UTF-16LE", 'sr-ba-cyrl',0
align 4
aSrBaLatn_0:
text "UTF-16LE", 'sr-ba-latn',0
align 4
aSrSpCyrl_0:
text "UTF-16LE", 'sr-sp-cyrl',0
align 4
aSrSpLatn_0:
text "UTF-16LE", 'sr-sp-latn',0
align 4
aSvFi_0:
text "UTF-16LE", 'sv-fi',0
aSvSe_0:
text "UTF-16LE", 'sv-se',0
aSwKe_0:
text "UTF-16LE", 'sw-ke',0
aSyrSy_0:
text "UTF-16LE", 'syr-sy',0
align 10h
aTaIn_0:
text "UTF-16LE", 'ta-in',0
aTeIn_0:
text "UTF-16LE", 'te-in',0
aThTh_0:
text "UTF-16LE", 'th-th',0
aTnZa_0:
text "UTF-16LE", 'tn-za',0
aTrTr_0:
text "UTF-16LE", 'tr-tr',0
aTtRu_0:
text "UTF-16LE", 'tt-ru',0
aUkUa_0:
text "UTF-16LE", 'uk-ua',0
aUrPk_0:
text "UTF-16LE", 'ur-pk',0
aUzUzCyrl_0:
text "UTF-16LE", 'uz-uz-cyrl',0
align 4
aUzUzLatn_0:
text "UTF-16LE", 'uz-uz-latn',0
align 10h
aViVn_0:
text "UTF-16LE", 'vi-vn',0
aXhZa_0:
text "UTF-16LE", 'xh-za',0
aZhChs_0:
text "UTF-16LE", 'zh-chs',0
align 4
aZhCht_0:
text "UTF-16LE", 'zh-cht',0
align 4
aZhCn_0:
text "UTF-16LE", 'zh-cn',0
aZhHk_0:
text "UTF-16LE", 'zh-hk',0
aZhMo_0:
text "UTF-16LE", 'zh-mo',0
aZhSg_0:
text "UTF-16LE", 'zh-sg',0
aZhTw_0:
text "UTF-16LE", 'zh-tw',0
aZuZa_0:
text "UTF-16LE", 'zu-za',0
aNull db '(null)',0
align 4
aNull_0:
text "UTF-16LE", '(null)',0
align 4
db    6
db    0
db    0
db    6
db    0
db    1
db    0
db    0
db  10h
db    0
db    3
db    6
db    0
db    6
db    2
db  10h
db    4
db  45h ; E
db  45h ; E
db  45h ; E
db    5
db    5
db    5
db    5
db    5
db  35h ; 5
db  30h ; 0
db    0
db  50h ; P
db    0
db    0
db    0
db    0
db  28h ; (
db  20h
db  38h ; 8
db  50h ; P
db  58h ; X
db    7
db    8
db    0
db  37h ; 7
db  30h ; 0
db  30h ; 0
db  57h ; W
db  50h ; P
db    7
db    0
db    0
db  20h
db  20h
db    8
db    0
db    0
db    0
db    0
db    8
db  60h ; `
db  68h ; h
db  60h ; `
db  60h ; `
db  60h ; `
db  60h ; `
db    0
db    0
db  78h ; x
db  70h ; p
db  78h ; x
db  78h ; x
db  78h ; x
db  78h ; x
db    8
db    7
db    8
db    0
db    0
db    7
db    0
db    8
db    8
db    8
db    0
db    0
db    8
db    0
db    8
db    0
db    7
db    8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
asc_896CA8:
text "UTF-16LE", '         (((((       '
text "UTF-16LE", '           H'
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  81h
db    0
db  81h
db    0
db  81h
db    0
db  81h
db    0
db  81h
db    0
db  81h
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  82h
db    0
db  82h
db    0
db  82h
db    0
db  82h
db    0
db  82h
db    0
db  82h
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  20h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_896EAA db  20h
db    0
aHH:
text "UTF-16LE", '        h((((        '
text "UTF-16LE", '          H'
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  81h
db    1
db  81h
db    1
db  81h
db    1
db  81h
db    1
db  81h
db    1
db  81h
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  82h
db    1
db  82h
db    1
db  82h
db    1
db  82h
db    1
db  82h
db    1
db  82h
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  48h ; H
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  14h
db    0
db  14h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  14h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db  10h
db    0
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db  10h
db    0
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    1
db    1
db    0
db    0
db    0
db    0
db  80h
db  81h
db  82h
db  83h
db  84h
db  85h
db  86h
db  87h
db  88h
db  89h
db  8Ah
db  8Bh
db  8Ch
db  8Dh
db  8Eh
db  8Fh
db  90h
db  91h
db  92h
db  93h
db  94h
db  95h
db  96h
db  97h
db  98h
db  99h
db  9Ah
db  9Bh
db  9Ch
db  9Dh
db  9Eh
db  9Fh
db 0A0h
db 0A1h
db 0A2h
db 0A3h
db 0A4h
db 0A5h
db 0A6h
db 0A7h
db 0A8h
db 0A9h
db 0AAh
db 0ABh
db 0ACh
db 0ADh
db 0AEh
db 0AFh
db 0B0h
db 0B1h
db 0B2h
db 0B3h
db 0B4h
db 0B5h
db 0B6h
db 0B7h
db 0B8h
db 0B9h
db 0BAh
db 0BBh
db 0BCh
db 0BDh
db 0BEh
db 0BFh
db 0C0h
db 0C1h
db 0C2h
db 0C3h
db 0C4h
db 0C5h
db 0C6h
db 0C7h
db 0C8h
db 0C9h
db 0CAh
db 0CBh
db 0CCh
db 0CDh
db 0CEh
db 0CFh
db 0D0h
db 0D1h
db 0D2h
db 0D3h
db 0D4h
db 0D5h
db 0D6h
db 0D7h
db 0D8h
db 0D9h
db 0DAh
db 0DBh
db 0DCh
db 0DDh
db 0DEh
db 0DFh
db 0E0h
db 0E1h
db 0E2h
db 0E3h
db 0E4h
db 0E5h
db 0E6h
db 0E7h
db 0E8h
db 0E9h
db 0EAh
db 0EBh
db 0ECh
db 0EDh
db 0EEh
db 0EFh
db 0F0h
db 0F1h
db 0F2h
db 0F3h
db 0F4h
db 0F5h
db 0F6h
db 0F7h
db 0F8h
db 0F9h
db 0FAh
db 0FBh
db 0FCh
db 0FDh
db 0FEh
db 0FFh
unk_897130 db    0
db    1
db    2
db    3
db    4
db    5
db    6
db    7
db    8
db    9
db  0Ah
db  0Bh
db  0Ch
db  0Dh
db  0Eh
db  0Fh
db  10h
db  11h
db  12h
db  13h
db  14h
db  15h
db  16h
db  17h
db  18h
db  19h
db  1Ah
db  1Bh
db  1Ch
db  1Dh
db  1Eh
db  1Fh
db  20h
db  21h ; !
db  22h ; "
db  23h ; #
db  24h ; $
db  25h ; %
db  26h ; &
db  27h ; '
db  28h ; (
db  29h ; )
db  2Ah ; *
db  2Bh ; +
db  2Ch ; ,
db  2Dh ; -
db  2Eh ; .
db  2Fh ; /
db  30h ; 0
db  31h ; 1
db  32h ; 2
db  33h ; 3
db  34h ; 4
db  35h ; 5
db  36h ; 6
db  37h ; 7
db  38h ; 8
db  39h ; 9
db  3Ah ; :
db  3Bh ; ;
db  3Ch ; <
db  3Dh ; =
db  3Eh ; >
db  3Fh ; ?
db  40h ; @
db  61h ; a
db  62h ; b
db  63h ; c
db  64h ; d
db  65h ; e
db  66h ; f
db  67h ; g
db  68h ; h
db  69h ; i
db  6Ah ; j
db  6Bh ; k
db  6Ch ; l
db  6Dh ; m
db  6Eh ; n
db  6Fh ; o
db  70h ; p
db  71h ; q
db  72h ; r
db  73h ; s
db  74h ; t
db  75h ; u
db  76h ; v
db  77h ; w
db  78h ; x
db  79h ; y
db  7Ah ; z
db  5Bh ; [
db  5Ch ; \
db  5Dh ; ]
db  5Eh ; ^
db  5Fh ; _
db  60h ; `
db  61h ; a
db  62h ; b
db  63h ; c
db  64h ; d
db  65h ; e
db  66h ; f
db  67h ; g
db  68h ; h
db  69h ; i
db  6Ah ; j
db  6Bh ; k
db  6Ch ; l
db  6Dh ; m
db  6Eh ; n
db  6Fh ; o
db  70h ; p
db  71h ; q
db  72h ; r
db  73h ; s
db  74h ; t
db  75h ; u
db  76h ; v
db  77h ; w
db  78h ; x
db  79h ; y
db  7Ah ; z
db  7Bh ; {
db  7Ch ; |
db  7Dh ; }
db  7Eh ; ~
db  7Fh ; 
db  80h
db  81h
db  82h
db  83h
db  84h
db  85h
db  86h
db  87h
db  88h
db  89h
db  8Ah
db  8Bh
db  8Ch
db  8Dh
db  8Eh
db  8Fh
db  90h
db  91h
db  92h
db  93h
db  94h
db  95h
db  96h
db  97h
db  98h
db  99h
db  9Ah
db  9Bh
db  9Ch
db  9Dh
db  9Eh
db  9Fh
db 0A0h
db 0A1h
db 0A2h
db 0A3h
db 0A4h
db 0A5h
db 0A6h
db 0A7h
db 0A8h
db 0A9h
db 0AAh
db 0ABh
db 0ACh
db 0ADh
db 0AEh
db 0AFh
db 0B0h
db 0B1h
db 0B2h
db 0B3h
db 0B4h
db 0B5h
db 0B6h
db 0B7h
db 0B8h
db 0B9h
db 0BAh
db 0BBh
db 0BCh
db 0BDh
db 0BEh
db 0BFh
db 0C0h
db 0C1h
db 0C2h
db 0C3h
db 0C4h
db 0C5h
db 0C6h
db 0C7h
db 0C8h
db 0C9h
db 0CAh
db 0CBh
db 0CCh
db 0CDh
db 0CEh
db 0CFh
db 0D0h
db 0D1h
db 0D2h
db 0D3h
db 0D4h
db 0D5h
db 0D6h
db 0D7h
db 0D8h
db 0D9h
db 0DAh
db 0DBh
db 0DCh
db 0DDh
db 0DEh
db 0DFh
db 0E0h
db 0E1h
db 0E2h
db 0E3h
db 0E4h
db 0E5h
db 0E6h
db 0E7h
db 0E8h
db 0E9h
db 0EAh
db 0EBh
db 0ECh
db 0EDh
db 0EEh
db 0EFh
db 0F0h
db 0F1h
db 0F2h
db 0F3h
db 0F4h
db 0F5h
db 0F6h
db 0F7h
db 0F8h
db 0F9h
db 0FAh
db 0FBh
db 0FCh
db 0FDh
db 0FEh
db 0FFh
db  80h
db  81h
db  82h
db  83h
db  84h
db  85h
db  86h
db  87h
db  88h
db  89h
db  8Ah
db  8Bh
db  8Ch
db  8Dh
db  8Eh
db  8Fh
db  90h
db  91h
db  92h
db  93h
db  94h
db  95h
db  96h
db  97h
db  98h
db  99h
db  9Ah
db  9Bh
db  9Ch
db  9Dh
db  9Eh
db  9Fh
db 0A0h
db 0A1h
db 0A2h
db 0A3h
db 0A4h
db 0A5h
db 0A6h
db 0A7h
db 0A8h
db 0A9h
db 0AAh
db 0ABh
db 0ACh
db 0ADh
db 0AEh
db 0AFh
db 0B0h
db 0B1h
db 0B2h
db 0B3h
db 0B4h
db 0B5h
db 0B6h
db 0B7h
db 0B8h
db 0B9h
db 0BAh
db 0BBh
db 0BCh
db 0BDh
db 0BEh
db 0BFh
db 0C0h
db 0C1h
db 0C2h
db 0C3h
db 0C4h
db 0C5h
db 0C6h
db 0C7h
db 0C8h
db 0C9h
db 0CAh
db 0CBh
db 0CCh
db 0CDh
db 0CEh
db 0CFh
db 0D0h
db 0D1h
db 0D2h
db 0D3h
db 0D4h
db 0D5h
db 0D6h
db 0D7h
db 0D8h
db 0D9h
db 0DAh
db 0DBh
db 0DCh
db 0DDh
db 0DEh
db 0DFh
db 0E0h
db 0E1h
db 0E2h
db 0E3h
db 0E4h
db 0E5h
db 0E6h
db 0E7h
db 0E8h
db 0E9h
db 0EAh
db 0EBh
db 0ECh
db 0EDh
db 0EEh
db 0EFh
db 0F0h
db 0F1h
db 0F2h
db 0F3h
db 0F4h
db 0F5h
db 0F6h
db 0F7h
db 0F8h
db 0F9h
db 0FAh
db 0FBh
db 0FCh
db 0FDh
db 0FEh
db 0FFh
unk_8972B0 db    0
db    1
db    2
db    3
db    4
db    5
db    6
db    7
db    8
db    9
db  0Ah
db  0Bh
db  0Ch
db  0Dh
db  0Eh
db  0Fh
db  10h
db  11h
db  12h
db  13h
db  14h
db  15h
db  16h
db  17h
db  18h
db  19h
db  1Ah
db  1Bh
db  1Ch
db  1Dh
db  1Eh
db  1Fh
db  20h
db  21h ; !
db  22h ; "
db  23h ; #
db  24h ; $
db  25h ; %
db  26h ; &
db  27h ; '
db  28h ; (
db  29h ; )
db  2Ah ; *
db  2Bh ; +
db  2Ch ; ,
db  2Dh ; -
db  2Eh ; .
db  2Fh ; /
db  30h ; 0
db  31h ; 1
db  32h ; 2
db  33h ; 3
db  34h ; 4
db  35h ; 5
db  36h ; 6
db  37h ; 7
db  38h ; 8
db  39h ; 9
db  3Ah ; :
db  3Bh ; ;
db  3Ch ; <
db  3Dh ; =
db  3Eh ; >
db  3Fh ; ?
db  40h ; @
db  41h ; A
db  42h ; B
db  43h ; C
db  44h ; D
db  45h ; E
db  46h ; F
db  47h ; G
db  48h ; H
db  49h ; I
db  4Ah ; J
db  4Bh ; K
db  4Ch ; L
db  4Dh ; M
db  4Eh ; N
db  4Fh ; O
db  50h ; P
db  51h ; Q
db  52h ; R
db  53h ; S
db  54h ; T
db  55h ; U
db  56h ; V
db  57h ; W
db  58h ; X
db  59h ; Y
db  5Ah ; Z
db  5Bh ; [
db  5Ch ; \
db  5Dh ; ]
db  5Eh ; ^
db  5Fh ; _
db  60h ; `
db  41h ; A
db  42h ; B
db  43h ; C
db  44h ; D
db  45h ; E
db  46h ; F
db  47h ; G
db  48h ; H
db  49h ; I
db  4Ah ; J
db  4Bh ; K
db  4Ch ; L
db  4Dh ; M
db  4Eh ; N
db  4Fh ; O
db  50h ; P
db  51h ; Q
db  52h ; R
db  53h ; S
db  54h ; T
db  55h ; U
db  56h ; V
db  57h ; W
db  58h ; X
db  59h ; Y
db  5Ah ; Z
db  7Bh ; {
db  7Ch ; |
db  7Dh ; }
db  7Eh ; ~
db  7Fh ; 
db  80h
db  81h
db  82h
db  83h
db  84h
db  85h
db  86h
db  87h
db  88h
db  89h
db  8Ah
db  8Bh
db  8Ch
db  8Dh
db  8Eh
db  8Fh
db  90h
db  91h
db  92h
db  93h
db  94h
db  95h
db  96h
db  97h
db  98h
db  99h
db  9Ah
db  9Bh
db  9Ch
db  9Dh
db  9Eh
db  9Fh
db 0A0h
db 0A1h
db 0A2h
db 0A3h
db 0A4h
db 0A5h
db 0A6h
db 0A7h
db 0A8h
db 0A9h
db 0AAh
db 0ABh
db 0ACh
db 0ADh
db 0AEh
db 0AFh
db 0B0h
db 0B1h
db 0B2h
db 0B3h
db 0B4h
db 0B5h
db 0B6h
db 0B7h
db 0B8h
db 0B9h
db 0BAh
db 0BBh
db 0BCh
db 0BDh
db 0BEh
db 0BFh
db 0C0h
db 0C1h
db 0C2h
db 0C3h
db 0C4h
db 0C5h
db 0C6h
db 0C7h
db 0C8h
db 0C9h
db 0CAh
db 0CBh
db 0CCh
db 0CDh
db 0CEh
db 0CFh
db 0D0h
db 0D1h
db 0D2h
db 0D3h
db 0D4h
db 0D5h
db 0D6h
db 0D7h
db 0D8h
db 0D9h
db 0DAh
db 0DBh
db 0DCh
db 0DDh
db 0DEh
db 0DFh
db 0E0h
db 0E1h
db 0E2h
db 0E3h
db 0E4h
db 0E5h
db 0E6h
db 0E7h
byte_897398 db 0E8h
db 0E9h
db 0EAh
db 0EBh
db 0ECh
db 0EDh
db 0EEh
db 0EFh
db 0F0h
db 0F1h
db 0F2h
db 0F3h
db 0F4h
db 0F5h
db 0F6h
db 0F7h
db 0F8h
db 0F9h
db 0FAh
db 0FBh
db 0FCh
db 0FDh
db 0FEh
db 0FFh
db  41h ; A
db    0
db    0
db    0
db  17h
db    0
db    0
db    0
byte_8973B8 db 6
db  80h
db  80h
db  86h
db  80h
db  81h
db  80h
db    0
db    0
db  10h
db    3
db  86h
db  80h
db  86h
db  82h
db  80h
db  14h
db    5
db    5
db  45h ; E
db  45h ; E
db  45h ; E
db  85h
db  85h
db  85h
db    5
db    0
db    0
db  30h ; 0
db  30h ; 0
db  80h
db  50h ; P
db  80h
db  88h
db    0
db    8
db    0
db  28h ; (
db  27h ; '
db  38h ; 8
db  50h ; P
db  57h ; W
db  80h
db    0
db    7
db    0
db  37h ; 7
db  30h ; 0
db  30h ; 0
db  50h ; P
db  50h ; P
db  88h
db    0
db    0
db    0
db  20h
db  28h ; (
db  80h
db  88h
db  80h
db  80h
db    0
db    0
db    0
db  60h ; `
db  68h ; h
db  60h ; `
db  68h ; h
db  68h ; h
db  68h ; h
db    8
db    8
db    7
db  78h ; x
db  70h ; p
db  70h ; p
db  77h ; w
db  70h ; p
db  70h ; p
db    8
db    8
db    0
db    0
db    8
db    0
db    8
db    0
db    7
db    8
db    0
db    0
db    0
; const WCHAR FileName
FileName:
text "UTF-16LE", 'CONOUT$',0
aGeneric db 'generic',0
aUnknownError db 'unknown error',0
align 4
aIostream db 'iostream',0
align 4
aIostreamStream db 'iostream stream error',0
align 10h
aSystem db 'system',0
align 4
; const char aInvalidStringP[]
aInvalidStringP db 'invalid string position',0
; const char aStringTooLong[]
aStringTooLong db 'string too long',0
; const wchar_t Src
Src db '\',0
align 4
aMsi:
text "UTF-16LE", '.msi',0
align 10h
asc_8974A0:
text "UTF-16LE", '_',0
unk_8974A4 db    0
db    0
db    0
db    0
; const WCHAR UpgradeCode
UpgradeCode:
text "UTF-16LE", '{78D630C6-9EFC-439B-8'
text "UTF-16LE", '7B9-B0AA6E5848BE}',0
align 4
asc_8974F8:
text "UTF-16LE", '/',0
; const WCHAR SubKey
SubKey:
text "UTF-16LE", 'Software\GM\Setups',0
align 4
; const WCHAR ValueName
ValueName:
text "UTF-16LE", 'Tech2WinInstallLogs',0
; const WCHAR aPublic
aPublic:
text "UTF-16LE", '%PUBLIC%',0
align 10h
aAllusersprofil:
text "UTF-16LE", '%allusersprofile%',0
align 8
aGeneralMotorsT:
text "UTF-16LE", 'General Motors\Tech2W'
text "UTF-16LE", 'in\SetupLogs\',0
align 10h
; const wchar_t Format
Format:
text "UTF-16LE", '%04d%02d%02d_%02d%02d'
text "UTF-16LE", '%02d_',0
align 4
aTech2winUninst:
text "UTF-16LE", 'Tech2Win_uninstall.lo'
text "UTF-16LE", 'g',0
align 4
aTech2winInstal:
text "UTF-16LE", 'Tech2Win_install.log',0
align 4
aTransforms:
text "UTF-16LE", 'TRANSFORMS=:',0
align 10h
; const WCHAR aSoftwareGmTech
aSoftwareGmTech:
text "UTF-16LE", 'SOFTWARE\GM\TECH2Win',0
align 4
; const wchar_t String2
String2:
text "UTF-16LE", 'id-ID',0
a1057:
text "UTF-16LE", '1057',0
align 4
; const WCHAR aLanguage
aLanguage:
text "UTF-16LE", 'Language',0
align 4
aEnvironment:
text "UTF-16LE", 'Environment',0
; const WCHAR aSoftware
aSoftware:
text "UTF-16LE", 'Software',0
align 4
; const WCHAR aGm
aGm:
text "UTF-16LE", 'GM',0
align 4
; const WCHAR aTech2win
aTech2win:
text "UTF-16LE", 'Tech2Win',0
align 10h
; const WCHAR aApplicationpub
aApplicationpub:
text "UTF-16LE", 'ApplicationPublic',0
; const wchar_t aPcmcia
aPcmcia:
text "UTF-16LE", '\pcmcia',0
; const wchar_t aBin
aBin:
text "UTF-16LE", '\*.bin',0
align 4
; const wchar_t aT2wbak
aT2wbak:
text "UTF-16LE", '\$T2WBAK$',0
; const wchar_t aConfig
aConfig:
text "UTF-16LE", '\config',0
; const wchar_t aConf
aConf:
text "UTF-16LE", '\*.conf',0
; const wchar_t aT2wbakConfig
aT2wbakConfig:
text "UTF-16LE", '\$T2WBAK$\config',0
align 4
asc_8977BC:
text "UTF-16LE", '-',0
; const wchar_t aEn
aEn:
text "UTF-16LE", 'en',0
align 4
; const wchar_t aDe
aDe:
text "UTF-16LE", 'de',0
align 10h
; const char aVectorTTooLong[]
aVectorTTooLong db 'vector<T> too long',0
align 8
; const wchar_t String1
String1:
text "UTF-16LE", 'en-US',0
dd offset aEnglish      ; "English"
unk_8977F8 db 0E3h
db    0
db    0
db    0
word_8977FC dw 409h
align 10h
aEnGb_1:
text "UTF-16LE", 'en-GB',0
dd offset aEnglish      ; "English"
db 0E4h
db    0
db    0
db    0
db    9
db    4
db    0
db    0
db  64h ; d
db    0
db  65h ; e
db    0
db  2Dh ; -
db    0
db  44h ; D
db    0
db  45h ; E
db    0
db    0
db    0
dd offset aDeutsch      ; "Deutsch"
db 0CCh
db    0
db    0
db    0
db    7
db    4
db    0
db    0
db  62h ; b
db    0
db  67h ; g
db    0
db  2Dh ; -
db    0
db  42h ; B
db    0
db  47h ; G
db    0
db    0
db    0
dd offset unk_897AC0
db 0C9h
db    0
db    0
db    0
db    2
db    4
db    0
db    0
db  63h ; c
db    0
db  73h ; s
db    0
db  2Dh ; -
db    0
db  43h ; C
db    0
db  5Ah ; Z
db    0
db    0
db    0
dd offset unk_897AD4
db 0CAh
db    0
db    0
db    0
db    5
db    4
db    0
db    0
db  64h ; d
db    0
db  61h ; a
db    0
db  2Dh ; -
db    0
db  44h ; D
db    0
db  4Bh ; K
db    0
db    0
db    0
dd offset aDansk        ; "Dansk"
db 0CBh
db    0
db    0
db    0
db    6
db    4
db    0
db    0
db  65h ; e
db    0
db  6Ch ; l
db    0
db  2Dh ; -
db    0
db  47h ; G
db    0
db  52h ; R
db    0
db    0
db    0
dd offset unk_897AF0
db 0CDh
db    0
db    0
db    0
db    8
db    4
db    0
db    0
db  65h ; e
db    0
db  73h ; s
db    0
db  2Dh ; -
db    0
db  45h ; E
db    0
db  53h ; S
db    0
db    0
db    0
dd offset aEspa         ; "Espa"
db 0CEh
db    0
db    0
db    0
db  0Ah
db    4
db    0
db    0
db  66h ; f
db    0
db  72h ; r
db    0
db  2Dh ; -
db    0
db  46h ; F
db    0
db  52h ; R
db    0
db    0
db    0
dd offset aFran         ; "Fran"
db 0D0h
db    0
db    0
db    0
db  0Ch
db    4
db    0
db    0
db  68h ; h
db    0
db  72h ; r
db    0
db  2Dh ; -
db    0
db  48h ; H
db    0
db  52h ; R
db    0
db    0
db    0
dd offset aHrvatski     ; "Hrvatski"
db 0D1h
db    0
db    0
db    0
db  1Ah
db    4
db    0
db    0
db  69h ; i
db    0
db  64h ; d
db    0
db  2Dh ; -
db    0
db  49h ; I
db    0
db  44h ; D
db    0
db    0
db    0
dd offset aIndonesia    ; "Indonesia"
db 0E5h
db    0
db    0
db    0
db    9
db    4
db    0
db    0
db  69h ; i
db    0
db  74h ; t
db    0
db  2Dh ; -
db    0
db  49h ; I
db    0
db  54h ; T
db    0
db    0
db    0
dd offset aItaliano     ; "Italiano"
db 0D3h
db    0
db    0
db    0
db  10h
db    4
db    0
db    0
db  6Ah ; j
db    0
db  61h ; a
db    0
db  2Dh ; -
db    0
db  4Ah ; J
db    0
db  50h ; P
db    0
db    0
db    0
dd offset unk_897B64
db 0D4h
db    0
db    0
db    0
db  11h
db    4
db    0
db    0
db  68h ; h
db    0
db  75h ; u
db    0
db  2Dh ; -
db    0
db  48h ; H
db    0
db  55h ; U
db    0
db    0
db    0
dd offset aMagyar       ; "Magyar"
db 0D2h
db    0
db    0
db    0
db  0Eh
db    4
db    0
db    0
db  6Eh ; n
db    0
db  6Ch ; l
db    0
db  2Dh ; -
db    0
db  4Eh ; N
db    0
db  4Ch ; L
db    0
db    0
db    0
dd offset aNederlands   ; "Nederlands"
db 0D6h
db    0
db    0
db    0
db  13h
db    4
db    0
db    0
db  6Eh ; n
db    0
db  62h ; b
db    0
db  2Dh ; -
db    0
db  4Eh ; N
db    0
db  4Fh ; O
db    0
db    0
db    0
dd offset aNorsk        ; "Norsk"
db 0D7h
db    0
db    0
db    0
db  14h
db    4
db    0
db    0
db  70h ; p
db    0
db  6Ch ; l
db    0
db  2Dh ; -
db    0
db  50h ; P
db    0
db  4Ch ; L
db    0
db    0
db    0
dd offset aPolski       ; "Polski"
db 0D8h
db    0
db    0
db    0
db  15h
db    4
db    0
db    0
db  70h ; p
db    0
db  74h ; t
db    0
db  2Dh ; -
db    0
db  42h ; B
db    0
db  52h ; R
db    0
db    0
db    0
dd offset aPortugu      ; "Portugu"
db 0D9h
db    0
db    0
db    0
db  16h
db    4
db    0
db    0
db  70h ; p
db    0
db  74h ; t
db    0
db  2Dh ; -
db    0
db  50h ; P
db    0
db  54h ; T
db    0
db    0
db    0
dd offset aPortugu      ; "Portugu"
db 0DAh
db    0
db    0
db    0
db  16h
db    8
db    0
db    0
db  72h ; r
db    0
db  75h ; u
db    0
db  2Dh ; -
db    0
db  52h ; R
db    0
db  55h ; U
db    0
db    0
db    0
dd offset unk_897BC4
db 0DCh
db    0
db    0
db    0
db  19h
db    4
db    0
db    0
db  72h ; r
db    0
db  6Fh ; o
db    0
db  2Dh ; -
db    0
db  52h ; R
db    0
db  4Fh ; O
db    0
db    0
db    0
dd offset aRom          ; "Rom"
db 0DBh
db    0
db    0
db    0
db  18h
db    4
db    0
db    0
db  73h ; s
db    0
db  6Ch ; l
db    0
db  2Dh ; -
db    0
db  53h ; S
db    0
db  49h ; I
db    0
db    0
db    0
dd offset aSloven       ; "Sloven"
db 0DDh
db    0
db    0
db    0
db  24h ; $
db    4
db    0
db    0
db  66h ; f
db    0
db  69h ; i
db    0
db  2Dh ; -
db    0
db  46h ; F
db    0
db  49h ; I
db    0
db    0
db    0
dd offset aSuomi        ; "Suomi"
db 0CFh
db    0
db    0
db    0
db  0Bh
db    4
db    0
db    0
db  73h ; s
db    0
db  76h ; v
db    0
db  2Dh ; -
db    0
db  53h ; S
db    0
db  45h ; E
db    0
db    0
db    0
dd offset aSvenska      ; "Svenska"
db 0DEh
db    0
db    0
db    0
db  1Dh
db    4
db    0
db    0
db  74h ; t
db    0
db  72h ; r
db    0
db  2Dh ; -
db    0
db  54h ; T
db    0
db  52h ; R
db    0
db    0
db    0
dd offset aT            ; "T"
db 0E0h
db    0
db    0
db    0
db  1Fh
db    4
db    0
db    0
db  74h ; t
db    0
db  68h ; h
db    0
db  2Dh ; -
db    0
db  54h ; T
db    0
db  48h ; H
db    0
db    0
db    0
dd offset unk_897C28
db 0DFh
db    0
db    0
db    0
db  1Eh
db    4
db    0
db    0
db  6Bh ; k
db    0
db  6Fh ; o
db    0
db  2Dh ; -
db    0
db  4Bh ; K
db    0
db  52h ; R
db    0
db    0
db    0
dd offset unk_897C30
db 0D5h
db    0
db    0
db    0
db  12h
db    4
db    0
db    0
db  7Ah ; z
db    0
db  68h ; h
db    0
db  2Dh ; -
db    0
db  43h ; C
db    0
db  4Eh ; N
db    0
db    0
db    0
dd offset unk_897C38
db 0E1h
db    0
db    0
db    0
db    4
db    8
db    0
db    0
db  7Ah ; z
db    0
db  68h ; h
db    0
db  2Dh ; -
db    0
db  54h ; T
db    0
db  57h ; W
db    0
db    0
db    0
dd offset unk_897C40
db 0E2h
db    0
db    0
db    0
db    4
db    4
db    0
db    0
aEnglish:
text "UTF-16LE", 'English',0
aDeutsch:
text "UTF-16LE", 'Deutsch',0
unk_897AC0 db  11h
db    4
db  4Ah ; J
db    4
db  3Bh ; ;
db    4
db  33h ; 3
db    4
db  30h ; 0
db    4
db  40h ; @
db    4
db  41h ; A
db    4
db  3Ah ; :
db    4
db  38h ; 8
db    4
db    0
db    0
unk_897AD4 db  0Ch
db    1
db  65h ; e
db    0
db  61h ; a
db    1
db  74h ; t
db    0
db  69h ; i
db    0
db  6Eh ; n
db    0
db  61h ; a
db    0
db    0
db    0
aDansk:
text "UTF-16LE", 'Dansk',0
unk_897AF0 db  95h
db    3
db 0BBh
db    3
db 0BBh
db    3
db 0B7h
db    3
db 0BDh
db    3
db 0B9h
db    3
db 0BAh
db    3
db 0ACh
db    3
db    0
db    0
db    0
db    0
aEspa:
text "UTF-16LE", 'Espa'
db 0F1h
db    0
db  6Fh ; o
db    0
db  6Ch ; l
db    0
db    0
db    0
aFran:
text "UTF-16LE", 'Fran'
db 0E7h
db    0
db  61h ; a
db    0
db  69h ; i
db    0
db  73h ; s
db    0
db    0
db    0
db    0
db    0
aHrvatski:
text "UTF-16LE", 'Hrvatski',0
align 4
aIndonesia:
text "UTF-16LE", 'Indonesia',0
aItaliano:
text "UTF-16LE", 'Italiano',0
align 4
unk_897B64 db 0E5h
db  65h ; e
db  2Ch ; ,
db  67h ; g
db  9Eh
db  8Ah
db    0
db    0
aMagyar:
text "UTF-16LE", 'Magyar',0
align 4
aNederlands:
text "UTF-16LE", 'Nederlands',0
align 4
aNorsk:
text "UTF-16LE", 'Norsk',0
aPolski:
text "UTF-16LE", 'Polski',0
align 10h
aPortugu:
text "UTF-16LE", 'Portugu'
db 0EAh
db    0
db  73h ; s
db    0
db    0
db    0
unk_897BC4 db  20h
db    4
db  43h ; C
db    4
db  41h ; A
db    4
db  41h ; A
db    4
db  3Ah ; :
db    4
db  38h ; 8
db    4
db  39h ; 9
db    4
db    0
db    0
aRom:
text "UTF-16LE", 'Rom'
db 0E2h
db    0
db  6Eh ; n
db    0
db    3
db    1
db    0
db    0
db    0
db    0
aSloven:
text "UTF-16LE", 'Sloven'
db  61h ; a
db    1
db  0Dh
db    1
db  69h ; i
db    0
db  6Eh ; n
db    0
db  61h ; a
db    0
db    0
db    0
aSuomi:
text "UTF-16LE", 'Suomi',0
aSvenska:
text "UTF-16LE", 'Svenska',0
aT db 'T',0
db 0FCh
db    0
db  72h ; r
db    0
db  6Bh ; k
db    0
db 0E7h
db    0
db  65h ; e
db    0
db    0
db    0
db    0
db    0
unk_897C28 db  44h ; D
db  0Eh
db  17h
db  0Eh
db  22h ; "
db  0Eh
db    0
db    0
unk_897C30 db  5Ch ; \
db 0D5h
db  6Dh ; m
db 0ADh
db 0B4h
db 0C5h
db    0
db    0
unk_897C38 db  2Dh ; -
db  4Eh ; N
db  87h
db  65h ; e
db    0
db    0
db    0
db    0
unk_897C40 db  41h ; A
db  7Eh ; ~
db 0D4h
db  9Ah
db  2Dh ; -
db  4Eh ; N
db  87h
db  65h ; e
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
__load_config_used dd 48h ; Size
dd 0                    ; Time stamp
dw 2 dup(0)             ; Version: 0.0
dd 0                    ; GlobalFlagsClear
dd 0                    ; GlobalFlagsSet
dd 0                    ; CriticalSectionDefaultTimeout
dd 0                    ; DeCommitFreeBlockThreshold
dd 0                    ; DeCommitTotalFreeThreshold
dd 0                    ; LockPrefixTable
dd 0                    ; MaximumAllocationSize
dd 0                    ; VirtualMemoryThreshold
dd 0                    ; ProcessHeapFlags
dd 0                    ; ProcessAffinityMask
dw 0                    ; CSDVersion
dw 0                    ; Reserved1
dd 0                    ; EditList
dd offset ___security_cookie ; SecurityCookie
dd offset ___safe_se_handler_table ; SEHandlerTable
dd 14h                  ; SEHandlerCount
; Debug information (IMAGE_DEBUG_TYPE_CODEVIEW)
asc_897C98 db 'RSDS'    ; CV signature
GUID <0BA39537Fh, 0F324h, 4EF2h, <0BCh, \ ; GUID
      0E5h, 0AAh, 6Dh, 5Eh, 0F8h, 87h, \
      0D5h>>
dd 2                    ; Age
text "UTF-8", 'C:\Users\hzyj02\tech2win' ; PdbFileName
text "UTF-8", '\gme_source_dump\SS_SFT_'
text "UTF-8", '1425-source\t2_emulator_'
text "UTF-8", 'install\bin\Release\Tech'
text "UTF-8", '2WinSetup.pdb',0
align 10h
; Debug information (IMAGE_DEBUG_TYPE_VC_FEATURE)
unk_897D20 db    0
db    0
db    0
db    0
db 0A6h
db    0
db    0
db    0
db 0A6h
db    0
db    0
db    0
db    5
db    0
db    0
db    0
off_897D30 dd offset off_89A01C
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_897D4C
unk_897D4C db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
dd offset off_897D5C
off_897D5C dd offset off_897D30
db    0
db    0
db    0
db    0
unk_897D64 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_89A000
dd offset unk_897D78
unk_897D78 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    0
db    0
db    0
dd offset off_897D88
off_897D88 dd offset off_897D94
dd offset off_897D30
db    0
db    0
db    0
db    0
off_897D94 dd offset off_89A000
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_897D78
unk_897DB0 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_89A038
dd offset unk_897DC4
unk_897DC4 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    0
db    0
db    0
dd offset off_897DD4
off_897DD4 dd offset off_897DE0
dd offset off_897D30
align 10h
off_897DE0 dd offset off_89A038
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_897DC4
unk_897DFC db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_89A058
dd offset unk_897E10
unk_897E10 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    3
db    0
db    0
db    0
dd offset off_897E20
off_897E20 dd offset off_897E30
dd offset off_897DE0
dd offset off_897D30
align 10h
off_897E30 dd offset off_89A058
db    2
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_897E10
unk_897E4C db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_89A078
dd offset unk_897E60
unk_897E60 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    3
db    0
db    0
db    0
dd offset off_897E70
off_897E70 dd offset off_897E80
dd offset off_897DE0
dd offset off_897D30
align 10h
off_897E80 dd offset off_89A078
db    2
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_897E60
unk_897E9C db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_89A0A0
dd offset unk_897EB0
unk_897EB0 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
dd offset off_897EC0
off_897EC0 dd offset off_897EC8
align 8
off_897EC8 dd offset off_89A0A0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_897EB0
unk_897EE4 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_89A01C
dd offset unk_897D4C
unk_897EF8 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_89AAC0
dd offset unk_897F0C
unk_897F0C db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    0
db    0
db    0
dd offset off_897F1C
off_897F1C dd offset off_897F28
dd offset off_897D30
align 8
off_897F28 dd offset off_89AAC0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_897F0C
off_897F44 dd offset off_897F78
dd offset off_897FB0
dd offset off_897FCC
db    0
db    0
db    0
db    0
off_897F54 dd offset off_897F94
dd offset off_897FB0
dd offset off_897FCC
db    0
db    0
db    0
db    0
off_897F64 dd offset off_897FB0
dd offset off_897FCC
align 10h
off_897F70 dd offset off_897FCC
align 8
off_897F78 dd offset off_89AFA0
db    2
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_897FE8
off_897F94 dd offset off_89AFCC
db    2
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_897FF8
off_897FB0 dd offset off_89AFF8
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_898008
off_897FCC dd offset off_89B024
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_898018
unk_897FE8 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    3
db    0
db    0
db    0
dd offset off_897F44
unk_897FF8 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    3
db    0
db    0
db    0
dd offset off_897F54
unk_898008 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    0
db    0
db    0
dd offset off_897F64
unk_898018 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
dd offset off_897F70
unk_898028 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_89AFA0
dd offset unk_897FE8
unk_89803C db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_89AFCC
dd offset unk_897FF8
unk_898050 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_89AFF8
dd offset unk_898008
unk_898064 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_89B024
dd offset unk_898018
align 10h
___safe_se_handler_table dd rva ?CatchGuardHandler@@YA?AW4_EXCEPTION_DISPOSITION@@PAUEHExceptionRecord@@PAUCatchGuardRN@@PAX2@Z ; CatchGuardHandler(EHExceptionRecord *,CatchGuardRN *,void *,void *)
dd rva ?TranslatorGuardHandler@@YA?AW4_EXCEPTION_DISPOSITION@@PAUEHExceptionRecord@@PAUTranslatorGuardRN@@PAX2@Z ; TranslatorGuardHandler(EHExceptionRecord *,TranslatorGuardRN *,void *,void *)
dd rva SEH_40BF50
dd rva __unwind_handler4
dd rva __unwind_handler
dd rva loc_890BF0
dd rva SEH_401520
dd rva SEH_401C20
dd rva SEH_401870
dd rva SEH_4016E0
dd rva SEH_402790
dd rva SEH_404E80
dd rva SEH_404DC0
dd rva SEH_4031D0
dd rva SEH_403410
dd rva SEH_4032A0
dd rva SEH_4042D0
dd rva SEH_402FE0
dd rva SEH_404610
dd rva SEH_4039E0
db    0
db    0
db    0
db    0
unk_8980D4 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_8980DC db    0
db    0
db    0
db    0
; const _ThrowInfo pThrowInfo
pThrowInfo _ThrowInfo <0, offset sub_885398, 0, \
            offset unk_8980F0>
unk_8980F0 db    2
db    0
db    0
db    0
dd offset unk_8980FC
dd offset unk_898118
unk_8980FC db    0
db    0
db    0
db    0
dd offset off_89A000
align 8
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  0Ch
db    0
db    0
db    0
dd offset sub_88532C
unk_898118 db    0
db    0
db    0
db    0
dd offset off_89A01C
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  0Ch
db    0
db    0
db    0
dd offset ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception(std::exception const &)
unk_898134 db    0
db    0
db    0
db    0
dd offset off_89A038
align 10h
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  0Ch
db    0
db    0
db    0
dd offset sub_885362
; const _ThrowInfo stru_898150
stru_898150 _ThrowInfo <0, offset sub_8853A3, 0, \
            offset unk_898160>
unk_898160 db    3
db    0
db    0
db    0
dd offset unk_898170
dd offset unk_898134
dd offset unk_898118
unk_898170 db    0
db    0
db    0
db    0
dd offset off_89A058
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  0Ch
db    0
db    0
db    0
dd offset sub_885347
; const _ThrowInfo stru_89818C
stru_89818C _ThrowInfo <0, offset sub_8853A3, 0, \
            offset unk_89819C>
unk_89819C db    3
db    0
db    0
db    0
dd offset unk_8981AC
dd offset unk_898134
dd offset unk_898118
unk_8981AC db    0
db    0
db    0
db    0
dd offset off_89A078
align 8
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  0Ch
db    0
db    0
db    0
dd offset sub_88537D
stru_8981C8 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD4h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_885BE4>>
align 8
stru_8981E8 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFCCh, 0, <\
                 0FFFFFFFEh, \
                 offset loc_8865D1, \
                 offset loc_8865E5>>
align 8
stru_898208 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD4h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_887664>>
align 8
stru_898228 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFC4h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_8879FB>>
align 8
stru_898248 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD4h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_88896A>>
align 8
stru_898268 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD8h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_888927>>
align 8
stru_898288 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFB0h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_888DE2>>
align 8
stru_8982A8 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD4h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_88954D>>
align 8
stru_8982C8 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD4h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_8898F8>>
align 8
stru_8982E8 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD0h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_889A79>>
align 8
stru_898308 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD8h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_889E78>, <\
                 0FFFFFFFEh, 0, \
                 offset loc_889E84>>
stru_898330 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD8h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_889FB2>, <\
                 0FFFFFFFEh, 0, \
                 offset loc_889FC1>>
stru_898358 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD8h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_88A0A6>>
align 8
stru_898378 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFF7Ch, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_88A513>>
align 8
stru_898398 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD8h, 0, <\
                 0FFFFFFFEh, \
                 offset loc_88AE04, \
                 offset loc_88AE08>>
align 8
stru_8983B8 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD8h, 0, <\
                 0FFFFFFFEh, \
                 offset loc_88ADD0, \
                 offset loc_88ADD4>>
align 8
stru_8983D8 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD0h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_88BA65>, <0,\
                 offset loc_88BA2A, \
                 offset loc_88BA34>>
stru_898400 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFB0h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_88B05B>, <0,\
                 offset loc_88AFA7, \
                 offset loc_88AFB1>>
stru_898428 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD8h, 0, <\
                 0FFFFFFFEh, \
                 offset loc_88B7C9, \
                 offset loc_88B7CD>>
align 8
stru_898448 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD8h, 0, <\
                 0FFFFFFFEh, \
                 offset loc_88AE9C, \
                 offset loc_88AEA5>>
stru_898464 HandlerType <40h, 0, 0, \
             offset __catch$?CallUnexpected@@YAXPBU_s_ESTypeList@@@Z$0>
stru_898474 UnwindMapEntry <-1, 0>
UnwindMapEntry <-1, 0>
stru_898484 TryBlockMapEntry <0, 0, 1, 1, \
                  offset stru_898464>
stru_898498 FuncInfo <19930522h, 0, 2, \
          offset stru_898474, 1, \
          offset stru_898484, 0, 0, 0, \
          1>
db    0
db    0
db    0
db    0
stru_8984C0 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD4h, 0, <\
                 0FFFFFFFEh, \
                 offset loc_88B947, \
                 offset loc_88B94B>>
; const _ThrowInfo stru_8984DC
stru_8984DC _ThrowInfo <0, offset sub_88AEE2, 0, \
            offset unk_8984EC>
unk_8984EC db    2
db    0
db    0
db    0
dd offset unk_8984F8
dd offset unk_898118
unk_8984F8 db    0
db    0
db    0
db    0
dd offset off_89AAC0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  0Ch
db    0
db    0
db    0
dd offset sub_88AEC7
align 8
stru_898518 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD8h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_88BD41>>
align 8
stru_898538 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD8h, 0, <\
                 0FFFFFFFEh, \
                 offset loc_88BFD9, \
                 offset loc_88BFEC>>
align 8
stru_898558 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFBCh, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_88C208>>
align 8
stru_898578 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD0h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_88CBB9>>
align 8
stru_898598 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFC8h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_88D4DB>>
align 8
stru_8985B8 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFCCh, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_88F357>, <0,\
                 0, offset loc_88F321>>
stru_8985E0 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD0h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_88F42D>>
align 10h
stru_898600 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD8h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_88F4B9>>
align 10h
stru_898620 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFCCh, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_88FD4E>>
align 10h
stru_898640 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD4h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_88FE4A>>
align 10h
stru_898660 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD0h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_890668>>
stru_89867C FuncInfo <19930522h, 0, 4, \
          offset stru_8986A0, 2, \
          offset stru_8986C0, 0, 0, 0, \
          1>
stru_8986A0 UnwindMapEntry <-1, 0>
UnwindMapEntry <-1, 0>
UnwindMapEntry <1, 0>
UnwindMapEntry <1, 0>
stru_8986C0 TryBlockMapEntry <2, 2, 3, 1, \
                  offset stru_8986E8>
TryBlockMapEntry <0, 0, 3, 1, \
                  offset stru_8986F8>
stru_8986E8 HandlerType <40h, 0, 0, \
             offset loc_8815F2>
stru_8986F8 HandlerType <40h, 0, 0, \
             offset loc_8815B5>
stru_898708 FuncInfo <19930522h, 0, 4, \
          offset stru_89872C, 2, \
          offset stru_89874C, 0, 0, 0, \
          1>
stru_89872C UnwindMapEntry <-1, 0>
UnwindMapEntry <-1, 0>
UnwindMapEntry <1, 0>
UnwindMapEntry <1, 0>
stru_89874C TryBlockMapEntry <2, 2, 3, 1, \
                  offset stru_898774>
TryBlockMapEntry <0, 0, 3, 1, \
                  offset stru_898784>
stru_898774 HandlerType <40h, 0, 0, \
             offset loc_882868>
stru_898784 HandlerType <40h, 0, 0, \
             offset loc_88282E>
stru_898794 FuncInfo <19930522h, 0, 1, \
          offset stru_8987B8, 0, 0, 0, \
          0, 0, 1>
stru_8987B8 UnwindMapEntry <-1, offset loc_890D60>
stru_8987C0 FuncInfo <19930522h, 0, 9, \
          offset stru_8987E8, 0, 0, 0, \
          0, 0, 1>
db    0
db    0
db    0
db    0
stru_8987E8 UnwindMapEntry <-1, offset loc_890C30>
UnwindMapEntry <0, offset loc_890C38>
UnwindMapEntry <1, offset loc_890C40>
UnwindMapEntry <2, offset loc_890C48>
UnwindMapEntry <1, offset loc_890C53>
UnwindMapEntry <4, offset loc_890C5E>
UnwindMapEntry <5, offset loc_890C66>
UnwindMapEntry <6, offset loc_890C71>
UnwindMapEntry <7, offset loc_890C7C>
stru_898830 FuncInfo <19930522h, 0, 4, \
          offset stru_898854, 0, 0, 0, \
          0, 0, 1>
stru_898854 UnwindMapEntry <-1, offset loc_890CB0>
UnwindMapEntry <0, offset loc_890CBB>
UnwindMapEntry <1, offset loc_890CC6>
UnwindMapEntry <2, offset loc_890CD1>
stru_898874 FuncInfo <19930522h, 0, 1, \
          offset stru_898898, 0, 0, 0, \
          0, 0, 1>
stru_898898 UnwindMapEntry <-1, offset loc_890D10>
stru_8988A0 FuncInfo <19930522h, 0, 1, \
          offset stru_8988C4, 0, 0, 0, \
          0, 0, 1>
stru_8988C4 UnwindMapEntry <-1, offset loc_890DA0>
stru_8988CC FuncInfo <19930522h, 0, 1, \
          offset stru_8988F0, 0, 0, 0, \
          0, 0, 1>
stru_8988F0 UnwindMapEntry <-1, offset loc_890F50>
stru_8988F8 FuncInfo <19930522h, 0, 1, \
          offset stru_89891C, 0, 0, 0, \
          0, 0, 1>
stru_89891C UnwindMapEntry <-1, offset loc_890EE0>
stru_898924 FuncInfo <19930522h, 0, 3, \
          offset stru_898948, 0, 0, 0, \
          0, 0, 1>
stru_898948 UnwindMapEntry <-1, offset loc_890F80>
UnwindMapEntry <0, offset loc_890F88>
UnwindMapEntry <1, offset loc_890F90>
stru_898960 FuncInfo <19930522h, 0, 7, \
          offset stru_898984, 0, 0, 0, \
          0, 0, 1>
stru_898984 UnwindMapEntry <-1, offset loc_890E10>
UnwindMapEntry <0, offset loc_890E1B>
UnwindMapEntry <0, offset loc_890E26>
UnwindMapEntry <0, offset loc_890E31>
UnwindMapEntry <3, offset loc_890E3C>
UnwindMapEntry <0, offset loc_890E47>
UnwindMapEntry <5, offset loc_890E52>
stru_8989BC FuncInfo <19930522h, 0, 3, \
          offset stru_8989E0, 0, 0, 0, \
          0, 0, 1>
stru_8989E0 UnwindMapEntry <-1, offset loc_890E90>
UnwindMapEntry <0, offset loc_890E98>
UnwindMapEntry <0, offset loc_890EB1>
stru_8989F8 FuncInfo <19930522h, 0, 1, \
          offset stru_898A1C, 0, 0, 0, \
          0, 0, 1>
stru_898A1C UnwindMapEntry <-1, offset loc_890DE0>
stru_898A24 FuncInfo <19930522h, 0, 1, \
          offset stru_898A48, 0, 0, 0, \
          0, 0, 1>
stru_898A48 UnwindMapEntry <-1, offset loc_890F10>
__IMPORT_DESCRIPTOR_msi dd rva dword_898CCC ; Import Name Table
dd 0                    ; Time stamp
dd 0                    ; Forwarder Chain
dd rva aMsiDll          ; DLL Name
dd rva MsiOpenProductW  ; Import Address Table
__IMPORT_DESCRIPTOR_COMCTL32 dd rva off_898B08 ; Import Name Table
dd 0                    ; Time stamp
dd 0                    ; Forwarder Chain
dd rva aComctl32Dll     ; DLL Name
dd rva ImageList_Add    ; Import Address Table
__IMPORT_DESCRIPTOR_SHELL32 dd rva off_898C84 ; Import Name Table
dd 0                    ; Time stamp
dd 0                    ; Forwarder Chain
dd rva aShell32Dll      ; DLL Name
dd rva SHGetFolderPathW ; Import Address Table
__IMPORT_DESCRIPTOR_KERNEL32 dd rva off_898B24 ; Import Name Table
dd 0                    ; Time stamp
dd 0                    ; Forwarder Chain
dd rva aKernel32Dll     ; DLL Name
dd rva CreateDirectoryW ; Import Address Table
__IMPORT_DESCRIPTOR_USER32 dd rva off_898C8C ; Import Name Table
dd 0                    ; Time stamp
dd 0                    ; Forwarder Chain
dd rva aUser32Dll       ; DLL Name
dd rva SetFocus         ; Import Address Table
__IMPORT_DESCRIPTOR_GDI32 dd rva off_898B1C ; Import Name Table
dd 0                    ; Time stamp
dd 0                    ; Forwarder Chain
dd rva aGdi32Dll        ; DLL Name
dd rva GetStockObject   ; Import Address Table
__IMPORT_DESCRIPTOR_ADVAPI32 dd rva off_898AF0 ; Import Name Table
dd 0                    ; Time stamp
dd 0                    ; Forwarder Chain
dd rva aAdvapi32Dll     ; DLL Name
dd rva RegCloseKey      ; Import Address Table
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
;
; Import names for ADVAPI32.dll
;
off_898AF0 dd rva word_89906E
dd rva word_89905C
dd rva word_899048
dd rva word_899036
dd rva word_89907C
dd 0
;
; Import names for COMCTL32.dll
;
off_898B08 dd rva word_898D20
dd rva word_898CF4
dd 80000011h
dd rva word_898D0C
dd 0
;
; Import names for GDI32.dll
;
off_898B1C dd rva word_89901A
dd 0
;
; Import names for KERNEL32.dll
;
off_898B24 dd rva word_898D5E
dd rva word_898D72
dd rva word_898D82
dd rva word_898D98
dd rva word_898DAA
dd rva word_898DBA
dd rva word_898DCC
dd rva word_898DDC
dd rva word_898DEA
dd rva word_898DF6
dd rva word_898E04
dd rva word_898E12
dd rva word_898E22
dd rva word_898E32
dd rva word_898E4E
dd rva word_898E60
dd rva word_898E6C
dd rva word_8994A2
dd rva word_898E90
dd rva word_898E9C
dd rva word_898EAC
dd rva word_898EBC
dd rva word_898ED8
dd rva word_898EEA
dd rva word_898F00
dd rva word_899492
dd rva word_899480
dd rva word_899470
dd rva word_89945A
dd rva word_89944C
dd rva word_89943A
dd rva word_899422
dd rva word_89940A
dd rva word_8994C4
dd rva word_8994B2
dd rva word_8994D8
dd rva word_8994EA
dd rva word_8994FA
dd rva word_89950A
dd rva word_898E7A
dd rva word_8990E6
dd rva word_89909A
dd rva word_8990AA
dd rva word_8990BA
dd rva word_8990D4
dd rva word_89951E
dd rva word_8990F8
dd rva word_899104
dd rva word_899118
dd rva word_899134
dd rva word_899140
dd rva word_89914C
dd rva word_899164
dd rva word_899172
dd rva word_899188
dd rva word_89919A
dd rva word_8991B0
dd rva word_8991BC
dd rva word_8991C4
dd rva word_8991D4
dd rva word_8991EA
dd rva word_899204
dd rva word_89921A
dd rva word_899232
dd rva word_899244
dd rva word_89924E
dd rva word_89925A
dd rva word_899266
dd rva word_899276
dd rva word_89928C
dd rva word_89929E
dd rva word_8992AC
dd rva word_8992D4
dd rva word_8992EC
dd rva word_8992FE
dd rva word_899318
dd rva word_89932E
dd rva word_899348
dd rva word_899362
dd rva word_89937E
dd rva word_89939C
dd rva word_8993B0
dd rva word_8993C4
dd rva word_8993D0
dd rva word_8993DE
dd rva word_8993EC
dd rva word_8993F6
dd 0
;
; Import names for SHELL32.dll
;
off_898C84 dd rva word_898D3E
dd 0
;
; Import names for USER32.dll
;
off_898C8C dd rva word_898FF6
dd rva word_898FE4
dd rva word_898FD6
dd rva word_898FC8
dd rva word_898FB8
dd rva word_898FA4
dd rva word_899002
dd rva word_898F86
dd rva word_898F76
dd rva word_898F68
dd rva word_898F56
dd rva word_898F48
dd rva word_898F36
dd rva word_898F20
dd rva word_898F94
dd 0
;
; Import names for msi.dll
;
dword_898CCC dd 80000060h
dd 800000CDh
dd 800000BEh
dd 80000058h
dd 8000008Dh
dd 800000A9h
dd 80000008h
dd 0
aMsiDll db 'msi.dll',0
word_898CF4 dw 7Bh
db 'InitCommonControlsEx',0
align 4
word_898D0C dw 53h
db 'ImageList_Create',0
align 10h
word_898D20 dw 4Dh
db 'ImageList_Add',0
aComctl32Dll db 'COMCTL32.dll',0
align 2
word_898D3E dw 0C3h
db 'SHGetFolderPathW',0
align 2
aShell32Dll db 'SHELL32.dll',0
word_898D5E dw 81h
db 'CreateDirectoryW',0
align 2
word_898D72 dw 202h
db 'GetLastError',0
align 2
word_898D82 dw 461h
db 'SetFileAttributesW',0
align 4
word_898D98 dw 14Dh
db 'FindResourceExW',0
word_898DAA dw 341h
db 'LoadResource',0
align 2
word_898DBA dw 4B1h
db 'SizeofResource',0
align 4
word_898DCC dw 354h
db 'LockResource',0
align 4
word_898DDC dw 8Fh
db 'CreateFileW',0
word_898DEA dw 525h
db 'WriteFile',0
word_898DF6 dw 52h
db 'CloseHandle',0
word_898E04 dw 0D6h
db 'DeleteFileW',0
word_898E12 dw 293h
db 'GetTickCount',0
align 2
word_898E22 dw 2A4h
db 'GetVersionExW',0
word_898E32 dw 11Dh
db 'ExpandEnvironmentStringsW',0
word_898E4E dw 139h
db 'FindFirstFileW',0
align 10h
word_898E60 dw 12Eh
db 'FindClose',0
word_898E6C dw 360h
db 'MoveFileExW',0
word_898E7A dw 1EAh
db 'GetFileAttributesW',0
align 10h
word_898E90 dw 75h
db 'CopyFileW',0
word_898E9C dw 145h
db 'FindNextFileW',0
word_898EAC dw 285h
db 'GetTempPathW',0
align 4
word_898EBC dw 29Eh
db 'GetUserDefaultUILanguage',0
align 4
word_898ED8 dw 206h
db 'GetLocaleInfoW',0
align 2
word_898EEA dw 49Dh
db 'SetThreadUILanguage',0
word_898F00 dw 497h
db 'SetThreadLocale',0
aKernel32Dll db 'KERNEL32.dll',0
align 10h
word_898F20 dw 27Bh
db 'SendMessageTimeoutW',0
word_898F36 dw 0ACh
db 'DialogBoxParamW',0
word_898F48 dw 1FAh
db 'LoadStringW',0
word_898F56 dw 2CBh
db 'SetWindowTextW',0
align 4
word_898F68 dw 127h
db 'GetDlgItem',0
align 2
word_898F76 dw 27Ch
db 'SendMessageW',0
align 2
word_898F86 dw 1E7h
db 'LoadBitmapW',0
word_898F94 dw 114h
db 'GetClientRect',0
word_898FA4 dw 123h
db 'GetDesktopWindow',0
align 4
word_898FB8 dw 19Ch
db 'GetWindowRect',0
word_898FC8 dw 21Bh
db 'MoveWindow',0
align 2
word_898FD6 dw 2DFh
db 'ShowWindow',0
align 4
word_898FE4 dw 1BEh
db 'InvalidateRect',0
align 2
word_898FF6 dw 292h
db 'SetFocus',0
align 2
word_899002 dw 0DAh
db 'EndDialog',0
aUser32Dll db 'USER32.dll',0
align 2
word_89901A dw 20Dh
db 'GetStockObject',0
align 4
aGdi32Dll db 'GDI32.dll',0
word_899036 dw 239h
db 'RegCreateKeyExW',0
word_899048 dw 26Eh
db 'RegQueryValueExW',0
align 4
word_89905C dw 27Eh
db 'RegSetValueExW',0
align 2
word_89906E dw 230h
db 'RegCloseKey',0
word_89907C dw 261h
db 'RegOpenKeyExW',0
aAdvapi32Dll db 'ADVAPI32.dll',0
align 2
word_89909A dw 0EAh
db 'EncodePointer',0
word_8990AA dw 0CAh
db 'DecodePointer',0
word_8990BA dw 279h
db 'GetSystemTimeAsFileTime',0
word_8990D4 dw 187h
db 'GetCommandLineW',0
word_8990E6 dw 3B1h
db 'RaiseException',0
align 4
word_8990F8 dw 418h
db 'RtlUnwind',0
word_899104 dw 300h
db 'IsDebuggerPresent',0
word_899118 dw 304h
db 'IsProcessorFeaturePresent',0
word_899134 dw 2CFh
db 'HeapFree',0
align 10h
word_899140 dw 2CBh
db 'HeapAlloc',0
word_89914C dw 2EBh
db 'InterlockedDecrement',0
align 4
word_899164 dw 119h
db 'ExitProcess',0
word_899172 dw 217h
db 'GetModuleHandleExW',0
align 4
word_899188 dw 245h
db 'GetProcAddress',0
align 2
word_89919A dw 367h
db 'MultiByteToWideChar',0
word_8991B0 dw 2D4h
db 'HeapSize',0
align 4
word_8991BC dw 4B2h
db 'Sleep',0
word_8991C4 dw 264h
db 'GetStdHandle',0
align 4
word_8991D4 dw 214h
db 'GetModuleFileNameW',0
align 2
word_8991EA dw 298h
db 'GetTimeZoneInformation',0
align 4
word_899204 dw 511h
db 'WideCharToMultiByte',0
word_89921A dw 2EFh
db 'InterlockedIncrement',0
align 2
word_899232 dw 30Ah
db 'IsValidCodePage',0
word_899244 dw 168h
db 'GetACP',0
align 2
word_89924E dw 237h
db 'GetOEMCP',0
align 2
word_89925A dw 172h
db 'GetCPInfo',0
word_899266 dw 473h
db 'SetLastError',0
align 2
word_899276 dw 1C5h
db 'GetCurrentThreadId',0
align 4
word_89928C dw 24Ah
db 'GetProcessHeap',0
align 2
word_89929E dw 1F3h
db 'GetFileType',0
word_8992AC dw 2E3h
db 'InitializeCriticalSectionAndSpinCou'
db 'nt',0
word_8992D4 dw 0D1h
db 'DeleteCriticalSection',0
word_8992EC dw 263h
db 'GetStartupInfoW',0
word_8992FE dw 3A7h
db 'QueryPerformanceCounter',0
word_899318 dw 1C1h
db 'GetCurrentProcessId',0
word_89932E dw 1DAh
db 'GetEnvironmentStringsW',0
align 4
word_899348 dw 161h
db 'FreeEnvironmentStringsW',0
word_899362 dw 4D3h
db 'UnhandledExceptionFilter',0
align 2
word_89937E dw 4A5h
db 'SetUnhandledExceptionFilter',0
word_89939C dw 1C0h
db 'GetCurrentProcess',0
word_8993B0 dw 4C0h
db 'TerminateProcess',0
align 4
word_8993C4 dw 4C5h
db 'TlsAlloc',0
align 10h
word_8993D0 dw 4C7h
db 'TlsGetValue',0
word_8993DE dw 4C8h
db 'TlsSetValue',0
word_8993EC dw 4C6h
db 'TlsFree',0
word_8993F6 dw 218h
db 'GetModuleHandleW',0
align 2
word_89940A dw 0EEh
db 'EnterCriticalSection',0
align 2
word_899422 dw 339h
db 'LeaveCriticalSection',0
align 2
word_89943A dw 33Eh
db 'LoadLibraryExW',0
align 4
word_89944C dw 2D2h
db 'HeapReAlloc',0
word_89945A dw 38Ah
db 'OutputDebugStringW',0
align 10h
word_899470 dw 33Fh
db 'LoadLibraryW',0
align 10h
word_899480 dw 64h
db 'CompareStringW',0
align 2
word_899492 dw 32Dh
db 'LCMapStringW',0
align 2
word_8994A2 dw 19Ah
db 'GetConsoleCP',0
align 2
word_8994B2 dw 1ACh
db 'GetConsoleMode',0
align 4
word_8994C4 dw 467h
db 'SetFilePointerEx',0
align 4
word_8994D8 dw 269h
db 'GetStringTypeW',0
align 2
word_8994EA dw 487h
db 'SetStdHandle',0
align 2
word_8994FA dw 524h
db 'WriteConsoleW',0
word_89950A dw 157h
db 'FlushFileBuffers',0
align 2
word_89951E dw 456h
db 'SetEnvironmentVariableA',0
align 1000h
_rdata ends

; Section 3. (virtual address 0001A000)
; Virtual size                  : 00003134 (  12596.)
; Section size in file          : 00001200 (   4608.)
; Offset to raw data for section: 00017C00
; Flags C0000040: Data Readable Writable
; Alignment     : default

; Segment type: Pure data
; Segment permissions: Read/Write
_data segment para public 'DATA' use32
assume cs:_data
;org 89A000h
off_89A000 dd offset off_8930A4
align 8
aAvbadAllocStd db '.?AVbad_alloc@std@@',0
off_89A01C dd offset off_8930A4
db    0
db    0
db    0
db    0
db  2Eh ; .
db  3Fh ; ?
db  41h ; A
db  56h ; V
db  65h ; e
db  78h ; x
db  63h ; c
db  65h ; e
db  70h ; p
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  40h ; @
db  73h ; s
db  74h ; t
db  64h ; d
db  40h ; @
db  40h ; @
db    0
off_89A038 dd offset off_8930A4
align 10h
aAvlogicErrorSt db '.?AVlogic_error@std@@',0
align 4
off_89A058 dd offset off_8930A4
align 10h
aAvlengthErrorS db '.?AVlength_error@std@@',0
align 4
off_89A078 dd offset off_8930A4
align 10h
aAvoutOfRangeSt db '.?AVout_of_range@std@@',0
align 10h
off_89A0A0 dd offset off_8930A4
align 8
aAvtypeInfo db '.?AVtype_info@@',0
align 10h
; uintptr_t __security_cookie
___security_cookie dd 0BB40E64Eh
dword_89A0C4 dd 44BF19B1h
dword_89A0C8 dd 1
align 10h
dword_89A0D0 dd 2
align 8
dword_89A0D8 dd 1
dword_89A0DC dd 16h
db    2
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db    3
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db    4
db    0
db    0
db    0
db  18h
db    0
db    0
db    0
db    5
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db    6
db    0
db    0
db    0
db    9
db    0
db    0
db    0
db    7
db    0
db    0
db    0
db  0Ch
db    0
db    0
db    0
db    8
db    0
db    0
db    0
db  0Ch
db    0
db    0
db    0
db    9
db    0
db    0
db    0
db  0Ch
db    0
db    0
db    0
db  0Ah
db    0
db    0
db    0
db    7
db    0
db    0
db    0
db  0Bh
db    0
db    0
db    0
db    8
db    0
db    0
db    0
db  0Ch
db    0
db    0
db    0
db  16h
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db  16h
db    0
db    0
db    0
db  0Fh
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db  10h
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db  11h
db    0
db    0
db    0
db  12h
db    0
db    0
db    0
db  12h
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db  21h ; !
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db  35h ; 5
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db  41h ; A
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db  43h ; C
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db  50h ; P
db    0
db    0
db    0
db  11h
db    0
db    0
db    0
db  52h ; R
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db  53h ; S
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db  57h ; W
db    0
db    0
db    0
db  16h
db    0
db    0
db    0
db  59h ; Y
db    0
db    0
db    0
db  0Bh
db    0
db    0
db    0
db  6Ch ; l
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db  6Dh ; m
db    0
db    0
db    0
db  20h
db    0
db    0
db    0
db  70h ; p
db    0
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  72h ; r
db    0
db    0
db    0
db    9
db    0
db    0
db    0
db    6
db    0
db    0
db    0
db  16h
db    0
db    0
db    0
db  80h
db    0
db    0
db    0
db  0Ah
db    0
db    0
db    0
db  81h
db    0
db    0
db    0
db  0Ah
db    0
db    0
db    0
db  82h
db    0
db    0
db    0
db    9
db    0
db    0
db    0
db  83h
db    0
db    0
db    0
db  16h
db    0
db    0
db    0
db  84h
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db  91h
db    0
db    0
db    0
db  29h ; )
db    0
db    0
db    0
db  9Eh
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db 0A1h
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db 0A4h
db    0
db    0
db    0
db  0Bh
db    0
db    0
db    0
db 0A7h
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db 0B7h
db    0
db    0
db    0
db  11h
db    0
db    0
db    0
db 0CEh
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db 0D7h
db    0
db    0
db    0
db  0Bh
db    0
db    0
db    0
db  18h
db    7
db    0
db    0
db  0Ch
db    0
db    0
db    0
unk_89A240 db  0Ch
db    0
db    0
db    0
unk_89A244 db    8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dword_89A250 dd 7080h
dword_89A254 dd 1
dword_89A258 dd 0FFFFF1F0h
align 10h
unk_89A260 db  50h ; P
db  53h ; S
db  54h ; T
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_89A2A0 db  50h ; P
db  44h ; D
db  54h ; T
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
off_89A2E0 dd offset unk_89A260
dd offset unk_89A2A0
align 10h
dword_89A2F0 dd 0FFFFFFFFh
dword_89A2F4 dd 0
dword_89A2F8 dd 0
dword_89A2FC dd 0FFFFFFFFh
dword_89A300 dd 0
dword_89A304 dd 0
align 10h
; volatile LONG *lpAddend
lpAddend dd offset unk_89A610
byte_89A314 db 1
db    2
db    4
db    8
dword_89A318 dd 3A4h
unk_89A31C db  60h ; `
db  82h
db  79h ; y
db  82h
db  21h ; !
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_89A328 db 0A6h
db 0DFh
db    0
db    0
db    0
db    0
db    0
db    0
db 0A1h
db 0A5h
db    0
db    0
db    0
db    0
db    0
db    0
db  81h
db  9Fh
db 0E0h
db 0FCh
db    0
db    0
db    0
db    0
db  40h ; @
db  7Eh ; ~
db  80h
db 0FCh
db    0
db    0
db    0
db    0
db 0A8h
db    3
db    0
db    0
db 0C1h
db 0A3h
db 0DAh
db 0A3h
db  20h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  81h
db 0FEh
db    0
db    0
db    0
db    0
db    0
db    0
db  40h ; @
db 0FEh
db    0
db    0
db    0
db    0
db    0
db    0
db 0B5h
db    3
db    0
db    0
db 0C1h
db 0A3h
db 0DAh
db 0A3h
db  20h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  81h
db 0FEh
db    0
db    0
db    0
db    0
db    0
db    0
db  41h ; A
db 0FEh
db    0
db    0
db    0
db    0
db    0
db    0
db 0B6h
db    3
db    0
db    0
db 0CFh
db 0A2h
db 0E4h
db 0A2h
db  1Ah
db    0
db 0E5h
db 0A2h
db 0E8h
db 0A2h
db  5Bh ; [
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  81h
db 0FEh
db    0
db    0
db    0
db    0
db    0
db    0
db  40h ; @
db  7Eh ; ~
db 0A1h
db 0FEh
db    0
db    0
db    0
db    0
db  51h ; Q
db    5
db    0
db    0
db  51h ; Q
db 0DAh
db  5Eh ; ^
db 0DAh
db  20h
db    0
db  5Fh ; _
db 0DAh
db  6Ah ; j
db 0DAh
db  32h ; 2
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  81h
db 0D3h
db 0D8h
db 0DEh
db 0E0h
db 0F9h
db    0
db    0
db  31h ; 1
db  7Eh ; ~
db  81h
db 0FEh
db    0
db    0
db    0
db    0
byte_89A408 db 0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db    0
db    0
db    0
db    0
db    0
db    0
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
byte_89A510 db 0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  61h ; a
db  62h ; b
db  63h ; c
db  64h ; d
db  65h ; e
db  66h ; f
db  67h ; g
db  68h ; h
db  69h ; i
db  6Ah ; j
db  6Bh ; k
db  6Ch ; l
db  6Dh ; m
db  6Eh ; n
db  6Fh ; o
db  70h ; p
db  71h ; q
db  72h ; r
db  73h ; s
db  74h ; t
db  75h ; u
db  76h ; v
db  77h ; w
db  78h ; x
db  79h ; y
db  7Ah ; z
db    0
db    0
db    0
db    0
db    0
db    0
db  41h ; A
db  42h ; B
db  43h ; C
db  44h ; D
db  45h ; E
db  46h ; F
db  47h ; G
db  48h ; H
db  49h ; I
db  4Ah ; J
db  4Bh ; K
db  4Ch ; L
db  4Dh ; M
db  4Eh ; N
db  4Fh ; O
db  50h ; P
db  51h ; Q
db  52h ; R
db  53h ; S
db  54h ; T
db  55h ; U
db  56h ; V
db  57h ; W
db  58h ; X
db  59h ; Y
db  5Ah ; Z
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_89A610 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db    0
db    0
db    0
db    0
db    0
db    0
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  61h ; a
db  62h ; b
db  63h ; c
db  64h ; d
db  65h ; e
db  66h ; f
db  67h ; g
db  68h ; h
db  69h ; i
db  6Ah ; j
db  6Bh ; k
db  6Ch ; l
db  6Dh ; m
db  6Eh ; n
db  6Fh ; o
db  70h ; p
db  71h ; q
db  72h ; r
db  73h ; s
db  74h ; t
db  75h ; u
db  76h ; v
db  77h ; w
db  78h ; x
db  79h ; y
db  7Ah ; z
db    0
db    0
db    0
db    0
db    0
db    0
db  41h ; A
db  42h ; B
db  43h ; C
db  44h ; D
db  45h ; E
db  46h ; F
db  47h ; G
db  48h ; H
db  49h ; I
db  4Ah ; J
db  4Bh ; K
db  4Ch ; L
db  4Dh ; M
db  4Eh ; N
db  4Fh ; O
db  50h ; P
db  51h ; Q
db  52h ; R
db  53h ; S
db  54h ; T
db  55h ; U
db  56h ; V
db  57h ; W
db  58h ; X
db  59h ; Y
db  5Ah ; Z
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
; DWORD dwTlsIndex
dwTlsIndex dd 0FFFFFFFFh
unk_89A834 db  43h ; C
db    0
db    0
db    0
off_89A838 dd offset aSun ; "Sun"
dd offset aMon          ; "Mon"
dd offset aTue          ; "Tue"
dd offset aWed          ; "Wed"
dd offset aThu          ; "Thu"
dd offset aFri          ; "Fri"
dd offset aSat          ; "Sat"
dd offset aSunday       ; "Sunday"
dd offset aMonday       ; "Monday"
dd offset aTuesday      ; "Tuesday"
dd offset aWednesday    ; "Wednesday"
dd offset aThursday     ; "Thursday"
dd offset aFriday       ; "Friday"
dd offset aSaturday     ; "Saturday"
dd offset aJan          ; "Jan"
dd offset aFeb          ; "Feb"
dd offset aMar          ; "Mar"
dd offset aApr          ; "Apr"
dd offset aMay          ; "May"
dd offset aJun          ; "Jun"
dd offset aJul          ; "Jul"
dd offset aAug          ; "Aug"
dd offset aSep          ; "Sep"
dd offset aOct          ; "Oct"
dd offset aNov          ; "Nov"
dd offset aDec          ; "Dec"
dd offset aJanuary      ; "January"
dd offset aFebruary     ; "February"
dd offset aMarch        ; "March"
dd offset aApril        ; "April"
dd offset aMay          ; "May"
dd offset aJune         ; "June"
dd offset aJuly         ; "July"
dd offset aAugust       ; "August"
dd offset aSeptember    ; "September"
dd offset aOctober      ; "October"
dd offset aNovember     ; "November"
dd offset aDecember     ; "December"
dd offset aAm           ; "AM"
dd offset aPm           ; "PM"
dd offset aMmDdYy       ; "MM/dd/yy"
dd offset aDdddMmmmDdYyyy ; "dddd, MMMM dd, yyyy"
dd offset aHhMmSs       ; "HH:mm:ss"
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset aSun_0        ; "Sun"
dd offset aMon_0        ; "Mon"
dd offset aTue_0        ; "Tue"
dd offset aWed_0        ; "Wed"
dd offset aThu_0        ; "Thu"
dd offset aFri_0        ; "Fri"
dd offset aSat_0        ; "Sat"
dd offset aSunday_0     ; "Sunday"
dd offset aMonday_0     ; "Monday"
dd offset aTuesday_0    ; "Tuesday"
dd offset aWednesday_0  ; "Wednesday"
dd offset aThursday_0   ; "Thursday"
dd offset aFriday_0     ; "Friday"
dd offset aSaturday_0   ; "Saturday"
dd offset aJan_0        ; "Jan"
dd offset aFeb_0        ; "Feb"
dd offset aMar_0        ; "Mar"
dd offset aApr_0        ; "Apr"
dd offset aMay_0        ; "May"
dd offset aJun_0        ; "Jun"
dd offset aJul_0        ; "Jul"
dd offset aAug_0        ; "Aug"
dd offset aSep_0        ; "Sep"
dd offset aOct_0        ; "Oct"
dd offset aNov_0        ; "Nov"
dd offset aDec_0        ; "Dec"
dd offset aJanuary_0    ; "January"
dd offset aFebruary_0   ; "February"
dd offset aMarch_0      ; "March"
dd offset aApril_0      ; "April"
dd offset aMay_0        ; "May"
dd offset aJune_0       ; "June"
dd offset aJuly_0       ; "July"
dd offset aAugust_0     ; "August"
dd offset aSeptember_0  ; "September"
dd offset aOctober_0    ; "October"
dd offset aNovember_0   ; "November"
dd offset aDecember_0   ; "December"
dd offset aAm_0         ; "AM"
dd offset aPm_0         ; "PM"
dd offset aMmDdYy_0     ; "MM/dd/yy"
dd offset aDdddMmmmDdYyyy_0 ; "dddd, MMMM dd, yyyy"
dd offset aHhMmSs_0     ; "HH:mm:ss"
dd offset aEnUs         ; "en-US"
; volatile LONG *off_89A99C
off_89A99C dd offset Addend
; LONG Addend
Addend dd 1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset unk_89A834
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset unk_89A834
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset unk_89A834
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset unk_89A834
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset unk_89A834
align 10h
db    1
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_89AF20
align 10h
dd offset asc_896CA8    ; "         (((((                  H"
dd offset unk_897130
dd offset unk_8972B0
dd offset off_89A838    ; "Sun"
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
off_89AA58 dd offset Addend
dd offset unk_89A610
db    1
db    0
db    0
db    0
dword_89AA64 dd 0FFFFFFFEh
dd offset aHH           ; "        h((((                  H"
align 10h
unk_89AA70 db 0FFh
db 0FFh
db 0FFh
db 0FFh
db  80h
db  0Ah
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dword_89AAB0 dd 0FFFFFFFFh
align 10h
off_89AAC0 dd offset off_8930A4
align 8
aAvbadException db '.?AVbad_exception@std@@',0
; LPCRITICAL_SECTION lpCriticalSection
lpCriticalSection dd 0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
off_89AC00 dd offset __fptrap
dd offset __fptrap
dd offset __fptrap
dd offset __fptrap
dd offset __fptrap
dd offset __fptrap
; PVOID off_89AC18
off_89AC18 dd offset __fptrap
dd offset __fptrap
; PVOID off_89AC20
off_89AC20 dd offset __fptrap
; PVOID off_89AC24
off_89AC24 dd offset __fptrap
off_89AC28 dd offset unk_89C080
align 10h
dd offset unk_89C080
db    1
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  10h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_89AE88 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
; char *Str
Str dd offset aNull     ; "(null)"
off_89AEAC dd offset aNull_0 ; "(null)"
dword_89AEB0 dd 0FFFFFFFFh
db  1Eh
db    0
db    0
db    0
db  3Ah ; :
db    0
db    0
db    0
db  59h ; Y
db    0
db    0
db    0
db  77h ; w
db    0
db    0
db    0
db  96h
db    0
db    0
db    0
db 0B4h
db    0
db    0
db    0
db 0D3h
db    0
db    0
db    0
db 0F2h
db    0
db    0
db    0
db  10h
db    1
db    0
db    0
db  2Fh ; /
db    1
db    0
db    0
db  4Dh ; M
db    1
db    0
db    0
dword_89AEE0 dd 16Ch
dword_89AEE4 dd 0FFFFFFFFh
db  1Eh
db    0
db    0
db    0
db  3Bh ; ;
db    0
db    0
db    0
db  5Ah ; Z
db    0
db    0
db    0
db  78h ; x
db    0
db    0
db    0
db  97h
db    0
db    0
db    0
db 0B5h
db    0
db    0
db    0
db 0D4h
db    0
db    0
db    0
db 0F3h
db    0
db    0
db    0
db  11h
db    1
db    0
db    0
db  30h ; 0
db    1
db    0
db    0
db  4Eh ; N
db    1
db    0
db    0
db  6Dh ; m
db    1
db    0
db    0
dd offset off_89AF20
unk_89AF1C db  2Eh ; .
db    0
db    0
db    0
off_89AF20 dd offset unk_89AF1C
off_89AF24 dd offset unk_89C020
off_89AF28 dd offset unk_89C020
off_89AF2C dd offset unk_89C020
off_89AF30 dd offset unk_89C020
off_89AF34 dd offset unk_89C020
off_89AF38 dd offset unk_89C020
off_89AF3C dd offset unk_89C020
off_89AF40 dd offset unk_89C020
off_89AF44 dd offset unk_89C020
db  7Fh ; 
db  7Fh ; 
db  7Fh ; 
db  7Fh ; 
db  7Fh ; 
db  7Fh ; 
db  7Fh ; 
db  7Fh ; 
off_89AF50 dd offset unk_89AF70
off_89AF54 dd offset unk_89C024
off_89AF58 dd offset unk_89C024
off_89AF5C dd offset unk_89C024
off_89AF60 dd offset unk_89C024
off_89AF64 dd offset unk_89C024
off_89AF68 dd offset unk_89C024
off_89AF6C dd offset unk_89C024
unk_89AF70 db  2Eh ; .
db    0
db    0
db    0
dd offset asc_896CA8    ; "         (((((                  H"
off_89AF78 dd offset unk_896EAA
align 10h
unk_89AF80 db  20h
db    5
db  93h
db  19h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
; HANDLE hObject
hObject dd 0FFFFFFFEh
align 10h
off_89AFA0 dd offset off_8930A4
align 8
aAvSystemErrorC db '.?AV_System_error_category@std@@',0
align 4
off_89AFCC dd offset off_8930A4
db    0
db    0
db    0
db    0
db  2Eh ; .
db  3Fh ; ?
db  41h ; A
db  56h ; V
db  5Fh ; _
db  49h ; I
db  6Fh ; o
db  73h ; s
db  74h ; t
db  72h ; r
db  65h ; e
db  61h ; a
db  6Dh ; m
db  5Fh ; _
db  65h ; e
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db  5Fh ; _
db  63h ; c
db  61h ; a
db  74h ; t
db  65h ; e
db  67h ; g
db  6Fh ; o
db  72h ; r
db  79h ; y
db  40h ; @
db  73h ; s
db  74h ; t
db  64h ; d
db  40h ; @
db  40h ; @
db    0
db    0
off_89AFF8 dd offset off_8930A4
align 10h
aAvGenericError db '.?AV_Generic_error_category@std@@',0
align 4
off_89B024 dd offset off_8930A4
db    0
db    0
db    0
db    0
db  2Eh ; .
db  3Fh ; ?
db  41h ; A
db  56h ; V
db  65h ; e
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db  5Fh ; _
db  63h ; c
db  61h ; a
db  74h ; t
db  65h ; e
db  67h ; g
db  6Fh ; o
db  72h ; r
db  79h ; y
db  40h ; @
db  73h ; s
db  74h ; t
db  64h ; d
db  40h ; @
db  40h ; @
db    0
db    0
db    0
db    0
dd offset UpgradeCode   ; "{78D630C6-9EFC-439B-87B9-B0AA6E5848BE}"
; BYTE *lpData
lpData dd 0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dword_89B05C dd 0
dword_89B060 dd 7
; void *dword_89B064
dword_89B064 dd 0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dword_89B074 dd 0
dword_89B078 dd 7
off_89B07C dd offset off_893010
off_89B080 dd offset off_89302C
off_89B084 dd offset off_893048
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
; wchar_t *dword_89B0AC
dword_89B0AC dd 0
dword_89B0B0 dd 0
dword_89B0B4 dd 0
db    0
db    0
db    0
db    0
dword_89B0BC dd 0
dword_89B0C0 dd 0
dword_89B0C4 dd 0
align 40h
dword_89B100 dd 0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
word_89B18C dw 0
align 10h
word_89B190 dw 0
align 4
word_89B194 dw 0
align 4
word_89B198 dw 0
align 4
dword_89B19C dd 0
dword_89B1A0 dd 0
dword_89B1A4 dd 0
dword_89B1A8 dd 0
dword_89B1AC dd 0
dword_89B1B0 dd 0
dword_89B1B4 dd 0
dword_89B1B8 dd 0
word_89B1BC dw 0
align 10h
dword_89B1C0 dd 0
dword_89B1C4 dd 0
word_89B1C8 dw 0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
dword_89B3CC dd ?
dword_89B3D0 dd ?
dword_89B3D4 dd ?
unk_89B3D8 db    ? ;
db    ? ;
db    ? ;
db    ? ;
; void *dword_89B3DC
dword_89B3DC dd ?
; PVOID dword_89B3E0
dword_89B3E0 dd ?
; wchar_t Destination
Destination dw ?
align 4
byte_89B3E8 db ?
align 4
dword_89B3EC dd ?
db    ? ;
db    ? ;
db    ? ;
db    ? ;
dword_89B3F4 dd ?
dword_89B3F8 dd ?
dword_89B3FC dd ?
db    ? ;
db    ? ;
db    ? ;
db    ? ;
dword_89B404 dd ?
; void *dword_89B408
dword_89B408 dd ?
; void *dword_89B40C
dword_89B40C dd ?
db    ? ;
db    ? ;
db    ? ;
db    ? ;
dword_89B414 dd ?
dword_89B418 dd ?
align 10h
dword_89B420 dd ?
align 8
; wchar_t word_89B428
word_89B428 dw ?
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
; WCHAR String
String dw ?
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
word_89B662 dw ?
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
; PVOID dword_89BA50
dword_89BA50 dd ?
; PVOID dword_89BA54
dword_89BA54 dd ?
; char *Str2
Str2 dd ?
dword_89BA5C dd ?
dword_89BA60 dd ?
align 8
; struct _TIME_ZONE_INFORMATION TimeZoneInformation
TimeZoneInformation _TIME_ZONE_INFORMATION <?>
dword_89BB14 dd ?
dword_89BB18 dd ?
dword_89BB1C dd ?
word_89BB20 dw ?
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
dword_89BB2C dd ?
dword_89BB30 dd ?
; HANDLE hHeap
hHeap dd ?
dword_89BB38 dd ?
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
; WCHAR Filename
Filename dw ?
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
word_89BE40 dw ?
align 4
dword_89BE44 dd ?
; PVOID dword_89BE48
dword_89BE48 dd ?
align 10h
unk_89BE50 db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
dword_89BFDC dd ?
dword_89BFE0 dd ?
; PVOID dword_89BFE4
dword_89BFE4 dd ?
dword_89BFE8 dd ?
; PVOID dword_89BFEC
dword_89BFEC dd ?
dword_89BFF0 dd ?
align 10h
; PVOID dword_89C000
dword_89C000 dd ?
; PVOID dword_89C004
dword_89C004 dd ?
; PVOID dword_89C008
dword_89C008 dd ?
; PVOID dword_89C00C
dword_89C00C dd ?
; PVOID dword_89C010
dword_89C010 dd ?
align 8
dword_89C018 dd ?
dword_89C01C dd ?
unk_89C020 db    ? ;
db    ? ;
db    ? ;
db    ? ;
unk_89C024 db    ? ;
db    ? ;
db    ? ;
db    ? ;
; int cInitial
cInitial dd ?
dword_89C02C dd ?
; HINSTANCE hInstance
hInstance dd ?
dword_89C034 dd ?
align 10h
; void *Block
Block dd ?
; void *dword_89C044
dword_89C044 dd ?
dword_89C048 dd ?
align 20h
; void *dword_89C060
dword_89C060 dd ?
dword_89C064 dd ?
align 20h
unk_89C080 db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
dword_89D080 dd ?
align 20h
dword_89D0A0 dd ?
dword_89D0A4 dd ?
dword_89D0A8 dd ?
dword_89D0AC dd ?
dword_89D0B0 dd ?
dword_89D0B4 dd ?
dword_89D0B8 dd ?
dword_89D0BC dd ?
dword_89D0C0 dd ?
dword_89D0C4 dd ?
dword_89D0C8 dd ?
dword_89D0CC dd ?
dword_89D0D0 dd ?
dword_89D0D4 dd ?
dword_89D0D8 dd ?
dword_89D0DC dd ?
dword_89D0E0 dd ?
dword_89D0E4 dd ?
dword_89D0E8 dd ?
dword_89D0EC dd ?
dword_89D0F0 dd ?
dword_89D0F4 dd ?
dword_89D0F8 dd ?
dword_89D0FC dd ?
dword_89D100 dd ?
dword_89D104 dd ?
dword_89D108 dd ?
dword_89D10C dd ?
dword_89D110 dd ?
dword_89D114 dd ?
dword_89D118 dd ?
; PVOID dword_89D11C
dword_89D11C dd ?
; PVOID Ptr
Ptr dd ?
dword_89D124 dd ?
dword_89D128 dd ?
dword_89D12C dd ?
dword_89D130 dd ?
align 1000h
_data ends


end start
